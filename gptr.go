package gptr

import (
	"fmt"
)

func Run(permission string) {
	roles := getRoles(permission)
	for _, r := range roles {
		fmt.Println(r)
	}
}

func getRoles(permission string) []string {
	return map[string][]string{
		"container.resourceQuotas.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datacatalog.tagTemplates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog TagTemplate Owner (roles/datacatalog.tagTemplateOwner)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"deploymentmanager.resources.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkservices.serviceBindings.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"gsuiteaddons.deployments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
		},
		"healthcare.dicomStores.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Healthcare DICOM Store Viewer (roles/healthcare.dicomStoreViewer)",
			"Healthcare DICOM Viewer (roles/healthcare.dicomViewer)",
		},
		"apigee.appkeys.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"apigee.caches.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"bigtable.tables.setIamPolicy": {
			"Owner (roles/owner)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"container.certificateSigningRequests.approve": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.frontendConfigs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudjobdiscovery.profiles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
			"Profile Viewer (roles/cloudjobdiscovery.profilesViewer)",
		},
		"iap.webTypes.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"accessapproval.requests.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Approval Approver (roles/accessapproval.approver)",
			"Access Approval Viewer (roles/accessapproval.viewer)",
		},
		"aiplatform.featurestores.writeFeatures": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"servicemanagement.services.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud API Gateway Management Service Agent (roles/apigateway_management.serviceAgent)",
			"Endpoints Portal Service Agent (roles/endpointsportal.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Management Administrator (roles/servicemanagement.admin)",
		},
		"serviceusage.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"API Keys Admin (roles/serviceusage.apiKeysAdmin)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
			"Service Usage Consumer (roles/serviceusage.serviceUsageConsumer)",
			"Service Usage Viewer (roles/serviceusage.serviceUsageViewer)",
		},
		"osconfig.guestPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"GuestPolicy Admin (roles/osconfig.guestPolicyAdmin)",
			"GuestPolicy Editor (roles/osconfig.guestPolicyEditor)",
			"GuestPolicy Viewer (roles/osconfig.guestPolicyViewer)",
		},
		"pubsub.snapshots.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
		},
		"compute.externalVpnGateways.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.instances.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.certificateSigningRequests.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"pubsub.schemas.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Pub/Sub Admin (roles/pubsub.admin)",
		},
		"run.routes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"datalabeling.datasets.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
		},
		"deploymentmanager.manifests.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dns.resourceRecordSets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"accessapproval.settings.delete": {
			"Owner (roles/owner)",
			"Access Approval Config Editor (roles/accessapproval.configEditor)",
		},
		"apigee.developersubscriptions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.globalAddresses.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.resourcePolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.resourcePolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.annotations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
		},
		"iam.googleapis.com/workloadIdentityPools.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
			"IAM Workload Identity Pool Viewer (roles/iam.workloadIdentityPoolViewer)",
		},
		"baremetalsolution.luns.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.serviceAttachments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"integrations.apigeeSfdcChannels.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"apigateway.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
		},
		"connectors.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.mutatingWebhookConfigurations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.participants.suggest": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"osconfig.instanceOSPoliciesCompliances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"InstanceOSPoliciesCompliance Viewer (roles/osconfig.instanceOSPoliciesComplianceViewer)",
		},
		"datamigration.migrationjobs.start": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"earthengine.tables.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"pubsublite.topics.computeHeadCursor": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Subscriber (roles/pubsublite.subscriber)",
		},
		"source.repos.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Source Repository Administrator (roles/source.admin)",
		},
		"spanner.databases.beginReadOnlyTransaction": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database Reader (roles/spanner.databaseReader)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"recommender.cloudsqlOverprovisionedInstanceRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"serviceconsumermanagement.consumers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Management Administrator (roles/servicemanagement.admin)",
		},
		"appengine.memcache.flush": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
		},
		"cloudasset.assets.exportComputeGlobalForwardingRules": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudasset.assets.exportResource": {
			"Owner (roles/owner)",
			"Assured Workloads Service Agent (roles/assuredworkloads.serviceAgent)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.securitySettings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"earlyaccesscenter.customerAllowlists.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Early Access Center Administrator (roles/earlyaccesscenter.admin)",
			"Early Access Center Viewer (roles/earlyaccesscenter.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datastream.streams.start": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"pubsub.topics.publish": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Artifact Registry Service Agent (roles/artifactregistry.serviceAgent)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud IoT Core Service Agent (roles/cloudiot.serviceAgent)",
			"Cloud Scheduler Service Agent (roles/cloudscheduler.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Registry Service Agent (roles/containerregistry.ServiceAgent)",
			"Content Warehouse Service Agent (roles/contentwarehouse.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"KubeRun Events Data Plane Service Agent (roles/kuberun.eventsDataPlaneServiceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Media Asset Service Agent (roles/mediaasset.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Publisher (roles/pubsub.publisher)",
			"Security Center Notification Service Agent (roles/securitycenter.notificationServiceAgent)",
			"Google Cloud Security Response Service Agent (roles/securitycenter.securityResponseServiceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Cloud Source Repositories Service Agent (roles/sourcerepo.serviceAgent)",
			"Transcoder Service Agent (roles/transcoder.serviceAgent)",
		},
		"compute.instances.listReferrers": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.regionHealthCheckServices.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.serviceAttachments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.csiNodes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.regionTargetHttpsProxies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.runtimeClasses.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"runtimeconfig.variables.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"bigquery.tables.deleteSnapshot": {
			"Owner (roles/owner)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"gkehub.gateway.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"Connect Gateway Admin (roles/gkehub.gatewayAdmin)",
			"Connect Gateway Reader (roles/gkehub.gatewayReader)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"networkservices.endpointConfigSelectors.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"serviceusage.services.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Android Management User (roles/androidmanagement.user)",
			"Anthos Service Agent (roles/anthos.serviceAgent)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Cloud Profiler User (roles/cloudprofiler.user)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Cloud Scheduler Job Runner (roles/cloudscheduler.jobRunner)",
			"Cloud Scheduler Viewer (roles/cloudscheduler.viewer)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Viewer (roles/cloudsecurityscanner.viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Commerce Price Management Private Offers Admin (roles/commercepricemanagement.privateOffersAdmin)",
			"Commerce Price Management Viewer (roles/commercepricemanagement.viewer)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer User (roles/composer.user)",
			"Composer Worker (roles/composer.worker)",
			"Compute Admin (roles/compute.admin)",
			"Compute Image User (roles/compute.imageUser)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Compute packet mirroring admin (roles/compute.packetMirroringAdmin)",
			"Compute packet mirroring user (roles/compute.packetMirroringUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
			"Consumer Procurement Entitlement Viewer (roles/consumerprocurement.entitlementViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep User (roles/dataprep.projects.user)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Quota Administrator (roles/servicemanagement.quotaAdmin)",
			"Quota Viewer (roles/servicemanagement.quotaViewer)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
			"Service Usage Consumer (roles/serviceusage.serviceUsageConsumer)",
			"Service Usage Viewer (roles/serviceusage.serviceUsageViewer)",
		},
		"privateca.certificates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
			"CA Service Certificate Requester (roles/privateca.certificateRequester)",
		},
		"billing.accounts.create": {
			"Billing Account Creator (roles/billing.creator)",
		},
		"cloudiot.registries.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
		},
		"compute.subnetworks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"metastore.services.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
		},
		"notebooks.executions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"aiplatform.metadataSchemas.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"oauthconfig.clientpolicy.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
			"OAuth Config Viewer (roles/oauthconfig.viewer)",
		},
		"aiplatform.indexes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"securitycenter.findings.bulkMuteUpdate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Bulk Mute Editor (roles/securitycenter.findingsBulkMuteEditor)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.executions.addExecutionEvents": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.controllerRevisions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"healthcare.dicomStores.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
		},
		"logging.logMetrics.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"vpcaccess.connectors.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Serverless VPC Access Admin (roles/vpcaccess.admin)",
		},
		"cloudfunctions.functions.call": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"compute.targetGrpcProxies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.persistentVolumes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebasecrash.reports.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"recaptchaenterprise.relatedaccountgroups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"reCAPTCHA Enterprise Agent (roles/recaptchaenterprise.agent)",
		},
		"managedidentities.peerings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
		},
		"recaptchaenterprise.keys.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"reCAPTCHA Enterprise Admin (roles/recaptchaenterprise.admin)",
		},
		"aiplatform.hyperparameterTuningJobs.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.annotations.manipulate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"compute.instances.attachDisk": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.interconnects.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionBackendServices.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"apigee.deployments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"cloudasset.assets.exportComputeTargetSslProxies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudfunctions.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"cloudfunctions.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"actions.agent.claimContentProvider": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Actions Admin (roles/actions.Admin)",
		},
		"certificatemanager.certmaps.setIamPolicy": {
			"Owner (roles/owner)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"networkmanagement.connectivitytests.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Network Management Admin (roles/networkmanagement.admin)",
		},
		"riskmanager.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
			"Risk Manager Report Reviewer (roles/riskmanager.reviewer)",
			"Risk Manager Viewer (roles/riskmanager.viewer)",
		},
		"automlrecommendations.events.purge": {
			"Owner (roles/owner)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Retail Admin (roles/retail.admin)",
		},
		"bigquery.tables.get": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"BigQuery Metadata Viewer (roles/bigquery.metadataViewer)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"dataflow.snapshots.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Dataflow Viewer (roles/dataflow.viewer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dlp.analyzeRiskTemplates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Analyze Risk Templates Editor (roles/dlp.analyzeRiskTemplatesEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"bigquery.capacityCommitments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataproc.clusters.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
		},
		"retail.products.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"source.repos.create": {
			"Owner (roles/owner)",
			"Source Repository Administrator (roles/source.admin)",
		},
		"storage.objects.setIamPolicy": {
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Object Owner (roles/storage.legacyObjectOwner)",
			"Storage Object Admin (roles/storage.objectAdmin)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudtranslate.operations.wait": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Cloud Translation API Viewer (roles/cloudtranslate.viewer)",
		},
		"compute.interconnectAttachments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.volumeSnapshots.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataplex.lakes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"earthengine.assets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"logging.exclusions.create": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"run.routes.invoke": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Invoker (roles/run.invoker)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"aiplatform.executions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.events.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.resourceQuotas.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebaseperformance.config.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Performance Reporting Admin (roles/firebaseperformance.admin)",
		},
		"healthcare.hl7V2Messages.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
		},
		"ml.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"privateca.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
		},
		"riskmanager.serviceAccount.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
		},
		"aiplatform.features.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.tracesessions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"cloudkms.keyRings.deleteTagBinding": {
			"Owner (roles/owner)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"container.volumeSnapshotContents.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"fleetengine.vehicles.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
		},
		"eventarc.triggers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"spanner.databases.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
		},
		"artifactregistry.repositories.downloadArtifacts": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Service Agent (roles/artifactregistry.serviceAgent)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"composer.dags.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Composer User (roles/composer.user)",
		},
		"compute.firewallPolicies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"osconfig.patchJobs.exec": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Patch Job Executor (roles/osconfig.patchJobExecutor)",
		},
		"spanner.sessions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database Reader (roles/spanner.databaseReader)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"managedidentities.domains.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"ml.trials.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
		},
		"secretmanager.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Viewer (roles/secretmanager.viewer)",
		},
		"cloudtoolresults.steps.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.services.proxy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"dataconnectors.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
		},
		"iap.webServices.updateSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"IAP Settings Admin (roles/iap.settingsAdmin)",
		},
		"integrations.securityIntegrationVers.deploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"visualinspection.annotationSpecs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"certificatemanager.dnsauthorizations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"compute.nodeGroups.setIamPolicy": {
			"Owner (roles/owner)",
			"Compute Admin (roles/compute.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionBackendServices.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"privateca.reusableConfigs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"apigee.references.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"dataprocessing.datasources.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Data Processing Controls Resource Admin (roles/dataprocessing.admin)",
			"Data Processing Controls Data Source Manager (roles/dataprocessing.dataSourceManager)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"resourcemanager.tagValues.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
		},
		"visualinspection.images.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"pubsublite.reservations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"aiplatform.tensorboardTimeSeries.batchCreate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudtrace.traces.patch": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace Agent (roles/cloudtrace.agent)",
			"KubeRun Events Data Plane Service Agent (roles/kuberun.eventsDataPlaneServiceAgent)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
		},
		"compute.regionUrlMaps.validate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dlp.storedInfoTypes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Stored InfoTypes Editor (roles/dlp.storedInfoTypesEditor)",
		},
		"notebooks.runtimes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"accesscontextmanager.accessPolicies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.entityTypes.streamingReadFeatureValues": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Data Viewer (roles/aiplatform.featurestoreDataViewer)",
			"Vertex AI Feature Store Data Writer (roles/aiplatform.featurestoreDataWriter)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.firewalls.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Build Integrations Owner (roles/cloudbuild.integrationsOwner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dns.managedZones.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"recommender.iamPolicyRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
		},
		"bigtable.tables.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"dataplex.partitions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Metadata Reader (roles/dataplex.metadataReader)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"resourcemanager.projects.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Project Mover (roles/resourcemanager.projectMover)",
		},
		"bigtable.tables.sampleRowKeys": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"compute.sslCertificates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataplex.assets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Metadata Reader (roles/dataplex.metadataReader)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"iap.web.updateSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"IAP Settings Admin (roles/iap.settingsAdmin)",
		},
		"servicebroker.catalogs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"aiplatform.entityTypes.exportFeatureValues": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.routines.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"cloudkms.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS CryptoKey Decrypter (roles/cloudkms.cryptoKeyDecrypter)",
			"Cloud KMS CryptoKey Decrypter Via Delegation (roles/cloudkms.cryptoKeyDecrypterViaDelegation)",
			"Cloud KMS CryptoKey Encrypter (roles/cloudkms.cryptoKeyEncrypter)",
			"Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)",
			"Cloud KMS CryptoKey Encrypter/Decrypter Via Delegation (roles/cloudkms.cryptoKeyEncrypterDecrypterViaDelegation)",
			"Cloud KMS CryptoKey Encrypter Via Delegation (roles/cloudkms.cryptoKeyEncrypterViaDelegation)",
			"Cloud KMS Crypto Operator (roles/cloudkms.cryptoOperator)",
			"Cloud KMS Expert Raw PKCS#1 Key Manager (roles/cloudkms.expertRawPKCS1)",
			"Cloud KMS Importer (roles/cloudkms.importer)",
			"Cloud KMS CryptoKey Public Key Viewer (roles/cloudkms.publicKeyViewer)",
			"Cloud KMS CryptoKey Signer (roles/cloudkms.signer)",
			"Cloud KMS CryptoKey Signer/Verifier (roles/cloudkms.signerVerifier)",
			"Cloud KMS CryptoKey Verifier (roles/cloudkms.verifier)",
			"Cloud KMS Viewer (roles/cloudkms.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"integrations.securityAuthConfigs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"clouddebugger.breakpoints.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Debugger User (roles/clouddebugger.user)",
		},
		"container.apiServices.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.serviceAccounts.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"proximitybeacon.beacons.attach": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Beacon Attachment Publisher (roles/proximitybeacon.attachmentPublisher)",
		},
		"run.configurations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"apigee.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"bigtable.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkservices.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"resourcemanager.projects.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Approval Approver (roles/accessapproval.approver)",
			"Access Approval Config Editor (roles/accessapproval.configEditor)",
			"Access Approval Viewer (roles/accessapproval.viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Actions Admin (roles/actions.Admin)",
			"Actions Viewer (roles/actions.Viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Data Viewer (roles/aiplatform.featurestoreDataViewer)",
			"Vertex AI Feature Store Data Writer (roles/aiplatform.featurestoreDataWriter)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store Resource Viewer (roles/aiplatform.featurestoreResourceViewer)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Portal Admin (roles/apigee.portalAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Creator (roles/appengine.appCreator)",
			"App Engine Viewer (roles/appengine.appViewer)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Assured Workloads Reader (roles/assuredworkloads.reader)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Predictor (roles/automl.predictor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Autoscaling Site Admin (roles/autoscaling.sitesAdmin)",
			"Access Transparency Admin (roles/axt.admin)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Instances Admin (roles/baremetalsolution.instancesadmin)",
			"Bare Metal Solution Instances Viewer (roles/baremetalsolution.instancesviewer)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"BigQuery Job User (roles/bigquery.jobUser)",
			"BigQuery Metadata Viewer (roles/bigquery.metadataViewer)",
			"BigQuery Read Session User (roles/bigquery.readSessionUser)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"BigQuery User (roles/bigquery.user)",
			"BigQuery Data Transfer Service Agent (roles/bigquerydatatransfer.serviceAgent)",
			"Binary Authorization Attestor Admin (roles/binaryauthorization.attestorsAdmin)",
			"Binary Authorization Attestor Editor (roles/binaryauthorization.attestorsEditor)",
			"Binary Authorization Attestor Image Verifier (roles/binaryauthorization.attestorsVerifier)",
			"Binary Authorization Attestor Viewer (roles/binaryauthorization.attestorsViewer)",
			"Binary Authorization Policy Administrator (roles/binaryauthorization.policyAdmin)",
			"Binary Authorization Policy Editor (roles/binaryauthorization.policyEditor)",
			"Binary Authorization Policy Viewer (roles/binaryauthorization.policyViewer)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Browser (roles/browser)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Cloud Build Approver (roles/cloudbuild.builds.approver)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Editor (roles/cloudbuild.builds.editor)",
			"Cloud Build Viewer (roles/cloudbuild.builds.viewer)",
			"Cloud Build Integrations Editor (roles/cloudbuild.integrationsEditor)",
			"Cloud Build Integrations Owner (roles/cloudbuild.integrationsOwner)",
			"Cloud Build Integrations Viewer (roles/cloudbuild.integrationsViewer)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Build WorkerPool Editor (roles/cloudbuild.workerPoolEditor)",
			"Cloud Build WorkerPool Owner (roles/cloudbuild.workerPoolOwner)",
			"Cloud Build WorkerPool Viewer (roles/cloudbuild.workerPoolViewer)",
			"Firebase Remote Config Admin (roles/cloudconfig.admin)",
			"Firebase Remote Config Viewer (roles/cloudconfig.viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Approver (roles/clouddeploy.approver)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Admin (roles/cloudjobdiscovery.admin)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
			"Job Viewer (roles/cloudjobdiscovery.jobsViewer)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
			"Profile Viewer (roles/cloudjobdiscovery.profilesViewer)",
			"Cloud KMS CryptoKey Decrypter Via Delegation (roles/cloudkms.cryptoKeyDecrypterViaDelegation)",
			"Cloud KMS CryptoKey Encrypter/Decrypter Via Delegation (roles/cloudkms.cryptoKeyEncrypterDecrypterViaDelegation)",
			"Cloud KMS CryptoKey Encrypter Via Delegation (roles/cloudkms.cryptoKeyEncrypterViaDelegation)",
			"Cloud KMS Expert Raw PKCS#1 Key Manager (roles/cloudkms.expertRawPKCS1)",
			"Catalog Consumer (roles/cloudprivatecatalog.consumer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Cloud Profiler User (roles/cloudprofiler.user)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Cloud Scheduler Job Runner (roles/cloudscheduler.jobRunner)",
			"Cloud Scheduler Viewer (roles/cloudscheduler.viewer)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Tech Support Editor (roles/cloudsupport.techSupportEditor)",
			"Tech Support Viewer (roles/cloudsupport.techSupportViewer)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Enqueuer (roles/cloudtasks.enqueuer)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
			"Cloud Tasks Task Deleter (roles/cloudtasks.taskDeleter)",
			"Cloud Tasks Task Runner (roles/cloudtasks.taskRunner)",
			"Cloud Tasks Viewer (roles/cloudtasks.viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace User (roles/cloudtrace.user)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Cloud Translation API Viewer (roles/cloudtranslate.viewer)",
			"Commerce Price Management Private Offers Admin (roles/commercepricemanagement.privateOffersAdmin)",
			"Commerce Price Management Viewer (roles/commercepricemanagement.viewer)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Compute Admin (roles/compute.admin)",
			"Compute Image User (roles/compute.imageUser)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Compute packet mirroring admin (roles/compute.packetMirroringAdmin)",
			"Compute packet mirroring user (roles/compute.packetMirroringUser)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
			"Consumer Procurement Entitlement Viewer (roles/consumerprocurement.entitlementViewer)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Cluster Admin (roles/container.clusterAdmin)",
			"Kubernetes Engine Cluster Viewer (roles/container.clusterViewer)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Notes Editor (roles/containeranalysis.notes.editor)",
			"Container Analysis Notes Viewer (roles/containeranalysis.notes.viewer)",
			"Container Analysis Occurrences Editor (roles/containeranalysis.occurrences.editor)",
			"Container Analysis Occurrences Viewer (roles/containeranalysis.occurrences.viewer)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Policy Tag Admin (roles/datacatalog.categoryAdmin)",
			"DataCatalog EntryGroup Creator (roles/datacatalog.entryGroupCreator)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"DataCatalog entry Owner (roles/datacatalog.entryOwner)",
			"DataCatalog Entry Viewer (roles/datacatalog.entryViewer)",
			"Data Catalog TagTemplate Owner (roles/datacatalog.tagTemplateOwner)",
			"Data Catalog TagTemplate User (roles/datacatalog.tagTemplateUser)",
			"Data Catalog TagTemplate Viewer (roles/datacatalog.tagTemplateViewer)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataflow Viewer (roles/dataflow.viewer)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Data Fusion Viewer (roles/datafusion.viewer)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
			"Data pipelines Admin (roles/datapipelines.admin)",
			"Data pipelines Invoker (roles/datapipelines.invoker)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Data pipelines Viewer (roles/datapipelines.viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Cloud Datastore Import Export Admin (roles/datastore.importExportAdmin)",
			"Cloud Datastore Index Admin (roles/datastore.indexAdmin)",
			"Cloud Datastore Key Visualizer Viewer (roles/datastore.keyVisualizerViewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
			"Dell EMC Cloud OneFS Viewer (roles/dellemccloudonefs.viewer)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
			"Cloud Domains Admin (roles/domains.admin)",
			"Cloud Domains Viewer (roles/domains.viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
			"Endpoints Portal Admin (roles/endpoints.portalAdmin)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Error Reporting Viewer (roles/errorreporting.viewer)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Eventarc Viewer (roles/eventarc.viewer)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
			"Firebase A/B Testing Viewer (roles/firebaseabt.viewer)",
			"Firebase App Distribution Admin (roles/firebaseappdistro.admin)",
			"Firebase App Distribution Viewer (roles/firebaseappdistro.viewer)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Firebase Authentication Viewer (roles/firebaseauth.viewer)",
			"Firebase Cloud Messaging API Admin (roles/firebasecloudmessaging.admin)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
			"Firebase Crashlytics Viewer (roles/firebasecrashlytics.viewer)",
			"Firebase Realtime Database Admin (roles/firebasedatabase.admin)",
			"Firebase Realtime Database Viewer (roles/firebasedatabase.viewer)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
			"Firebase Dynamic Links Viewer (roles/firebasedynamiclinks.viewer)",
			"Firebase Hosting Admin (roles/firebasehosting.admin)",
			"Firebase Hosting Viewer (roles/firebasehosting.viewer)",
			"Firebase In-App Messaging Admin (roles/firebaseinappmessaging.admin)",
			"Firebase In-App Messaging Viewer (roles/firebaseinappmessaging.viewer)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
			"Firebase ML Kit Viewer (roles/firebaseml.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Firebase Cloud Messaging Admin (roles/firebasenotifications.admin)",
			"Firebase Cloud Messaging Viewer (roles/firebasenotifications.viewer)",
			"Firebase Performance Reporting Admin (roles/firebaseperformance.admin)",
			"Firebase Performance Reporting Viewer (roles/firebaseperformance.viewer)",
			"Firebase Predictions Admin (roles/firebasepredictions.admin)",
			"Firebase Predictions Viewer (roles/firebasepredictions.viewer)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
			"Firebase Rules Viewer (roles/firebaserules.viewer)",
			"Cloud Storage for Firebase Admin (roles/firebasestorage.admin)",
			"Cloud Storage for Firebase Viewer (roles/firebasestorage.viewer)",
			"FleetEngine Service Agent (roles/fleetengine.serviceAgent)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Game Services API Viewer (roles/gameservices.viewer)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
			"Google Workspace Add-ons Reader (roles/gsuiteaddons.reader)",
			"Google Workspace Add-ons Tester (roles/gsuiteaddons.tester)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
			"Healthcare Annotation Reader (roles/healthcare.annotationReader)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
			"Healthcare Annotation Store Viewer (roles/healthcare.annotationStoreViewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
			"Healthcare Dataset Viewer (roles/healthcare.datasetViewer)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Healthcare DICOM Store Viewer (roles/healthcare.dicomStoreViewer)",
			"Healthcare DICOM Viewer (roles/healthcare.dicomViewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Healthcare FHIR Store Viewer (roles/healthcare.fhirStoreViewer)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Healthcare HL7v2 Message Ingest (roles/healthcare.hl7V2Ingest)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
			"Healthcare HL7v2 Store Viewer (roles/healthcare.hl7V2StoreViewer)",
			"Healthcare NLP Service Viewer (roles/healthcare.nlpServiceViewer)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
			"Organization Role Administrator (roles/iam.organizationRoleAdmin)",
			"Organization Role Viewer (roles/iam.organizationRoleViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
			"Create Service Accounts (roles/iam.serviceAccountCreator)",
			"Delete Service Accounts (roles/iam.serviceAccountDeleter)",
			"Service Account Key Admin (roles/iam.serviceAccountKeyAdmin)",
			"Service Account Token Creator (roles/iam.serviceAccountTokenCreator)",
			"Service Account User (roles/iam.serviceAccountUser)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
			"IAM Workload Identity Pool Viewer (roles/iam.workloadIdentityPoolViewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Deployer (roles/integrations.apigeeIntegrationDeployerRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
			"Apigee Integration Invoker (roles/integrations.apigeeIntegrationInvokerRole)",
			"Apigee Integration Viewer (roles/integrations.apigeeIntegrationsViewer)",
			"Apigee Integration Approver (roles/integrations.apigeeSuspensionResolver)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Cloud Life Sciences Viewer (roles/lifesciences.viewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
			"Google Cloud Managed Identities Peering Viewer (roles/managedidentities.peeringViewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Cloud Memorystore Memcached Viewer (roles/memcache.viewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Metrics Scopes Admin (roles/monitoring.metricsScopesAdmin)",
			"Monitoring Metrics Scopes Viewer (roles/monitoring.metricsScopesViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Hub & Spoke Viewer (roles/networkconnectivity.hubViewer)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
			"Network Management Admin (roles/networkmanagement.admin)",
			"Network Management Viewer (roles/networkmanagement.viewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"GuestPolicy Admin (roles/osconfig.guestPolicyAdmin)",
			"GuestPolicy Editor (roles/osconfig.guestPolicyEditor)",
			"GuestPolicy Viewer (roles/osconfig.guestPolicyViewer)",
			"InstanceOSPoliciesCompliance Viewer (roles/osconfig.instanceOSPoliciesComplianceViewer)",
			"OS Inventory Viewer (roles/osconfig.inventoryViewer)",
			"OSPolicyAssignment Admin (roles/osconfig.osPolicyAssignmentAdmin)",
			"OSPolicyAssignment Editor (roles/osconfig.osPolicyAssignmentEditor)",
			"OSPolicyAssignmentReport Viewer (roles/osconfig.osPolicyAssignmentReportViewer)",
			"OSPolicyAssignment Viewer (roles/osconfig.osPolicyAssignmentViewer)",
			"PatchDeployment Admin (roles/osconfig.patchDeploymentAdmin)",
			"PatchDeployment Viewer (roles/osconfig.patchDeploymentViewer)",
			"Patch Job Executor (roles/osconfig.patchJobExecutor)",
			"Patch Job Viewer (roles/osconfig.patchJobViewer)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
			"OS VulnerabilityReport Viewer (roles/osconfig.vulnerabilityReportViewer)",
			"Payments Reseller Admin (roles/paymentsresellersubscription.partnerAdmin)",
			"Payments Reseller Viewer (roles/paymentsresellersubscription.partnerViewer)",
			"Payments Reseller Products Viewer (roles/paymentsresellersubscription.productViewer)",
			"Payments Reseller Promotions Viewer (roles/paymentsresellersubscription.promotionViewer)",
			"Payments Reseller Subscriptions Editor (roles/paymentsresellersubscription.subscriptionEditor)",
			"Payments Reseller Subscriptions Viewer (roles/paymentsresellersubscription.subscriptionViewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
			"Beacon Attachment Editor (roles/proximitybeacon.attachmentEditor)",
			"Beacon Attachment Publisher (roles/proximitybeacon.attachmentPublisher)",
			"Beacon Attachment Viewer (roles/proximitybeacon.attachmentViewer)",
			"Beacon Editor (roles/proximitybeacon.beaconEditor)",
			"Cloud Pub/Sub Service Agent (roles/pubsub.serviceAgent)",
			"reCAPTCHA Enterprise Admin (roles/recaptchaenterprise.admin)",
			"reCAPTCHA Enterprise Agent (roles/recaptchaenterprise.agent)",
			"reCAPTCHA Enterprise Viewer (roles/recaptchaenterprise.viewer)",
			"BigQuery Slot Recommender Admin (roles/recommender.bigQueryCapacityCommitmentsAdmin)",
			"BigQuery Recommender Project Admin (roles/recommender.bigQueryCapacityCommitmentsProjectAdmin)",
			"BigQuery Recommender Project Viewer (roles/recommender.bigQueryCapacityCommitmentsProjectViewer)",
			"BigQuery Slot Recommender Viewer (roles/recommender.bigQueryCapacityCommitmentsViewer)",
			"Cloud Asset Insights Admin (roles/recommender.cloudAssetInsightsAdmin)",
			"Cloud Asset Insights Viewer (roles/recommender.cloudAssetInsightsViewer)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
			"Firewall Recommender Admin (roles/recommender.firewallAdmin)",
			"Firewall Recommender Viewer (roles/recommender.firewallViewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
			"Project Usage Commitment Recommender Admin (roles/recommender.projectCudAdmin)",
			"Project Usage Commitment Recommender Viewer (roles/recommender.projectCudViewer)",
			"Project Utilization Recommender Admin (roles/recommender.projectUtilAdmin)",
			"Project Utilization Recommender Viewer (roles/recommender.projectUtilViewer)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Cloud Memorystore Redis Viewer (roles/redis.viewer)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
			"Redis Enterprise Cloud Viewer (roles/redisenterprisecloud.viewer)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Creator (roles/resourcemanager.folderCreator)",
			"Folder Editor (roles/resourcemanager.folderEditor)",
			"Folder Viewer (roles/resourcemanager.folderViewer)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
			"Risk Manager Report Reviewer (roles/riskmanager.reviewer)",
			"Risk Manager Viewer (roles/riskmanager.viewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Viewer (roles/run.viewer)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Secret Accessor (roles/secretmanager.secretAccessor)",
			"Secret Manager Secret Version Adder (roles/secretmanager.secretVersionAdder)",
			"Secret Manager Secret Version Manager (roles/secretmanager.secretVersionManager)",
			"Secret Manager Viewer (roles/secretmanager.viewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Network Attacher (roles/servicedirectory.networkAttacher)",
			"Private Service Connect Authorized Service (roles/servicedirectory.pscAuthorizedService)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Quota Administrator (roles/servicemanagement.quotaAdmin)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
			"Cloud Spanner Viewer (roles/spanner.viewer)",
			"Stackdriver Accounts Editor (roles/stackdriver.accounts.editor)",
			"Stackdriver Accounts Viewer (roles/stackdriver.accounts.viewer)",
			"Storage Admin (roles/storage.admin)",
			"Storage HMAC Key Admin (roles/storage.hmacKeyAdmin)",
			"Storage Object Admin (roles/storage.objectAdmin)",
			"Storage Object Creator (roles/storage.objectCreator)",
			"Storage Object Viewer (roles/storage.objectViewer)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
			"Storage Transfer Viewer (roles/storagetransfer.viewer)",
			"Subscribe with Google Developer (roles/subscribewithgoogledeveloper.developer)",
			"TPU Admin (roles/tpu.admin)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
			"TPU Viewer (roles/tpu.viewer)",
			"Transcoder Admin (roles/transcoder.admin)",
			"Transcoder Viewer (roles/transcoder.viewer)",
			"Translation Hub Admin (roles/translationhub.admin)",
			"Translation Hub Portal User (roles/translationhub.portalUser)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher User (roles/videostitcher.user)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
			"VMware Engine Service Admin (roles/vmwareengine.vmwareengineAdmin)",
			"VMware Engine Service Viewer (roles/vmwareengine.vmwareengineViewer)",
			"Serverless VPC Access Admin (roles/vpcaccess.admin)",
			"Serverless VPC Access User (roles/vpcaccess.user)",
			"Serverless VPC Access Viewer (roles/vpcaccess.viewer)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Invoker (roles/workflows.invoker)",
			"Workflows Viewer (roles/workflows.viewer)",
		},
		"container.statefulSets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"gkehub.gateway.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connect Gateway Admin (roles/gkehub.gatewayAdmin)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"accesscontextmanager.accessPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"apigee.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"resourcemanager.projects.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Approval Approver (roles/accessapproval.approver)",
			"Access Approval Config Editor (roles/accessapproval.configEditor)",
			"Access Approval Viewer (roles/accessapproval.viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Actions Admin (roles/actions.Admin)",
			"Actions Viewer (roles/actions.Viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Data Viewer (roles/aiplatform.featurestoreDataViewer)",
			"Vertex AI Feature Store Data Writer (roles/aiplatform.featurestoreDataWriter)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store Resource Viewer (roles/aiplatform.featurestoreResourceViewer)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Portal Admin (roles/apigee.portalAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Creator (roles/appengine.appCreator)",
			"App Engine Viewer (roles/appengine.appViewer)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Assured Workloads Reader (roles/assuredworkloads.reader)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Predictor (roles/automl.predictor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Autoscaling Site Admin (roles/autoscaling.sitesAdmin)",
			"Access Transparency Admin (roles/axt.admin)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Instances Admin (roles/baremetalsolution.instancesadmin)",
			"Bare Metal Solution Instances Viewer (roles/baremetalsolution.instancesviewer)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"BigQuery Job User (roles/bigquery.jobUser)",
			"BigQuery Metadata Viewer (roles/bigquery.metadataViewer)",
			"BigQuery Read Session User (roles/bigquery.readSessionUser)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"BigQuery User (roles/bigquery.user)",
			"BigQuery Data Transfer Service Agent (roles/bigquerydatatransfer.serviceAgent)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Binary Authorization Attestor Admin (roles/binaryauthorization.attestorsAdmin)",
			"Binary Authorization Attestor Editor (roles/binaryauthorization.attestorsEditor)",
			"Binary Authorization Attestor Image Verifier (roles/binaryauthorization.attestorsVerifier)",
			"Binary Authorization Attestor Viewer (roles/binaryauthorization.attestorsViewer)",
			"Binary Authorization Policy Administrator (roles/binaryauthorization.policyAdmin)",
			"Binary Authorization Policy Editor (roles/binaryauthorization.policyEditor)",
			"Binary Authorization Policy Viewer (roles/binaryauthorization.policyViewer)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Browser (roles/browser)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Cloud Build Approver (roles/cloudbuild.builds.approver)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Editor (roles/cloudbuild.builds.editor)",
			"Cloud Build Viewer (roles/cloudbuild.builds.viewer)",
			"Cloud Build Integrations Editor (roles/cloudbuild.integrationsEditor)",
			"Cloud Build Integrations Owner (roles/cloudbuild.integrationsOwner)",
			"Cloud Build Integrations Viewer (roles/cloudbuild.integrationsViewer)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Build WorkerPool Editor (roles/cloudbuild.workerPoolEditor)",
			"Cloud Build WorkerPool Owner (roles/cloudbuild.workerPoolOwner)",
			"Cloud Build WorkerPool Viewer (roles/cloudbuild.workerPoolViewer)",
			"Firebase Remote Config Admin (roles/cloudconfig.admin)",
			"Firebase Remote Config Viewer (roles/cloudconfig.viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Approver (roles/clouddeploy.approver)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Admin (roles/cloudjobdiscovery.admin)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
			"Job Viewer (roles/cloudjobdiscovery.jobsViewer)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
			"Profile Viewer (roles/cloudjobdiscovery.profilesViewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS CryptoKey Decrypter (roles/cloudkms.cryptoKeyDecrypter)",
			"Cloud KMS CryptoKey Decrypter Via Delegation (roles/cloudkms.cryptoKeyDecrypterViaDelegation)",
			"Cloud KMS CryptoKey Encrypter (roles/cloudkms.cryptoKeyEncrypter)",
			"Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)",
			"Cloud KMS CryptoKey Encrypter/Decrypter Via Delegation (roles/cloudkms.cryptoKeyEncrypterDecrypterViaDelegation)",
			"Cloud KMS CryptoKey Encrypter Via Delegation (roles/cloudkms.cryptoKeyEncrypterViaDelegation)",
			"Cloud KMS Crypto Operator (roles/cloudkms.cryptoOperator)",
			"Cloud KMS Expert Raw PKCS#1 Key Manager (roles/cloudkms.expertRawPKCS1)",
			"Cloud KMS Importer (roles/cloudkms.importer)",
			"Cloud KMS CryptoKey Public Key Viewer (roles/cloudkms.publicKeyViewer)",
			"Cloud KMS CryptoKey Signer (roles/cloudkms.signer)",
			"Cloud KMS CryptoKey Signer/Verifier (roles/cloudkms.signerVerifier)",
			"Cloud KMS CryptoKey Verifier (roles/cloudkms.verifier)",
			"Cloud KMS Viewer (roles/cloudkms.viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Catalog Consumer (roles/cloudprivatecatalog.consumer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Cloud Profiler User (roles/cloudprofiler.user)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Cloud Scheduler Job Runner (roles/cloudscheduler.jobRunner)",
			"Cloud Scheduler Viewer (roles/cloudscheduler.viewer)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Tech Support Editor (roles/cloudsupport.techSupportEditor)",
			"Tech Support Viewer (roles/cloudsupport.techSupportViewer)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Enqueuer (roles/cloudtasks.enqueuer)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
			"Cloud Tasks Task Deleter (roles/cloudtasks.taskDeleter)",
			"Cloud Tasks Task Runner (roles/cloudtasks.taskRunner)",
			"Cloud Tasks Viewer (roles/cloudtasks.viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace User (roles/cloudtrace.user)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Cloud Translation API Viewer (roles/cloudtranslate.viewer)",
			"Commerce Price Management Private Offers Admin (roles/commercepricemanagement.privateOffersAdmin)",
			"Commerce Price Management Viewer (roles/commercepricemanagement.viewer)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Compute Admin (roles/compute.admin)",
			"Compute Image User (roles/compute.imageUser)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Compute packet mirroring admin (roles/compute.packetMirroringAdmin)",
			"Compute packet mirroring user (roles/compute.packetMirroringUser)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
			"Consumer Procurement Entitlement Viewer (roles/consumerprocurement.entitlementViewer)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Cluster Admin (roles/container.clusterAdmin)",
			"Kubernetes Engine Cluster Viewer (roles/container.clusterViewer)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Notes Editor (roles/containeranalysis.notes.editor)",
			"Container Analysis Notes Viewer (roles/containeranalysis.notes.viewer)",
			"Container Analysis Occurrences Editor (roles/containeranalysis.occurrences.editor)",
			"Container Analysis Occurrences Viewer (roles/containeranalysis.occurrences.viewer)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Policy Tag Admin (roles/datacatalog.categoryAdmin)",
			"DataCatalog EntryGroup Creator (roles/datacatalog.entryGroupCreator)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"DataCatalog entry Owner (roles/datacatalog.entryOwner)",
			"DataCatalog Entry Viewer (roles/datacatalog.entryViewer)",
			"Data Catalog TagTemplate Owner (roles/datacatalog.tagTemplateOwner)",
			"Data Catalog TagTemplate User (roles/datacatalog.tagTemplateUser)",
			"Data Catalog TagTemplate Viewer (roles/datacatalog.tagTemplateViewer)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataflow Viewer (roles/dataflow.viewer)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Data Fusion Viewer (roles/datafusion.viewer)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
			"Data pipelines Admin (roles/datapipelines.admin)",
			"Data pipelines Invoker (roles/datapipelines.invoker)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Data pipelines Viewer (roles/datapipelines.viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataprep User (roles/dataprep.projects.user)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Cloud Datastore Import Export Admin (roles/datastore.importExportAdmin)",
			"Cloud Datastore Index Admin (roles/datastore.indexAdmin)",
			"Cloud Datastore Key Visualizer Viewer (roles/datastore.keyVisualizerViewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
			"Dell EMC Cloud OneFS Viewer (roles/dellemccloudonefs.viewer)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
			"Cloud Domains Admin (roles/domains.admin)",
			"Cloud Domains Viewer (roles/domains.viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Apps Publisher (roles/earthengine.appsPublisher)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
			"Endpoints Portal Admin (roles/endpoints.portalAdmin)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Error Reporting Viewer (roles/errorreporting.viewer)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Eventarc Viewer (roles/eventarc.viewer)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
			"Firebase A/B Testing Viewer (roles/firebaseabt.viewer)",
			"Firebase App Distribution Admin (roles/firebaseappdistro.admin)",
			"Firebase App Distribution Viewer (roles/firebaseappdistro.viewer)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Firebase Authentication Viewer (roles/firebaseauth.viewer)",
			"Firebase Cloud Messaging API Admin (roles/firebasecloudmessaging.admin)",
			"Firebase Crash Symbol Uploader (roles/firebasecrash.symbolMappingsAdmin)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
			"Firebase Crashlytics Viewer (roles/firebasecrashlytics.viewer)",
			"Firebase Realtime Database Admin (roles/firebasedatabase.admin)",
			"Firebase Realtime Database Viewer (roles/firebasedatabase.viewer)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
			"Firebase Dynamic Links Viewer (roles/firebasedynamiclinks.viewer)",
			"Firebase Hosting Admin (roles/firebasehosting.admin)",
			"Firebase Hosting Viewer (roles/firebasehosting.viewer)",
			"Firebase In-App Messaging Admin (roles/firebaseinappmessaging.admin)",
			"Firebase In-App Messaging Viewer (roles/firebaseinappmessaging.viewer)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
			"Firebase ML Kit Viewer (roles/firebaseml.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Firebase Cloud Messaging Admin (roles/firebasenotifications.admin)",
			"Firebase Cloud Messaging Viewer (roles/firebasenotifications.viewer)",
			"Firebase Performance Reporting Admin (roles/firebaseperformance.admin)",
			"Firebase Performance Reporting Viewer (roles/firebaseperformance.viewer)",
			"Firebase Predictions Admin (roles/firebasepredictions.admin)",
			"Firebase Predictions Viewer (roles/firebasepredictions.viewer)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
			"Firebase Rules Viewer (roles/firebaserules.viewer)",
			"Cloud Storage for Firebase Admin (roles/firebasestorage.admin)",
			"Cloud Storage for Firebase Viewer (roles/firebasestorage.viewer)",
			"FleetEngine Service Agent (roles/fleetengine.serviceAgent)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Game Services API Viewer (roles/gameservices.viewer)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
			"Google Workspace Add-ons Reader (roles/gsuiteaddons.reader)",
			"Google Workspace Add-ons Tester (roles/gsuiteaddons.tester)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
			"Healthcare Annotation Reader (roles/healthcare.annotationReader)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
			"Healthcare Annotation Store Viewer (roles/healthcare.annotationStoreViewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
			"Healthcare Dataset Viewer (roles/healthcare.datasetViewer)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Healthcare DICOM Store Viewer (roles/healthcare.dicomStoreViewer)",
			"Healthcare DICOM Viewer (roles/healthcare.dicomViewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Healthcare FHIR Store Viewer (roles/healthcare.fhirStoreViewer)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Healthcare HL7v2 Message Ingest (roles/healthcare.hl7V2Ingest)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
			"Healthcare HL7v2 Store Viewer (roles/healthcare.hl7V2StoreViewer)",
			"Healthcare NLP Service Viewer (roles/healthcare.nlpServiceViewer)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
			"Organization Role Administrator (roles/iam.organizationRoleAdmin)",
			"Organization Role Viewer (roles/iam.organizationRoleViewer)",
			"Role Administrator (roles/iam.roleAdmin)",
			"Role Viewer (roles/iam.roleViewer)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
			"Create Service Accounts (roles/iam.serviceAccountCreator)",
			"Delete Service Accounts (roles/iam.serviceAccountDeleter)",
			"Service Account Key Admin (roles/iam.serviceAccountKeyAdmin)",
			"Service Account Token Creator (roles/iam.serviceAccountTokenCreator)",
			"Service Account User (roles/iam.serviceAccountUser)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
			"IAM Workload Identity Pool Viewer (roles/iam.workloadIdentityPoolViewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Deployer (roles/integrations.apigeeIntegrationDeployerRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
			"Apigee Integration Invoker (roles/integrations.apigeeIntegrationInvokerRole)",
			"Apigee Integration Viewer (roles/integrations.apigeeIntegrationsViewer)",
			"Apigee Integration Approver (roles/integrations.apigeeSuspensionResolver)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"KubeRun Events Data Plane Service Agent (roles/kuberun.eventsDataPlaneServiceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Cloud Life Sciences Viewer (roles/lifesciences.viewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
			"Google Cloud Managed Identities Peering Viewer (roles/managedidentities.peeringViewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Cloud Memorystore Memcached Viewer (roles/memcache.viewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"AI Platform Viewer (roles/ml.viewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Metrics Scopes Admin (roles/monitoring.metricsScopesAdmin)",
			"Monitoring Metrics Scopes Viewer (roles/monitoring.metricsScopesViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Hub & Spoke Viewer (roles/networkconnectivity.hubViewer)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
			"Network Management Admin (roles/networkmanagement.admin)",
			"Network Management Viewer (roles/networkmanagement.viewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"GuestPolicy Admin (roles/osconfig.guestPolicyAdmin)",
			"GuestPolicy Editor (roles/osconfig.guestPolicyEditor)",
			"GuestPolicy Viewer (roles/osconfig.guestPolicyViewer)",
			"InstanceOSPoliciesCompliance Viewer (roles/osconfig.instanceOSPoliciesComplianceViewer)",
			"OS Inventory Viewer (roles/osconfig.inventoryViewer)",
			"OSPolicyAssignment Admin (roles/osconfig.osPolicyAssignmentAdmin)",
			"OSPolicyAssignment Editor (roles/osconfig.osPolicyAssignmentEditor)",
			"OSPolicyAssignmentReport Viewer (roles/osconfig.osPolicyAssignmentReportViewer)",
			"OSPolicyAssignment Viewer (roles/osconfig.osPolicyAssignmentViewer)",
			"PatchDeployment Admin (roles/osconfig.patchDeploymentAdmin)",
			"PatchDeployment Viewer (roles/osconfig.patchDeploymentViewer)",
			"Patch Job Executor (roles/osconfig.patchJobExecutor)",
			"Patch Job Viewer (roles/osconfig.patchJobViewer)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
			"OS VulnerabilityReport Viewer (roles/osconfig.vulnerabilityReportViewer)",
			"Payments Reseller Admin (roles/paymentsresellersubscription.partnerAdmin)",
			"Payments Reseller Viewer (roles/paymentsresellersubscription.partnerViewer)",
			"Payments Reseller Products Viewer (roles/paymentsresellersubscription.productViewer)",
			"Payments Reseller Promotions Viewer (roles/paymentsresellersubscription.promotionViewer)",
			"Payments Reseller Subscriptions Editor (roles/paymentsresellersubscription.subscriptionEditor)",
			"Payments Reseller Subscriptions Viewer (roles/paymentsresellersubscription.subscriptionViewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
			"Beacon Attachment Editor (roles/proximitybeacon.attachmentEditor)",
			"Beacon Attachment Publisher (roles/proximitybeacon.attachmentPublisher)",
			"Beacon Attachment Viewer (roles/proximitybeacon.attachmentViewer)",
			"Beacon Editor (roles/proximitybeacon.beaconEditor)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Cloud Pub/Sub Service Agent (roles/pubsub.serviceAgent)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
			"reCAPTCHA Enterprise Admin (roles/recaptchaenterprise.admin)",
			"reCAPTCHA Enterprise Agent (roles/recaptchaenterprise.agent)",
			"reCAPTCHA Enterprise Viewer (roles/recaptchaenterprise.viewer)",
			"BigQuery Slot Recommender Admin (roles/recommender.bigQueryCapacityCommitmentsAdmin)",
			"BigQuery Recommender Project Admin (roles/recommender.bigQueryCapacityCommitmentsProjectAdmin)",
			"BigQuery Recommender Project Viewer (roles/recommender.bigQueryCapacityCommitmentsProjectViewer)",
			"BigQuery Slot Recommender Viewer (roles/recommender.bigQueryCapacityCommitmentsViewer)",
			"Cloud Asset Insights Admin (roles/recommender.cloudAssetInsightsAdmin)",
			"Cloud Asset Insights Viewer (roles/recommender.cloudAssetInsightsViewer)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
			"Firewall Recommender Admin (roles/recommender.firewallAdmin)",
			"Firewall Recommender Viewer (roles/recommender.firewallViewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
			"Project Usage Commitment Recommender Admin (roles/recommender.projectCudAdmin)",
			"Project Usage Commitment Recommender Viewer (roles/recommender.projectCudViewer)",
			"Project Utilization Recommender Admin (roles/recommender.projectUtilAdmin)",
			"Project Utilization Recommender Viewer (roles/recommender.projectUtilViewer)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Cloud Memorystore Redis Viewer (roles/redis.viewer)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
			"Redis Enterprise Cloud Viewer (roles/redisenterprisecloud.viewer)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Creator (roles/resourcemanager.folderCreator)",
			"Folder Editor (roles/resourcemanager.folderEditor)",
			"Folder Viewer (roles/resourcemanager.folderViewer)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
			"Project IAM Admin (roles/resourcemanager.projectIamAdmin)",
			"Project Mover (roles/resourcemanager.projectMover)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
			"Risk Manager Report Reviewer (roles/riskmanager.reviewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Risk Manager Viewer (roles/riskmanager.viewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Viewer (roles/run.viewer)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Secret Accessor (roles/secretmanager.secretAccessor)",
			"Secret Manager Secret Version Adder (roles/secretmanager.secretVersionAdder)",
			"Secret Manager Secret Version Manager (roles/secretmanager.secretVersionManager)",
			"Secret Manager Viewer (roles/secretmanager.viewer)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Assets Viewer (roles/securitycenter.assetsViewer)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Center Findings Viewer (roles/securitycenter.findingsViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Network Attacher (roles/servicedirectory.networkAttacher)",
			"Private Service Connect Authorized Service (roles/servicedirectory.pscAuthorizedService)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Quota Administrator (roles/servicemanagement.quotaAdmin)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
			"Cloud Spanner Viewer (roles/spanner.viewer)",
			"Stackdriver Accounts Editor (roles/stackdriver.accounts.editor)",
			"Stackdriver Accounts Viewer (roles/stackdriver.accounts.viewer)",
			"Storage Admin (roles/storage.admin)",
			"Storage HMAC Key Admin (roles/storage.hmacKeyAdmin)",
			"Storage Object Admin (roles/storage.objectAdmin)",
			"Storage Object Creator (roles/storage.objectCreator)",
			"Storage Object Viewer (roles/storage.objectViewer)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
			"Storage Transfer Viewer (roles/storagetransfer.viewer)",
			"Subscribe with Google Developer (roles/subscribewithgoogledeveloper.developer)",
			"TPU Admin (roles/tpu.admin)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
			"TPU Viewer (roles/tpu.viewer)",
			"Transcoder Admin (roles/transcoder.admin)",
			"Transcoder Viewer (roles/transcoder.viewer)",
			"Translation Hub Admin (roles/translationhub.admin)",
			"Translation Hub Portal User (roles/translationhub.portalUser)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher User (roles/videostitcher.user)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
			"VMware Engine Service Admin (roles/vmwareengine.vmwareengineAdmin)",
			"VMware Engine Service Viewer (roles/vmwareengine.vmwareengineViewer)",
			"Serverless VPC Access Admin (roles/vpcaccess.admin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
			"Serverless VPC Access User (roles/vpcaccess.user)",
			"Serverless VPC Access Viewer (roles/vpcaccess.viewer)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Invoker (roles/workflows.invoker)",
			"Workflows Viewer (roles/workflows.viewer)",
		},
		"riskmanager.settings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
			"Risk Manager Viewer (roles/riskmanager.viewer)",
		},
		"runtimeconfig.configs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"integrations.apigeeAuthConfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"securitycenter.findingsecuritymarks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Finding Security Marks Writer (roles/securitycenter.findingSecurityMarksWriter)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"accessapproval.requests.dismiss": {
			"Owner (roles/owner)",
			"Access Approval Approver (roles/accessapproval.approver)",
		},
		"aiplatform.annotations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.routines.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"dialogflow.sessions.streamingDetectIntent": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"firebaseappdistro.groups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase App Distribution Admin SDK Service Agent (roles/firebase.appDistributionSdkServiceAgent)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase App Distribution Admin (roles/firebaseappdistro.admin)",
			"Firebase App Distribution Viewer (roles/firebaseappdistro.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.volumeAttachments.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"earthengine.tables.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"integrations.apigeeCertificates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"securitycenter.assets.listAssetPropertyNames": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Assets Viewer (roles/securitycenter.assetsViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.humanInTheLoops.send": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.podSecurityPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.scheduledJobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"aiplatform.tensorboardRuns.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudvolumesgcp-api.netapp.com/jobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
		},
		"cloudvolumesgcp-api.netapp.com/regions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
		},
		"resourcemanager.tagKeys.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
		},
		"monitoring.dashboards.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Dashboard Configuration Editor (roles/monitoring.dashboardEditor)",
			"Monitoring Dashboard Configuration Viewer (roles/monitoring.dashboardViewer)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"spanner.backups.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
		},
		"storage.objects.get": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Deploy Runner (roles/clouddeploy.jobRunner)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Velostrata Storage Access (roles/cloudmigration.storageaccess)",
			"Cloud Optimization Service Agent (roles/cloudoptimization.serviceAgent)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Cloud Translation API Service Agent (roles/cloudtranslate.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Registry Service Agent (roles/containerregistry.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Content Warehouse Service Agent (roles/contentwarehouse.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataflow Worker (roles/dataflow.worker)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"DocumentAI Core Service Agent (roles/documentaicore.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Storage for Firebase Service Agent (roles/firebasestorage.serviceAgent)",
			"Firestore Service Agent (roles/firestore.serviceAgent)",
			"Media Asset Service Agent (roles/mediaasset.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Object Owner (roles/storage.legacyObjectOwner)",
			"Storage Legacy Object Reader (roles/storage.legacyObjectReader)",
			"Storage Object Admin (roles/storage.objectAdmin)",
			"Storage Object Viewer (roles/storage.objectViewer)",
			"Transcoder Service Agent (roles/transcoder.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.apiproductattributes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudiot.devices.bindGateway": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
		},
		"container.persistentVolumes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataplex.environments.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.pages.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"cloudtoolresults.steps.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"redis.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
		},
		"securitycenter.securityhealthanalyticssettings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"tpu.nodes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"TPU Admin (roles/tpu.admin)",
			"TPU Viewer (roles/tpu.viewer)",
		},
		"videostitcher.cdnKeys.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"resourcemanager.tagValueBindings.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"secretmanager.versions.enable": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Secret Version Manager (roles/secretmanager.secretVersionManager)",
		},
		"storage.buckets.setIamPolicy": {
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"accesscontextmanager.accessZones.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"automl.examples.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"certificatemanager.dnsauthorizations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"compute.targetVpnGateways.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datacatalog.entryGroups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog EntryGroup Creator (roles/datacatalog.entryGroupCreator)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
		},
		"notebooks.runtimes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"recaptchaenterprise.keys.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"reCAPTCHA Enterprise Admin (roles/recaptchaenterprise.admin)",
		},
		"aiplatform.artifacts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.environments.manageRuntime": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Apigee Synchronizer Manager (roles/apigee.synchronizerManager)",
		},
		"automlrecommendations.recommendations.resume": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"cloudtasks.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
			"Cloud Tasks Viewer (roles/cloudtasks.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkmanagement.connectivitytests.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Network Management Admin (roles/networkmanagement.admin)",
			"Network Management Viewer (roles/networkmanagement.viewer)",
		},
		"recommender.usageCommitmentRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Usage Commitment Recommender Admin (roles/recommender.billingAccountCudAdmin)",
			"Project Usage Commitment Recommender Admin (roles/recommender.projectCudAdmin)",
		},
		"securitycenter.sources.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Sources Admin (roles/securitycenter.sourcesAdmin)",
		},
		"apigee.keystorealiases.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"appengine.versions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Viewer (roles/appengine.appViewer)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"artifactregistry.repositories.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.pods.portForward": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.statefulSets.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"run.revisions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"source.repos.delete": {
			"Owner (roles/owner)",
			"Source Repository Administrator (roles/source.admin)",
		},
		"artifactregistry.versions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigtable.tables.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"compute.globalForwardingRules.pscCreate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastore.databases.getMetadata": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
		},
		"dns.responsePolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"networkservices.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"composer.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
		},
		"earthengine.assets.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebaseauth.users.createSession": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Identity Platform Admin (roles/identityplatform.admin)",
			"Identity Toolkit Admin (roles/identitytoolkit.admin)",
		},
		"firebaseml.models.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
			"Firebase ML Kit Viewer (roles/firebaseml.viewer)",
		},
		"healthcare.annotationStores.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
		},
		"healthcare.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
		},
		"container.clusterRoleBindings.update": {
			"Owner (roles/owner)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.podPresets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datamigration.migrationjobs.restart": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"iap.tunnelInstances.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"aiplatform.trainingPipelines.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"billing.accounts.getPaymentInfo": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
		},
		"compute.forwardingRules.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Web Security Scanner Service Agent (roles/websecurityscanner.serviceAgent)",
		},
		"deploymentmanager.types.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"notebooks.environments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"notebooks.instances.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"compute.sslPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.persistentVolumeClaims.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataprocessing.featurecontrols.update": {
			"Owner (roles/owner)",
			"Data Processing Controls Resource Admin (roles/dataprocessing.admin)",
		},
		"integrations.apigeeIntegrationVers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Deployer (roles/integrations.apigeeIntegrationDeployerRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
			"Apigee Integration Invoker (roles/integrations.apigeeIntegrationInvokerRole)",
			"Apigee Integration Viewer (roles/integrations.apigeeIntegrationsViewer)",
		},
		"managedidentities.sqlintegrations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"cloudasset.assets.searchAllResources": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Security Admin (roles/iam.securityAdmin)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"genomics.datasets.getIamPolicy": {
			"Owner (roles/owner)",
			"Genomics Admin (roles/genomics.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"paymentsresellersubscription.products.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Payments Reseller Admin (roles/paymentsresellersubscription.partnerAdmin)",
			"Payments Reseller Viewer (roles/paymentsresellersubscription.partnerViewer)",
			"Payments Reseller Products Viewer (roles/paymentsresellersubscription.productViewer)",
		},
		"vmmigration.deployments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"automl.tableSpecs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"connectors.connections.getRuntimeActionSchema": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
		},
		"container.frontendConfigs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"accesscontextmanager.accessZones.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"cloudasset.assets.exportComputeHealthChecks": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.clusters.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"App Development Experience Service Agent (roles/appdevelopmentexperience.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Cluster Admin (roles/container.clusterAdmin)",
			"Kubernetes Engine Cluster Viewer (roles/container.clusterViewer)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Workload Certificate Service Agent (roles/workloadcertificate.serviceAgent)",
		},
		"dialogflow.versions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"apigateway.apiconfigs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"ApiGateway Admin (roles/apigateway.admin)",
		},
		"apigee.flowhooks.attachSharedFlow": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"container.persistentVolumes.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.roles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"iam.serviceAccounts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Admin (roles/cloudjobdiscovery.admin)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
			"Create Service Accounts (roles/iam.serviceAccountCreator)",
			"Delete Service Accounts (roles/iam.serviceAccountDeleter)",
			"Service Account Key Admin (roles/iam.serviceAccountKeyAdmin)",
			"Service Account Token Creator (roles/iam.serviceAccountTokenCreator)",
			"Service Account User (roles/iam.serviceAccountUser)",
			"Workload Identity User (roles/iam.workloadIdentityUser)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Cloud Pub/Sub Service Agent (roles/pubsub.serviceAgent)",
		},
		"gameservices.gameServerClusters.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"ml.models.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
		},
		"compute.instances.osLogin": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.apiServices.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.updateInfos.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"containeranalysis.notes.attachOccurrence": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Notes Attacher (roles/containeranalysis.notes.attacher)",
			"Container Analysis Notes Editor (roles/containeranalysis.notes.editor)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
		},
		"notebooks.runtimes.start": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"clientauthconfig.clients.createSecret": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"cloudtasks.tasks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Task Deleter (roles/cloudtasks.taskDeleter)",
		},
		"container.endpointSlices.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"containeranalysis.notes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Notes Editor (roles/containeranalysis.notes.editor)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
		},
		"policysimulator.replays.run": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Simulator Admin (roles/policysimulator.admin)",
		},
		"dns.projects.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"earthengine.assets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"logging.views.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"apikeys.keys.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase SDK Provisioning Service Agent (roles/firebase.sdkProvisioningServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"API Keys Admin (roles/serviceusage.apiKeysAdmin)",
			"API Keys Viewer (roles/serviceusage.apiKeysViewer)",
		},
		"compute.externalVpnGateways.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.httpHealthChecks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.nodeTemplates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Cluster Admin (roles/container.clusterAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"baremetalsolution.snapshotschedulepolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
		},
		"container.podTemplates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"recommender.computeFirewallInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firewall Recommender Admin (roles/recommender.firewallAdmin)",
			"Firewall Recommender Viewer (roles/recommender.firewallViewer)",
		},
		"aiplatform.trainingPipelines.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.initializerConfigurations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datastream.connectionProfiles.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"integrations.apigeeCertificates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
			"Apigee Integration Viewer (roles/integrations.apigeeIntegrationsViewer)",
		},
		"cloudbuild.builds.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Editor (roles/cloudbuild.builds.editor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
		},
		"managedidentities.peerings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
			"Google Cloud Managed Identities Peering Viewer (roles/managedidentities.peeringViewer)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"ml.versions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
		},
		"dataproc.clusters.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"managedidentities.domains.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
		},
		"servicebroker.catalogs.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Service Broker Admin (roles/servicebroker.admin)",
		},
		"cloudprivatecatalogproducer.products.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"firebase.links.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"servicebroker.catalogs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"servicenetworking.services.addSubnetwork": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Networking Admin (roles/servicenetworking.networksAdmin)",
		},
		"tpu.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"TPU Admin (roles/tpu.admin)",
			"TPU Viewer (roles/tpu.viewer)",
		},
		"artifactregistry.tags.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"datastream.connectionProfiles.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"fleetengine.vehicles.search": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Fleet Engine Consumer SDK User (roles/fleetengine.consumerSdkUser)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
		},
		"gameservices.gameServerConfigs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"pubsublite.subscriptions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"container.storageVersionMigrations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.conversationDatasets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"earthengine.assets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigee.developersubscriptions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"apigee.keystorealiases.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"certificatemanager.certs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"cloudsecurityscanner.scans.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.globalForwardingRules.pscGet": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebaseml.modelversions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
			"Firebase ML Kit Viewer (roles/firebaseml.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networksecurity.clientTlsPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"gkehub.features.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Agent (roles/anthos.serviceAgent)",
			"Anthos Audit Service Agent (roles/anthosaudit.serviceAgent)",
			"Anthos Config Management Service Agent (roles/anthosconfigmanagement.serviceAgent)",
			"Anthos Identity Service Agent (roles/anthosidentityservice.serviceAgent)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"App Development Experience Service Agent (roles/appdevelopmentexperience.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Multi-cluster metering Service Agent (roles/multiclustermetering.serviceAgent)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Workload Certificate Service Agent (roles/workloadcertificate.serviceAgent)",
		},
		"privateca.certificateRevocationLists.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"CA Service Admin (roles/privateca.admin)",
		},
		"pubsub.topics.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
		},
		"aiplatform.pipelineJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.envgroups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"cloudasset.assets.exportSpannerDatabases": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.serviceAccounts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.agents.train": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"networkservices.endpointConfigSelectors.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"videostitcher.liveAdTagDetails.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"aiplatform.metadataSchemas.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.machineImages.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.customResourceDefinitions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"dialogflow.contexts.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"logging.logEntries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Connection Service Agent (roles/bigqueryconnection.serviceAgent)",
			"BigQuery Data Transfer Service Agent (roles/bigquerydatatransfer.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Deploy Runner (roles/clouddeploy.jobRunner)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud IoT Core Service Agent (roles/cloudiot.serviceAgent)",
			"Cloud Scheduler Service Agent (roles/cloudscheduler.serviceAgent)",
			"Cloud Tasks Service Agent (roles/cloudtasks.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataflow Worker (roles/dataflow.worker)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Anthos Multi-cloud Telemetry Writer (roles/gkemulticloud.telemetryWriter)",
			"Logging Admin (roles/logging.admin)",
			"Logs Writer (roles/logging.logWriter)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"essentialcontacts.contacts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Essential Contacts Admin (roles/essentialcontacts.admin)",
		},
		"logging.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"redis.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
			"Cloud Memorystore Redis Viewer (roles/redis.viewer)",
		},
		"aiplatform.endpoints.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.targetservers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"compute.backendBuckets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.globalAddresses.deleteInternal": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datafusion.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
		},
		"storage.hmacKeys.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage HMAC Key Admin (roles/storage.hmacKeyAdmin)",
		},
		"compute.vpnGateways.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.agents.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"dialogflow.webhooks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Webhook Admin (roles/dialogflow.webhookAdmin)",
		},
		"notebooks.schedules.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"riskmanager.reports.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
		},
		"cloudasset.assets.listResource": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Web Security Scanner Service Agent (roles/websecurityscanner.serviceAgent)",
		},
		"cloudasset.feeds.create": {
			"Owner (roles/owner)",
			"Assured Workloads Service Agent (roles/assuredworkloads.serviceAgent)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.commitments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.modelEvaluations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.environments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Apigee Synchronizer Manager (roles/apigee.synchronizerManager)",
		},
		"appengine.memcache.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
		},
		"automlrecommendations.catalogs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"billing.budgets.update": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
		},
		"container.endpointSlices.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"servicedirectory.namespaces.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
		},
		"monitoring.notificationChannels.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring NotificationChannel Editor (roles/monitoring.notificationChannelEditor)",
			"Monitoring NotificationChannel Viewer (roles/monitoring.notificationChannelViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"compute.nodeGroups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.managedCertificates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dlp.estimates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Cost Estimation (roles/dlp.estimatesAdmin)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"gameservices.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"logging.notificationRules.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"compute.maintenancePolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.versions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"gkemulticloud.azureClusters.getAdminKubeconfig": {
			"Owner (roles/owner)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"apigee.developerattributes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
		},
		"artifactregistry.versions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"monitoring.services.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Services Editor (roles/monitoring.servicesEditor)",
		},
		"healthcare.attributeDefinitions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
		},
		"aiplatform.edgeDevices.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.featurestores.exportFeatures": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"billing.accounts.updatePaymentInfo": {
			"Billing Account Administrator (roles/billing.admin)",
		},
		"container.petSets.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"gsuiteaddons.authorizations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
			"Google Workspace Add-ons Reader (roles/gsuiteaddons.reader)",
		},
		"compute.regionHealthCheckServices.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.targetPools.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"paymentsresellersubscription.promotions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Payments Reseller Admin (roles/paymentsresellersubscription.partnerAdmin)",
			"Payments Reseller Viewer (roles/paymentsresellersubscription.partnerViewer)",
			"Payments Reseller Promotions Viewer (roles/paymentsresellersubscription.promotionViewer)",
		},
		"vmmigration.groups.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"apigee.targetservers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"compute.disks.useReadOnly": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.priorityClasses.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"domains.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Domains Admin (roles/domains.admin)",
			"Cloud Domains Viewer (roles/domains.viewer)",
		},
		"notebooks.instances.updateConfig": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"bigquery.config.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"certificatemanager.certmapentries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"compute.instances.removeResourcePolicies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.leases.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.datasets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.datasets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"dataconnectors.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
		},
		"file.backups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
		},
		"recommender.cloudsqlOverprovisionedInstanceRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
		},
		"compute.firewallPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"firebasedatabase.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Realtime Database Admin (roles/firebasedatabase.admin)",
		},
		"monitoring.notificationChannels.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring NotificationChannel Editor (roles/monitoring.notificationChannelEditor)",
			"Monitoring NotificationChannel Viewer (roles/monitoring.notificationChannelViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"workflows.executions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Invoker (roles/workflows.invoker)",
			"Workflows Viewer (roles/workflows.viewer)",
		},
		"iam.googleapis.com/workloadIdentityPools.delete": {
			"Owner (roles/owner)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
		},
		"aiplatform.modelDeploymentMonitoringJobs.searchStatsAnomalies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.portals.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Portal Admin (roles/apigee.portalAdmin)",
		},
		"compute.targetVpnGateways.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"contactcenterinsights.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
		},
		"dialogflow.phoneNumbers.undelete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"pubsublite.reservations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
		},
		"apigee.tracesessions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"bigquery.models.updateTag": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Tag Editor (roles/datacatalog.tagEditor)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"container.statefulSets.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"iam.serviceAccountKeys.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Account Key Admin (roles/iam.serviceAccountKeyAdmin)",
		},
		"monitoring.notificationChannelDescriptors.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring NotificationChannel Editor (roles/monitoring.notificationChannelEditor)",
			"Monitoring NotificationChannel Viewer (roles/monitoring.notificationChannelViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"container.replicaSets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"documentai.evaluations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"privateca.certificateRevocationLists.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"bigquery.capacityCommitments.create": {
			"Owner (roles/owner)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"compute.externalVpnGateways.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.instanceTemplates.useReadOnly": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.networks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
		},
		"container.daemonSets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"securitycenter.assets.runDiscovery": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Assets Discovery Runner (roles/securitycenter.assetsDiscoveryRunner)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.networkEndpointGroups.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"dialogflow.changelogs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"proximitybeacon.namespaces.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Beacon Attachment Editor (roles/proximitybeacon.attachmentEditor)",
		},
		"riskmanager.policies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
			"Risk Manager Viewer (roles/riskmanager.viewer)",
		},
		"pubsub.snapshots.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Pub/Sub Admin (roles/pubsub.admin)",
		},
		"serviceusage.services.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Android Management User (roles/androidmanagement.user)",
			"Anthos Service Agent (roles/anthos.serviceAgent)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"Cloud API Gateway Management Service Agent (roles/apigateway_management.serviceAgent)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Cloud Profiler User (roles/cloudprofiler.user)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Cloud Scheduler Job Runner (roles/cloudscheduler.jobRunner)",
			"Cloud Scheduler Viewer (roles/cloudscheduler.viewer)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Viewer (roles/cloudsecurityscanner.viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Commerce Price Management Private Offers Admin (roles/commercepricemanagement.privateOffersAdmin)",
			"Commerce Price Management Viewer (roles/commercepricemanagement.viewer)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer User (roles/composer.user)",
			"Composer Worker (roles/composer.worker)",
			"Compute Admin (roles/compute.admin)",
			"Compute Image User (roles/compute.imageUser)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Compute packet mirroring admin (roles/compute.packetMirroringAdmin)",
			"Compute packet mirroring user (roles/compute.packetMirroringUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
			"Consumer Procurement Entitlement Viewer (roles/consumerprocurement.entitlementViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep User (roles/dataprep.projects.user)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Earth Engine Apps Publisher (roles/earthengine.appsPublisher)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Connect Gateway Admin (roles/gkehub.gatewayAdmin)",
			"Connect Gateway Reader (roles/gkehub.gatewayReader)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Quota Administrator (roles/servicemanagement.quotaAdmin)",
			"Quota Viewer (roles/servicemanagement.quotaViewer)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
			"Service Usage Consumer (roles/serviceusage.serviceUsageConsumer)",
			"Service Usage Viewer (roles/serviceusage.serviceUsageViewer)",
		},
		"visualinspection.annotationSets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"aiplatform.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudsql.sslCerts.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"composer.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Composer User (roles/composer.user)",
		},
		"compute.images.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"documentai.processors.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"logging.queries.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"bigquery.readsessions.getData": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Read Session User (roles/bigquery.readSessionUser)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
		},
		"compute.regionBackendServices.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.sslPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.deployments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datastream.routes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"aiplatform.edgeDeploymentJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudvolumesgcp-api.netapp.com/activeDirectories.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
		},
		"datacatalog.categories.fineGrainedGet": {
			"Fine-Grained Reader (roles/datacatalog.categoryFineGrainedReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"datamigration.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"servicedirectory.services.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"compute.targetTcpProxies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataplex.entities.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Metadata Reader (roles/dataplex.metadataReader)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
		},
		"dns.responsePolicyRules.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"eventarc.triggers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"firebaseabt.experiments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
		},
		"commerceprice.privateoffers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Commerce Price Management Private Offers Admin (roles/commercepricemanagement.privateOffersAdmin)",
		},
		"dns.networks.bindPrivateDNSZone": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"iam.roles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Organization Role Administrator (roles/iam.organizationRoleAdmin)",
			"Organization Role Viewer (roles/iam.organizationRoleViewer)",
			"Role Administrator (roles/iam.roleAdmin)",
			"Role Viewer (roles/iam.roleViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"logging.privateLogEntries.list": {
			"Owner (roles/owner)",
			"Billing Account Administrator (roles/billing.admin)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
		},
		"clouddebugger.breakpoints.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Debugger Agent (roles/clouddebugger.agent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"clouddeploy.releases.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
		},
		"firebasedynamiclinks.domains.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
		},
		"monitoring.publicWidgets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"healthcare.fhirStores.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
		},
		"storagetransfer.jobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
			"Storage Transfer Viewer (roles/storagetransfer.viewer)",
		},
		"cloudkms.cryptoKeyVersions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS Viewer (roles/cloudkms.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudprivatecatalogproducer.producerCatalogs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"compute.disks.removeResourcePolicies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.images.createTagBinding": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"deploymentmanager.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.volumeSnapshotContents.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataplex.content.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
		},
		"networksecurity.serverTlsPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"accesscontextmanager.servicePerimeters.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
		},
		"aiplatform.edgeDeploymentJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportDataprocJobs": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudkms.cryptoKeyVersions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
		},
		"compute.globalForwardingRules.setTarget": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"pubsub.topics.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
		},
		"securitycenter.notificationconfig.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Notification Configurations Editor (roles/securitycenter.notificationConfigEditor)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"compute.instanceGroupManagers.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"datafusion.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
			"Cloud Data Fusion Viewer (roles/datafusion.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebasecrashlytics.issues.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
			"Firebase Crashlytics Viewer (roles/firebasecrashlytics.viewer)",
		},
		"monitoring.dashboards.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Dashboard Configuration Editor (roles/monitoring.dashboardEditor)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"clouddeploy.deliveryPipelines.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.globalForwardingRules.pscDelete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.zoneOperations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"consumerprocurement.accounts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
			"Consumer Procurement Order Viewer (roles/consumerprocurement.orderViewer)",
		},
		"gkemulticloud.awsClusters.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
		},
		"securitycenter.organizationsettings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"automl.humanAnnotationTasks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"cloudasset.assets.exportDatafusionInstance": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.targetVpnGateways.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"recommender.monitoringProductSuggestionComputeRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
		},
		"resourcemanager.projects.delete": {
			"Owner (roles/owner)",
			"Project Deleter (roles/resourcemanager.projectDeleter)",
		},
		"pubsub.topics.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"resourcemanager.projects.updateLiens": {
			"Owner (roles/owner)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Project Lien Modifier (roles/resourcemanager.lienModifier)",
		},
		"baremetalsolution.volumesnapshots.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"bigquery.models.getData": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"cloudasset.assets.exportDataprocClusters": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.publicDelegatedPrefixes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"integrations.securityIntegrationVers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"apigateway.gateways.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
		},
		"automlrecommendations.catalogItems.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"iam.serviceAccounts.disable": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Apps Publisher (roles/earthengine.appsPublisher)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
		},
		"cloudjobdiscovery.companies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
		},
		"composer.environments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Composer User (roles/composer.user)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.globalAddresses.createInternal": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"firebaseextensions.configs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"recommender.cloudsqlInstanceDiskUsageTrendInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"vmmigration.groups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"apigee.envgroups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudfunctions.functions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.httpHealthChecks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"iam.googleapis.com/workloadIdentityPoolProviders.delete": {
			"Owner (roles/owner)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
		},
		"ml.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Operation Owner (roles/ml.operationOwner)",
		},
		"compute.acceleratorTypes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.sslCertificates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"apigee.targetservers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"compute.securityPolicies.addAssociation": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"firebaseappcheck.recaptchaConfig.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
			"Firebase App Check Viewer (roles/firebaseappcheck.viewer)",
		},
		"logging.exclusions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"networkservices.endpointPolicies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"compute.healthChecks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.publicDelegatedPrefixes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastream.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"documentai.operations.getLegacy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI API User (roles/documentai.apiUser)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"earthengine.maps.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"proximitybeacon.namespaces.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
		},
		"resourcemanager.folders.move": {
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Mover (roles/resourcemanager.folderMover)",
		},
		"servicebroker.instanceoperations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"dataproc.agents.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Worker (roles/dataproc.worker)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.answerrecords.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"firebaseappdistro.testers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase App Distribution Admin SDK Service Agent (roles/firebase.appDistributionSdkServiceAgent)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase App Distribution Admin (roles/firebaseappdistro.admin)",
		},
		"aiplatform.datasets.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.endpoints.predict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.developerapps.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"clientauthconfig.clients.getWithSecret": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"container.validatingWebhookConfigurations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"networkmanagement.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Network Management Admin (roles/networkmanagement.admin)",
			"Network Management Viewer (roles/networkmanagement.viewer)",
		},
		"spanner.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
			"Cloud Spanner Viewer (roles/spanner.viewer)",
		},
		"storage.buckets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.specialistPools.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.modelEvaluations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudsql.users.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"dataproc.workflowTemplates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
		},
		"documentai.processorVersions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"dataprocessing.datasources.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Data Processing Controls Resource Admin (roles/dataprocessing.admin)",
		},
		"certificatemanager.certs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"compute.regionNetworkEndpointGroups.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.roles.bind": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"deploymentmanager.manifests.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"gkemulticloud.azureNodePools.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
		},
		"gkehub.features.setIamPolicy": {
			"Owner (roles/owner)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"networksecurity.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"spanner.backups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Backup Writer (roles/spanner.backupWriter)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
		},
		"appengine.versions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Deployer (roles/appengine.deployer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"cloudsql.instances.restoreBackup": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"contactcenterinsights.conversations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"container.volumeAttachments.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datalabeling.examples.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"spanner.databases.partitionQuery": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database Reader (roles/spanner.databaseReader)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"aiplatform.tensorboardTimeSeries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.proxies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"bigtable.keyvisualizer.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"compute.subnetworks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Build Integrations Owner (roles/cloudbuild.integrationsOwner)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dataplex.environments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"recommender.computeDiskIdleResourceInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"aiplatform.modelDeploymentMonitoringJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.forwardingRules.pscCreate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.frontendConfigs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"osconfig.patchDeployments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"PatchDeployment Admin (roles/osconfig.patchDeploymentAdmin)",
			"PatchDeployment Viewer (roles/osconfig.patchDeploymentViewer)",
		},
		"privateca.reusableConfigs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"ml.studies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"monitoring.alertPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring AlertPolicy Editor (roles/monitoring.alertPolicyEditor)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"networkservices.httpfilters.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"compute.instances.setShieldedVmIntegrityPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.nodes.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dlp.jobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Jobs Editor (roles/dlp.jobsEditor)",
			"DLP Jobs Reader (roles/dlp.jobsReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebaseml.compressionjobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
			"Firebase ML Kit Viewer (roles/firebaseml.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"logging.logServiceIndexes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"iap.webServices.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"aiplatform.nasJobs.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudjobdiscovery.profiles.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
		},
		"container.cronJobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datapipelines.pipelines.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data pipelines Admin (roles/datapipelines.admin)",
		},
		"dialogflow.conversationProfiles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.metadataSchemas.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.savedqueries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datamigration.connectionprofiles.setIamPolicy": {
			"Owner (roles/owner)",
			"Database Migration Admin (roles/datamigration.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"recommender.computeInstanceMachineTypeRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"redis.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
		},
		"container.volumeSnapshotContents.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"deploymentmanager.types.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"eventarc.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Eventarc Viewer (roles/eventarc.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"workflows.executions.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Invoker (roles/workflows.invoker)",
		},
		"integrations.securityAuthConfigs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"actions.agent.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Actions Admin (roles/actions.Admin)",
		},
		"aiplatform.features.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Data Viewer (roles/aiplatform.featurestoreDataViewer)",
			"Vertex AI Feature Store Data Writer (roles/aiplatform.featurestoreDataWriter)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store Resource Viewer (roles/aiplatform.featurestoreResourceViewer)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudkms.cryptoKeyVersions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
		},
		"dataproc.operations.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"eventarc.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Eventarc Viewer (roles/eventarc.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.nodes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.roles.escalate": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataprep.projects.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataprep User (roles/dataprep.projects.user)",
		},
		"healthcare.dicomStores.dicomWebWrite": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
		},
		"redis.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
			"Cloud Memorystore Redis Viewer (roles/redis.viewer)",
		},
		"container.podPresets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"containeranalysis.notes.listOccurrences": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Container Analysis Occurrences for Notes Viewer (roles/containeranalysis.notes.occurrences.viewer)",
		},
		"ml.jobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Job Owner (roles/ml.jobOwner)",
		},
		"runtimeconfig.configs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"policyanalyzer.serviceAccountKeyLastAuthenticationActivities.query": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Activity Analysis Viewer (roles/policyanalyzer.activityAnalysisViewer)",
		},
		"bigquery.tables.createSnapshot": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"cloudjobdiscovery.jobs.search": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
			"Job Viewer (roles/cloudjobdiscovery.jobsViewer)",
		},
		"firebaseappcheck.safetyNetConfig.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
			"Firebase App Check Viewer (roles/firebaseappcheck.viewer)",
		},
		"firebasedynamiclinks.domains.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
			"Firebase Dynamic Links Viewer (roles/firebasedynamiclinks.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"logging.exclusions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.indexEndpoints.deploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"firebaseappcheck.services.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
		},
		"firebaseauth.configs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Identity Platform Admin (roles/identityplatform.admin)",
			"Identity Toolkit Admin (roles/identitytoolkit.admin)",
		},
		"serviceconsumermanagement.quota.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Management Administrator (roles/servicemanagement.admin)",
		},
		"cloudasset.assets.exportCloudresourcemanagerProjects": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsecurityscanner.results.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Viewer (roles/cloudsecurityscanner.viewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datalabeling.instructions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
		},
		"gsuiteaddons.deployments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
		},
		"remotebuildexecution.workerpools.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Remote Build Execution Configuration Admin (roles/remotebuildexecution.configurationAdmin)",
			"Remote Build Execution Configuration Viewer (roles/remotebuildexecution.configurationViewer)",
		},
		"compute.routes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
		},
		"contactcenterinsights.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"documentai.datasetSchemas.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"apigee.sharedflowrevisions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"automl.datasets.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"cloudsecurityscanner.scanruns.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Runner (roles/cloudsecurityscanner.runner)",
			"Web Security Scanner Viewer (roles/cloudsecurityscanner.viewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudtestservice.matrices.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"container.statefulSets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"aiplatform.entityTypes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.forwardingRules.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionSslCertificates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastore.operations.cancel": {
			"Owner (roles/owner)",
			"Cloud Datastore Import Export Admin (roles/datastore.importExportAdmin)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"pubsublite.topics.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"apikeys.keys.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"API Keys Admin (roles/serviceusage.apiKeysAdmin)",
		},
		"bigquery.jobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Job User (roles/bigquery.jobUser)",
			"BigQuery User (roles/bigquery.user)",
			"BigQuery Data Transfer Service Agent (roles/bigquerydatatransfer.serviceAgent)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Data Studio Service Agent (roles/datastudio.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"FleetEngine Service Agent (roles/fleetengine.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"cloudvolumesgcp-api.netapp.com/activeDirectories.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
		},
		"container.services.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
			"Healthcare Annotation Reader (roles/healthcare.annotationReader)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
			"Healthcare Annotation Store Viewer (roles/healthcare.annotationStoreViewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
			"Healthcare Dataset Viewer (roles/healthcare.datasetViewer)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Healthcare DICOM Store Viewer (roles/healthcare.dicomStoreViewer)",
			"Healthcare DICOM Viewer (roles/healthcare.dicomViewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Healthcare FHIR Store Viewer (roles/healthcare.fhirStoreViewer)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Healthcare HL7v2 Message Ingest (roles/healthcare.hl7V2Ingest)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
			"Healthcare HL7v2 Store Viewer (roles/healthcare.hl7V2StoreViewer)",
			"Healthcare NLP Service Viewer (roles/healthcare.nlpServiceViewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
		},
		"dialogflow.webhooks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Webhook Admin (roles/dialogflow.webhookAdmin)",
		},
		"livestream.events.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"apigee.developers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"cloudasset.assets.exportComputeInterconnectAttachment": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.namespaces.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.updateInfos.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.securitySettings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"baremetalsolution.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Instances Admin (roles/baremetalsolution.instancesadmin)",
			"Bare Metal Solution Instances Viewer (roles/baremetalsolution.instancesviewer)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
		},
		"cloudsql.instances.login": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Instance User (roles/cloudsql.instanceUser)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"firebaseml.compressionjobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
		},
		"gkehub.memberships.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Agent (roles/anthos.serviceAgent)",
			"Anthos Audit Service Agent (roles/anthosaudit.serviceAgent)",
			"Anthos Config Management Service Agent (roles/anthosconfigmanagement.serviceAgent)",
			"Anthos Identity Service Agent (roles/anthosidentityservice.serviceAgent)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"App Development Experience Service Agent (roles/appdevelopmentexperience.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Multi-cluster metering Service Agent (roles/multiclustermetering.serviceAgent)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Workload Certificate Service Agent (roles/workloadcertificate.serviceAgent)",
		},
		"storagetransfer.agentpools.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
		},
		"compute.targetGrpcProxies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.entityTypes.createEntity": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Entity Type Admin (roles/dialogflow.entityTypeAdmin)",
		},
		"integrations.apigeeIntegrationVers.deploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Deployer (roles/integrations.apigeeIntegrationDeployerRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"vmmigration.sources.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"spanner.databases.createBackup": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Backup Writer (roles/spanner.backupWriter)",
		},
		"container.ingresses.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.flows.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"firebaseauth.configs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Firebase Authentication Viewer (roles/firebaseauth.viewer)",
			"Identity Platform Admin (roles/identityplatform.admin)",
			"Identity Platform Viewer (roles/identityplatform.viewer)",
			"Identity Toolkit Admin (roles/identitytoolkit.admin)",
			"Identity Toolkit Viewer (roles/identitytoolkit.viewer)",
		},
		"integrations.apigeeIntegrationVers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"monitoring.timeSeries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Connection Service Agent (roles/bigqueryconnection.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Anthos Multi-cloud Telemetry Writer (roles/gkemulticloud.telemetryWriter)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"KubeRun Events Data Plane Service Agent (roles/kuberun.eventsDataPlaneServiceAgent)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Metric Writer (roles/monitoring.metricWriter)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
		},
		"bigtable.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"dlp.storedInfoTypes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"DLP Stored InfoTypes Editor (roles/dlp.storedInfoTypesEditor)",
			"DLP Stored InfoTypes Reader (roles/dlp.storedInfoTypesReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"ondemandscanning.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"On-Demand Scanning Admin (roles/ondemandscanning.admin)",
		},
		"remotebuildexecution.logstreams.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Remote Build Execution Artifact Admin (roles/remotebuildexecution.artifactAdmin)",
			"Remote Build Execution Artifact Creator (roles/remotebuildexecution.artifactCreator)",
			"Remote Build Execution Artifact Viewer (roles/remotebuildexecution.artifactViewer)",
		},
		"storagetransfer.jobs.run": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
		},
		"accesscontextmanager.accessLevels.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
		},
		"aiplatform.featurestores.importFeatures": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.scheduledJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datapipelines.pipelines.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data pipelines Admin (roles/datapipelines.admin)",
		},
		"integrations.apigeeIntegrationVers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"apigee.securityreports.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Security Admin (roles/apigee.securityAdmin)",
			"Apigee Security Viewer (roles/apigee.securityViewer)",
		},
		"bigtable.backups.setIamPolicy": {
			"Owner (roles/owner)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.globalForwardingRules.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"consumerprocurement.freeTrials.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
			"Consumer Procurement Entitlement Viewer (roles/consumerprocurement.entitlementViewer)",
		},
		"dataproc.operations.setIamPolicy": {
			"Owner (roles/owner)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"dataplex.zones.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Metadata Reader (roles/dataplex.metadataReader)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
			"Dataplex Viewer (roles/dataplex.viewer)",
		},
		"dialogflow.conversations.complete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"privateca.reusableConfigs.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"CA Service Admin (roles/privateca.admin)",
		},
		"vmmigration.targets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"fleetengine.vehicles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"gkemulticloud.azureClusters.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"artifactregistry.tags.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.jobs.update": {
			"Owner (roles/owner)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"cloudsql.backupRuns.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"dialogflow.conversations.addPhoneNumber": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"firebasehosting.sites.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Hosting Admin (roles/firebasehosting.admin)",
			"Firebase Hosting Viewer (roles/firebasehosting.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebaseml.compressionjobs.start": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
		},
		"healthcare.hl7V2Messages.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"visualinspection.models.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"composer.environments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
		},
		"compute.images.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"dataflow.shuffle.read": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataflow Worker (roles/dataflow.worker)",
		},
		"datastream.streams.setIamPolicy": {
			"Owner (roles/owner)",
			"Datastream Admin (roles/datastream.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"eventarc.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Eventarc Viewer (roles/eventarc.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dns.managedZones.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"firebaserules.rulesets.test": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
		},
		"recaptchaenterprise.projectmetadata.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"reCAPTCHA Enterprise Admin (roles/recaptchaenterprise.admin)",
			"reCAPTCHA Enterprise Viewer (roles/recaptchaenterprise.viewer)",
		},
		"cloudasset.assets.exportComputeAutoscalers": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.nodes.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.changelogs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.transitionRouteGroups.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"dlp.jobs.hybridInspect": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Jobs Editor (roles/dlp.jobsEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"networkservices.endpointConfigSelectors.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"container.pods.proxy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"deploymentmanager.deployments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dialogflow.smartMessagingEntries.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
		},
		"firebasedynamiclinks.links.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
			"Firebase Dynamic Links Viewer (roles/firebasedynamiclinks.viewer)",
		},
		"iam.googleapis.com/workloadIdentityPoolProviders.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
			"IAM Workload Identity Pool Viewer (roles/iam.workloadIdentityPoolViewer)",
		},
		"remotebuildexecution.logstreams.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Remote Build Execution Artifact Admin (roles/remotebuildexecution.artifactAdmin)",
			"Remote Build Execution Artifact Creator (roles/remotebuildexecution.artifactCreator)",
			"Remote Build Execution Logstream Writer (roles/remotebuildexecution.logstreamWriter)",
			"Remote Build Execution Service Agent (roles/remotebuildexecution.serviceAgent)",
			"Remote Build Execution Worker (roles/remotebuildexecution.worker)",
		},
		"securitycenter.securitycentersettings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"servicedirectory.services.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"bigquery.transfers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"compute.sslPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.targetHttpsProxies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"healthcare.dicomStores.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Healthcare DICOM Store Viewer (roles/healthcare.dicomStoreViewer)",
			"Healthcare DICOM Viewer (roles/healthcare.dicomViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.hl7V2Stores.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
		},
		"spanner.backups.restoreDatabase": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
		},
		"speech.phraseSets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Speech Administrator (roles/speech.admin)",
			"Cloud Speech Editor (roles/speech.editor)",
		},
		"cloudtranslate.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Cloud Translation API Viewer (roles/cloudtranslate.viewer)",
		},
		"compute.regionNotificationEndpoints.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"genomics.datasets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Genomics Admin (roles/genomics.admin)",
			"Genomics Editor (roles/genomics.editor)",
			"Genomics Viewer (roles/genomics.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"servicebroker.instances.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
		},
		"automl.annotationSpecs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"bigquery.models.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"dataflow.jobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Dataflow Viewer (roles/dataflow.viewer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkservices.httpfilters.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"riskmanager.reports.share": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Risk Manager Admin (roles/riskmanager.admin)",
		},
		"apigee.developerappattributes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
		},
		"compute.healthChecks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.machineTypes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.tensorboardTimeSeries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.instances.osAdminLogin": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"firebaseappcheck.appAttestConfig.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
		},
		"managedidentities.peerings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
			"Google Cloud Managed Identities Peering Viewer (roles/managedidentities.peeringViewer)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"compute.zoneOperations.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.componentStatuses.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gkemulticloud.azureClients.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.nasJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"visualinspection.annotationSets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"bigquery.rowAccessPolicies.setIamPolicy": {
			"Owner (roles/owner)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.disks.deleteTagBinding": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"deploymentmanager.compositeTypes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.participants.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"dialogflow.phoneNumbers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"apigee.apiproductattributes.createOrUpdateAll": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"cloudsql.instances.addServerCa": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.addresses.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"integrations.apigeeAuthConfigs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"certificatemanager.certs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"dataplex.partitions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
		},
		"dataplex.tasks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.publicDelegatedPrefixes.updatePolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"gameservices.realms.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"logging.logEntries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudtranslate.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Cloud Translation API Viewer (roles/cloudtranslate.viewer)",
		},
		"datacatalog.tagTemplates.getTag": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog TagTemplate Owner (roles/datacatalog.tagTemplateOwner)",
			"Data Catalog TagTemplate User (roles/datacatalog.tagTemplateUser)",
			"Data Catalog TagTemplate Viewer (roles/datacatalog.tagTemplateViewer)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"datalabeling.annotationspecsets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
		},
		"dlp.deidentifyTemplates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP De-identify Templates Editor (roles/dlp.deidentifyTemplatesEditor)",
			"DLP De-identify Templates Reader (roles/dlp.deidentifyTemplatesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"gkehub.fleet.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"apigateway.apiconfigs.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkconnectivity.hubs.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
		},
		"retail.userEvents.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"vmmigration.cutoverJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"apigee.apps.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"datastore.indexes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Index Admin (roles/datastore.indexAdmin)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"recommender.commitmentUtilizationInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Billing Account Usage Commitment Recommender Admin (roles/recommender.billingAccountCudAdmin)",
			"Billing Account Usage Commitment Recommender Viewer (roles/recommender.billingAccountCudViewer)",
			"Project Usage Commitment Recommender Admin (roles/recommender.projectCudAdmin)",
			"Project Usage Commitment Recommender Viewer (roles/recommender.projectCudViewer)",
		},
		"endpoints.portals.detachCustomDomain": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Endpoints Portal Admin (roles/endpoints.portalAdmin)",
		},
		"firebasedynamiclinks.domains.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
			"Firebase Dynamic Links Viewer (roles/firebasedynamiclinks.viewer)",
		},
		"managedidentities.domains.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"apigee.apiproducts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudasset.assets.exportComputeVpnTunnels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.firewalls.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Build Integrations Owner (roles/cloudbuild.integrationsOwner)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dialogflow.environments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Environment editor (roles/dialogflow.environmentEditor)",
		},
		"dlp.deidentifyTemplates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP De-identify Templates Editor (roles/dlp.deidentifyTemplatesEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"tpu.nodes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"TPU Admin (roles/tpu.admin)",
		},
		"videostitcher.slates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
		},
		"apigee.datacollectors.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"automl.annotationSpecs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"compute.licenseCodes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"dlp.jobTriggers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Job Triggers Editor (roles/dlp.jobTriggersEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"errorreporting.applications.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Error Reporting Viewer (roles/errorreporting.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigee.tracesessions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"compute.networks.addPeering": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
		},
		"container.mutatingWebhookConfigurations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"redis.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
			"Cloud Memorystore Redis Viewer (roles/redis.viewer)",
		},
		"apigee.references.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"baremetalsolution.volumesnapshots.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
		},
		"bigtable.backups.restore": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"cloudtasks.queues.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
			"Cloud Tasks Viewer (roles/cloudtasks.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.storageVersionMigrations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"cloudsql.instances.startReplica": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.interconnects.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastore.databases.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"monitoring.publicWidgets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"runtimeconfig.waiters.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"privateca.reusableConfigs.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"compute.instances.deleteAccessConfig": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Google Cloud Security Response Service Agent (roles/securitycenter.securityResponseServiceAgent)",
		},
		"compute.organizations.enableXpnResource": {
			"Compute Admin (roles/compute.admin)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastream.connectionProfiles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"healthcare.consentStores.setIamPolicy": {
			"Owner (roles/owner)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"notebooks.schedules.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"datastore.databases.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"integrations.securityIntegTempVers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"privateca.certificateTemplates.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Certificate Template User (roles/privateca.templateUser)",
		},
		"apigee.datacollectors.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
		},
		"apigee.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"cloudsql.instances.deleteTagBinding": {
			"Owner (roles/owner)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"connectors.connections.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connector Admin (roles/connectors.admin)",
		},
		"container.volumeSnapshotClasses.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"vpcaccess.connectors.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Data Connectors Service Agent (roles/dataconnectors.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Serverless VPC Access Admin (roles/vpcaccess.admin)",
			"Serverless VPC Access User (roles/vpcaccess.user)",
			"Serverless VPC Access Viewer (roles/vpcaccess.viewer)",
		},
		"aiplatform.tensorboardTimeSeries.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigateway.apis.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
		},
		"bigquery.savedqueries.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"dialogflow.agents.restore": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"memcache.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
			"Cloud Memorystore Memcached Viewer (roles/memcache.viewer)",
		},
		"vmmigration.datacenterConnectors.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"apigee.reports.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
		},
		"compute.reservations.resize": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"contactcenterinsights.conversations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"firebasepredictions.predictions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Predictions Admin (roles/firebasepredictions.admin)",
		},
		"accesscontextmanager.policies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"automlrecommendations.apiKeys.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"compute.globalForwardingRules.pscSetTarget": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.instanceGroupManagers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"speech.phraseSets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Speech Administrator (roles/speech.admin)",
			"Cloud Speech Editor (roles/speech.editor)",
		},
		"compute.nodeTemplates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.callMatchers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"run.services.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Run Admin (roles/run.admin)",
		},
		"cloudiot.devices.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
		},
		"compute.nodeTypes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.publicDelegatedPrefixes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.volumeAttachments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"actions.agentVersions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Actions Admin (roles/actions.Admin)",
		},
		"automlrecommendations.catalogItems.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"firebasehosting.sites.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Hosting Admin (roles/firebasehosting.admin)",
		},
		"gameservices.realms.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"retail.products.setSponsorship": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Retail Admin (roles/retail.admin)",
		},
		"appengine.applications.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
		},
		"logging.sinks.delete": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"networksecurity.serverTlsPolicies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"securitycenter.securityhealthanalyticssettings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"monitoring.metricDescriptors.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"networkconnectivity.hubs.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Hub & Spoke Viewer (roles/networkconnectivity.hubViewer)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"accesscontextmanager.gcpUserAccessBindings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Access Binding Admin (roles/accesscontextmanager.gcpAccessAdmin)",
			"Cloud Access Binding Reader (roles/accesscontextmanager.gcpAccessReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.tensorboardExperiments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudtranslate.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Cloud Translation API Viewer (roles/cloudtranslate.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.userDataMappings.archive": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
		},
		"logging.buckets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"automl.tableSpecs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"container.nodes.proxy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"compute.httpsHealthChecks.useReadOnly": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dataplex.lakes.setIamPolicy": {
			"Owner (roles/owner)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.targetHttpProxies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastore.indexes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Index Admin (roles/datastore.indexAdmin)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"firebasepredictions.predictions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Predictions Admin (roles/firebasepredictions.admin)",
		},
		"speech.customClasses.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Speech Administrator (roles/speech.admin)",
			"Cloud Speech Editor (roles/speech.editor)",
		},
		"aiplatform.humanInTheLoops.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.tensorboardTimeSeries.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.csiNodes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"secretmanager.secrets.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Viewer (roles/secretmanager.viewer)",
		},
		"automlrecommendations.events.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"bigtable.clusters.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"gcp.redisenterprise.com/databases.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
			"Redis Enterprise Cloud Viewer (roles/redisenterprisecloud.viewer)",
		},
		"metastore.backups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"dataplex.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
		},
		"dataproc.jobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"healthcare.fhirStores.deidentify": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
		},
		"logging.logMetrics.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dialogflow.entityTypes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Entity Type Admin (roles/dialogflow.entityTypeAdmin)",
		},
		"aiplatform.annotationSpecs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.models.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Translation Hub Admin (roles/translationhub.admin)",
			"Translation Hub Portal User (roles/translationhub.portalUser)",
		},
		"baremetalsolution.snapshotschedulepolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
		},
		"compute.networks.switchToCustomMode": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionHealthChecks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"networksecurity.clientTlsPolicies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"trafficdirector.networks.getConfigs": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Traffic Director Client (roles/trafficdirector.client)",
		},
		"cloudprivatecatalogproducer.producerCatalogs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"cloudprivatecatalogproducer.products.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.backendServices.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.resourceQuotas.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"containeranalysis.notes.setIamPolicy": {
			"Owner (roles/owner)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"automl.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"compute.organizations.enableXpnHost": {
			"Compute Admin (roles/compute.admin)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"recommender.resources.export": {
			"Owner (roles/owner)",
			"Recommendations Exporter (roles/recommender.exporter)",
		},
		"aiplatform.edgeDevices.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigtable.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"compute.networks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"container.pods.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"integrations.apigeeCertificates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"livestream.channels.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"apigee.archivedeployments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"cloudasset.assets.exportContainerNodepool": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudkms.cryptoKeys.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS Viewer (roles/cloudkms.viewer)",
		},
		"datamigration.migrationjobs.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"earthengine.thumbnails.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"apigee.apiproducts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"cloudjobdiscovery.tenants.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
			"Job Viewer (roles/cloudjobdiscovery.jobsViewer)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
			"Profile Viewer (roles/cloudjobdiscovery.profilesViewer)",
		},
		"compute.snapshots.listTagBindings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Tag Viewer (roles/resourcemanager.tagViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datapipelines.pipelines.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data pipelines Admin (roles/datapipelines.admin)",
		},
		"dialogflow.conversations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"dataplex.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
		},
		"cloudtoolresults.steps.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"container.customResourceDefinitions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.pods.getLogs": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataflow.streamingWorkItems.getWork": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataflow Worker (roles/dataflow.worker)",
		},
		"datafusion.instances.restart": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
		},
		"clientauthconfig.clients.undelete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"cloudasset.savedqueries.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
		},
		"cloudtoolresults.executions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"dialogflow.environments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Environment editor (roles/dialogflow.environmentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"osconfig.guestPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GuestPolicy Admin (roles/osconfig.guestPolicyAdmin)",
		},
		"servicedirectory.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"aiplatform.pipelineJobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudkms.cryptoKeyVersions.useToEncrypt": {
			"Owner (roles/owner)",
			"Cloud KMS CryptoKey Encrypter (roles/cloudkms.cryptoKeyEncrypter)",
			"Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)",
			"Cloud KMS Crypto Operator (roles/cloudkms.cryptoOperator)",
		},
		"compute.backendServices.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.maintenancePolicies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"networksecurity.serverTlsPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"monitoring.notificationChannels.getVerificationCode": {
			"Owner (roles/owner)",
			"Monitoring Admin (roles/monitoring.admin)",
		},
		"notebooks.instances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"recommender.loggingProductSuggestionContainerRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
		},
		"chroniclesm.gcpAssociations.create": {
			"Owner (roles/owner)",
			"Chronicle Service Admin (roles/chroniclesm.admin)",
		},
		"compute.images.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.apiServices.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"containeranalysis.occurrences.setIamPolicy": {
			"Owner (roles/owner)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"ml.jobs.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Job Owner (roles/ml.jobOwner)",
		},
		"cloudiot.registries.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
		},
		"apigee.keystores.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"bigtable.clusters.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"datamigration.migrationjobs.verify": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"spanner.backupOperations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Backup Writer (roles/spanner.backupWriter)",
		},
		"integrations.securityIntegrations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"bigtable.instances.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.firewallPolicies.cloneRules": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.targetSslProxies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.ingresses.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dlp.estimates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Cost Estimation (roles/dlp.estimatesAdmin)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"redis.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
		},
		"runtimeconfig.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"transcoder.jobTemplates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Transcoder Admin (roles/transcoder.admin)",
		},
		"baremetalsolution.volumes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
		},
		"billing.accounts.close": {
			"Billing Account Administrator (roles/billing.admin)",
		},
		"compute.urlMaps.invalidateCache": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"consumerprocurement.entitlements.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
			"Consumer Procurement Entitlement Viewer (roles/consumerprocurement.entitlementViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataproc.workflowTemplates.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"redis.instances.upgrade": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
		},
		"aiplatform.humanInTheLoops.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.nodeTemplates.setIamPolicy": {
			"Owner (roles/owner)",
			"Compute Admin (roles/compute.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datalabeling.annotateddatasets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
		},
		"healthcare.fhirResources.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
		},
		"pubsub.schemas.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
		},
		"apigee.organizations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"compute.subnetworks.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"videostitcher.vodSessions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher User (roles/videostitcher.user)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"secretmanager.secrets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Secret Manager Admin (roles/secretmanager.admin)",
		},
		"bigquery.connections.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Connection Admin (roles/bigquery.connectionAdmin)",
			"BigQuery Connection User (roles/bigquery.connectionUser)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"compute.urlMaps.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataplex.zones.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"dataproc.clusters.start": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"redis.instances.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
		},
		"cloudasset.assets.exportComputeSecurityPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"pubsub.subscriptions.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Pub/Sub Admin (roles/pubsub.admin)",
		},
		"servicebroker.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"bigquery.savedqueries.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"firebaseml.modelversions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
		},
		"recommender.monitoringProductSuggestionComputeRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
		},
		"bigquery.tables.getData": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"container.roleBindings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.conversationModels.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"container.volumeAttachments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"deploymentmanager.types.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"domains.registrations.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Domains Admin (roles/domains.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"bigtable.clusters.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"compute.regionNetworkEndpointGroups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.daemonSets.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.endpointSlices.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.replicaSets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"ml.studies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
		},
		"securitycenter.websecurityscannersettings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"visualinspection.solutionArtifacts.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"datafusion.instances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
		},
		"apigateway.apiconfigs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"ApiGateway Admin (roles/apigateway.admin)",
		},
		"certificatemanager.certmaps.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"healthcare.attributeDefinitions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"source.repos.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Source Repository Administrator (roles/source.admin)",
			"Source Repository Writer (roles/source.writer)",
		},
		"resourcemanager.folders.undelete": {
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Editor (roles/resourcemanager.folderEditor)",
		},
		"accesscontextmanager.policies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
		},
		"artifactregistry.repositories.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.jobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"eventarc.triggers.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"notebooks.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"vmmigration.sources.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"automl.datasets.setIamPolicy": {
			"Owner (roles/owner)",
			"AutoML Admin (roles/automl.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"container.replicationControllers.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.services.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"resourcemanager.hierarchyNodes.createTagBinding": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"servicedirectory.namespaces.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
		},
		"clouddeploy.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Approver (roles/clouddeploy.approver)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
		},
		"compute.instances.getShieldedVmIdentity": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.machineImages.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dns.resourceRecordSets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"pubsublite.reservations.listTopics": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"automlrecommendations.events.rejoin": {
			"Owner (roles/owner)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Retail Admin (roles/retail.admin)",
		},
		"containeranalysis.notes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Notes Editor (roles/containeranalysis.notes.editor)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
		},
		"memcache.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
			"Cloud Memorystore Memcached Viewer (roles/memcache.viewer)",
		},
		"networkconnectivity.hubs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
		},
		"redis.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
		},
		"appengine.memcache.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"bigquery.jobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"dialogflow.environments.getHistory": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Environment editor (roles/dialogflow.environmentEditor)",
		},
		"file.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
			"Cloud Filestore Viewer (roles/file.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"notebooks.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"automlrecommendations.placements.delete": {
			"Owner (roles/owner)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"bigtable.appProfiles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"contactcenterinsights.phraseMatchers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"runtimeconfig.waiters.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"accesscontextmanager.servicePerimeters.replaceAll": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"bigquery.transfers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"compute.instances.setMachineResources": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"contactcenterinsights.issueModels.deploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"privateca.reusableConfigs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"cloudkms.importJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS Importer (roles/cloudkms.importer)",
			"Cloud KMS Viewer (roles/cloudkms.viewer)",
		},
		"compute.autoscalers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"visualinspection.models.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"automl.datasets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"compute.backendServices.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.managedCertificates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dlp.estimates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Cost Estimation (roles/dlp.estimatesAdmin)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"translationhub.portals.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Translation Hub Admin (roles/translationhub.admin)",
			"Translation Hub Portal User (roles/translationhub.portalUser)",
		},
		"integrations.securityExecutions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"remotebuildexecution.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Remote Build Execution Configuration Admin (roles/remotebuildexecution.configurationAdmin)",
		},
		"retail.userEvents.rejoin": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Retail Admin (roles/retail.admin)",
		},
		"accesscontextmanager.policies.setIamPolicy": {
			"Owner (roles/owner)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"aiplatform.tensorboardTimeSeries.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.forwardingRules.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.instanceGroups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"firebaseappcheck.recaptchaEnterpriseConfig.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
		},
		"dataplex.entities.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
		},
		"cloudfunctions.functions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"cloudjobdiscovery.tenants.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
		},
		"contactcenterinsights.conversations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"container.podDisruptionBudgets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datafusion.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
			"Cloud Data Fusion Viewer (roles/datafusion.viewer)",
		},
		"workflows.workflows.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
		},
		"cloudiot.registries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Device Controller (roles/cloudiot.deviceController)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
			"Cloud IoT Viewer (roles/cloudiot.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.serviceAccounts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datamigration.migrationjobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"healthcare.datasets.setIamPolicy": {
			"Owner (roles/owner)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"resourcemanager.tagValues.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
		},
		"aiplatform.entityTypes.importFeatureValues": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Data Writer (roles/aiplatform.featurestoreDataWriter)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.subnetworks.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.routes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"stackdriver.projects.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Error Reporting Viewer (roles/errorreporting.viewer)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Stackdriver Accounts Editor (roles/stackdriver.accounts.editor)",
			"Stackdriver Accounts Viewer (roles/stackdriver.accounts.viewer)",
		},
		"aiplatform.trials.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.queries.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"container.certificateSigningRequests.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebaserules.releases.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
		},
		"notebooks.runtimes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"bigquery.routines.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"BigQuery Metadata Viewer (roles/bigquery.metadataViewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"monitoring.metricDescriptors.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Connection Service Agent (roles/bigqueryconnection.serviceAgent)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Anthos Multi-cloud Telemetry Writer (roles/gkemulticloud.telemetryWriter)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Metric Writer (roles/monitoring.metricWriter)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
		},
		"storage.hmacKeys.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage HMAC Key Admin (roles/storage.hmacKeyAdmin)",
		},
		"compute.backendServices.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.replicaSets.updateScale": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"opsconfigmonitoring.resourceMetadata.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Ops Config Monitoring Resource Metadata Viewer (roles/opsconfigmonitoring.resourceMetadata.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"cloudasset.assets.exportPubsubTopics": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.annotationStores.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
		},
		"iam.roles.create": {
			"Owner (roles/owner)",
			"Organization Role Administrator (roles/iam.organizationRoleAdmin)",
			"Role Administrator (roles/iam.roleAdmin)",
		},
		"pubsub.topics.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"eventarc.triggers.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Eventarc Viewer (roles/eventarc.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"paymentsresellersubscription.subscriptions.undoCancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Payments Reseller Admin (roles/paymentsresellersubscription.partnerAdmin)",
			"Payments Reseller Subscriptions Editor (roles/paymentsresellersubscription.subscriptionEditor)",
		},
		"automl.modelEvaluations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"bigquery.datasets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"BigQuery Metadata Viewer (roles/bigquery.metadataViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"bigquery.savedqueries.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"cloudasset.assets.exportContainerClusterrolebinding": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.participants.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"compute.forwardingRules.pscSetLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.ingresses.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"recommender.computeInstanceMachineTypeRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
		},
		"apigee.appkeys.manage": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"automlrecommendations.recommendations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"compute.images.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Image User (roles/compute.imageUser)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"pubsublite.topics.getPartitions": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Publisher (roles/pubsublite.publisher)",
			"Pub/Sub Lite Subscriber (roles/pubsublite.subscriber)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"serviceusage.apiKeys.regenerate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"API Keys Admin (roles/serviceusage.apiKeysAdmin)",
		},
		"gkehub.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"accesscontextmanager.accessLevels.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"aiplatform.edgeDevices.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.apiServices.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dns.responsePolicyRules.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"firebase.clients.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Remote Config Admin (roles/cloudconfig.admin)",
			"Firebase Remote Config Viewer (roles/cloudconfig.viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
			"Firebase A/B Testing Viewer (roles/firebaseabt.viewer)",
			"Firebase App Distribution Admin (roles/firebaseappdistro.admin)",
			"Firebase App Distribution Viewer (roles/firebaseappdistro.viewer)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Firebase Authentication Viewer (roles/firebaseauth.viewer)",
			"Firebase Crash Symbol Uploader (roles/firebasecrash.symbolMappingsAdmin)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
			"Firebase Crashlytics Viewer (roles/firebasecrashlytics.viewer)",
			"Firebase Realtime Database Admin (roles/firebasedatabase.admin)",
			"Firebase Realtime Database Viewer (roles/firebasedatabase.viewer)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
			"Firebase Dynamic Links Viewer (roles/firebasedynamiclinks.viewer)",
			"Firebase Hosting Admin (roles/firebasehosting.admin)",
			"Firebase Hosting Viewer (roles/firebasehosting.viewer)",
			"Firebase In-App Messaging Admin (roles/firebaseinappmessaging.admin)",
			"Firebase In-App Messaging Viewer (roles/firebaseinappmessaging.viewer)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
			"Firebase ML Kit Viewer (roles/firebaseml.viewer)",
			"Firebase Cloud Messaging Admin (roles/firebasenotifications.admin)",
			"Firebase Cloud Messaging Viewer (roles/firebasenotifications.viewer)",
			"Firebase Performance Reporting Admin (roles/firebaseperformance.admin)",
			"Firebase Performance Reporting Viewer (roles/firebaseperformance.viewer)",
			"Firebase Predictions Admin (roles/firebasepredictions.admin)",
			"Firebase Predictions Viewer (roles/firebasepredictions.viewer)",
			"Cloud Storage for Firebase Admin (roles/firebasestorage.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.runtimeClasses.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"osconfig.vulnerabilityReports.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"OS VulnerabilityReport Viewer (roles/osconfig.vulnerabilityReportViewer)",
		},
		"remotebuildexecution.workerpools.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Remote Build Execution Configuration Admin (roles/remotebuildexecution.configurationAdmin)",
		},
		"servicemanagement.services.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud API Gateway Management Service Agent (roles/apigateway_management.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Service Config Editor (roles/servicemanagement.configEditor)",
		},
		"storagetransfer.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
			"Storage Transfer Viewer (roles/storagetransfer.viewer)",
		},
		"lifesciences.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Life Sciences Admin (roles/lifesciences.admin)",
			"Cloud Life Sciences Editor (roles/lifesciences.editor)",
			"Cloud Life Sciences Workflows Runner (roles/lifesciences.workflowsRunner)",
		},
		"recommender.computeAddressIdleResourceInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
		},
		"serviceconsumermanagement.tenancyu.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Admin of Tenancy Units (roles/serviceconsumermanagement.tenancyUnitsAdmin)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Workload Certificate Service Agent (roles/workloadcertificate.serviceAgent)",
		},
		"apigateway.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"ApiGateway Admin (roles/apigateway.admin)",
		},
		"cloudtrace.tasks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace User (roles/cloudtrace.user)",
		},
		"container.storageVersionMigrations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.volumeSnapshotClasses.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataflow.jobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Dataflow Viewer (roles/dataflow.viewer)",
			"Dataflow Worker (roles/dataflow.worker)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
		},
		"speech.adaptations.execute": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Speech Administrator (roles/speech.admin)",
			"Cloud Speech Client (roles/speech.client)",
			"Cloud Speech Editor (roles/speech.editor)",
		},
		"automl.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"riskmanager.reports.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
			"Risk Manager Report Reviewer (roles/riskmanager.reviewer)",
			"Risk Manager Viewer (roles/riskmanager.viewer)",
		},
		"serviceconsumermanagement.tenancyu.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Admin of Tenancy Units (roles/serviceconsumermanagement.tenancyUnitsAdmin)",
			"Viewer of Tenancy Units (roles/serviceconsumermanagement.tenancyUnitsViewer)",
			"Service Management Administrator (roles/servicemanagement.admin)",
		},
		"aiplatform.tensorboards.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.managedCertificates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"logging.views.listResourceValues": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs View Accessor (roles/logging.viewAccessor)",
		},
		"monitoring.groups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"monitoring.metricDescriptors.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Connection Service Agent (roles/bigqueryconnection.serviceAgent)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Anthos Multi-cloud Telemetry Writer (roles/gkemulticloud.telemetryWriter)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Metric Writer (roles/monitoring.metricWriter)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
		},
		"connectors.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.customResourceDefinitions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"firebaseappcheck.appAttestConfig.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
			"Firebase App Check Viewer (roles/firebaseappcheck.viewer)",
		},
		"accesscontextmanager.accessLevels.replaceAll": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"apigateway.gateways.setIamPolicy": {
			"Owner (roles/owner)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"cloudasset.assets.exportComputeHttpsHealthChecks": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"composer.dags.execute": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Composer User (roles/composer.user)",
		},
		"compute.regionNetworkEndpointGroups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"ml.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"networkconnectivity.spokes.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Hub & Spoke Viewer (roles/networkconnectivity.hubViewer)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"networksecurity.authorizationPolicies.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"datacatalog.tagTemplates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog TagTemplate Creator (roles/datacatalog.tagTemplateCreator)",
			"Data Catalog TagTemplate Owner (roles/datacatalog.tagTemplateOwner)",
			"Data Catalog TagTemplate User (roles/datacatalog.tagTemplateUser)",
			"Data Catalog TagTemplate Viewer (roles/datacatalog.tagTemplateViewer)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"recommender.cloudsqlInstanceActivityInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
		},
		"aiplatform.tensorboardTimeSeries.read": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigtable.keyvisualizer.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"clouddeploy.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Approver (roles/clouddeploy.approver)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
		},
		"cloudsupport.accounts.create": {
			"Owner (roles/owner)",
			"Support Account Administrator (roles/cloudsupport.admin)",
		},
		"container.services.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"bigquery.jobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"compute.instanceGroups.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.csiNodeInfos.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.specialistPools.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudprofiler.profiles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Profiler User (roles/cloudprofiler.user)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.regionNotificationEndpoints.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastream.streams.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"recommender.resourcemanagerProjectUtilizationInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Project Utilization Recommender Admin (roles/recommender.projectUtilAdmin)",
		},
		"clouddeploy.rollouts.approve": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Approver (roles/clouddeploy.approver)",
		},
		"genomics.datasets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Genomics Admin (roles/genomics.admin)",
			"Genomics Editor (roles/genomics.editor)",
		},
		"apigee.resourcefiles.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"container.podDisruptionBudgets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.intents.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Intent Admin (roles/dialogflow.intentAdmin)",
		},
		"file.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
			"Cloud Filestore Viewer (roles/file.viewer)",
		},
		"gkemulticloud.azureClusters.generateAccessToken": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
		},
		"aiplatform.dataItems.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"file.instances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
		},
		"recommender.resourcemanagerProjectUtilizationInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Project Utilization Recommender Admin (roles/recommender.projectUtilAdmin)",
			"Project Utilization Recommender Viewer (roles/recommender.projectUtilViewer)",
		},
		"apigee.exports.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"connectors.connections.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connector Admin (roles/connectors.admin)",
		},
		"run.services.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
		},
		"container.statefulSets.getScale": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"managedidentities.domains.detachTrust": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
		},
		"monitoring.uptimeCheckConfigs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Uptime Check Configuration Editor (roles/monitoring.uptimeCheckConfigEditor)",
			"Monitoring Uptime Check Configuration Viewer (roles/monitoring.uptimeCheckConfigViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"recommender.cloudsqlInstanceOutOfDiskRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"cloudconfig.configs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Remote Config Admin (roles/cloudconfig.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
		},
		"dataconnectors.connectors.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
		},
		"monitoring.services.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Services Editor (roles/monitoring.servicesEditor)",
			"Monitoring Services Viewer (roles/monitoring.servicesViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"appengine.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Viewer (roles/appengine.appViewer)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudfunctions.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"container.scheduledJobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebaseml.models.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
			"Firebase ML Kit Viewer (roles/firebaseml.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"accesscontextmanager.servicePerimeters.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"aiplatform.customJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"androidmanagement.enterprises.manage": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Android Management User (roles/androidmanagement.user)",
		},
		"contactcenterinsights.issueModels.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"recommender.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"BigQuery Slot Recommender Admin (roles/recommender.bigQueryCapacityCommitmentsAdmin)",
			"BigQuery Recommender Project Admin (roles/recommender.bigQueryCapacityCommitmentsProjectAdmin)",
			"BigQuery Recommender Project Viewer (roles/recommender.bigQueryCapacityCommitmentsProjectViewer)",
			"BigQuery Slot Recommender Viewer (roles/recommender.bigQueryCapacityCommitmentsViewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
			"Firewall Recommender Admin (roles/recommender.firewallAdmin)",
			"Firewall Recommender Viewer (roles/recommender.firewallViewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
			"Project Usage Commitment Recommender Admin (roles/recommender.projectCudAdmin)",
			"Project Usage Commitment Recommender Viewer (roles/recommender.projectCudViewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"certificatemanager.certmaps.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"cloudasset.assets.exportComputeTargetHttpProxies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.nodeGroups.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastore.databases.import": {
			"Owner (roles/owner)",
			"Cloud Datastore Import Export Admin (roles/datastore.importExportAdmin)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"healthcare.annotations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
		},
		"baremetalsolution.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Instances Admin (roles/baremetalsolution.instancesadmin)",
			"Bare Metal Solution Instances Viewer (roles/baremetalsolution.instancesviewer)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"gameservices.gameServerDeployments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"retail.placements.predict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"spanner.databases.partitionRead": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database Reader (roles/spanner.databaseReader)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"bigquery.bireservations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"binaryauthorization.attestors.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Attestor Admin (roles/binaryauthorization.attestorsAdmin)",
			"Binary Authorization Attestor Editor (roles/binaryauthorization.attestorsEditor)",
			"Binary Authorization Attestor Image Verifier (roles/binaryauthorization.attestorsVerifier)",
			"Binary Authorization Attestor Viewer (roles/binaryauthorization.attestorsViewer)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
		},
		"cloudasset.assets.exportComputeNetworks": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudiot.devices.sendCommand": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Device Controller (roles/cloudiot.deviceController)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
		},
		"monitoring.slos.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Services Editor (roles/monitoring.servicesEditor)",
			"Monitoring Services Viewer (roles/monitoring.servicesViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"container.daemonSets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.volumeSnapshots.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datastore.entities.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
		},
		"oauthconfig.verification.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"storage.hmacKeys.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage HMAC Key Admin (roles/storage.hmacKeyAdmin)",
		},
		"cloudonefs.isiloncloud.com/clusters.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
			"Dell EMC Cloud OneFS Viewer (roles/dellemccloudonefs.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datacatalog.taxonomies.update": {
			"Owner (roles/owner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Policy Tag Admin (roles/datacatalog.categoryAdmin)",
		},
		"dns.resourceRecordSets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"firebaseappdistro.releases.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase App Distribution Admin SDK Service Agent (roles/firebase.appDistributionSdkServiceAgent)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase App Distribution Admin (roles/firebaseappdistro.admin)",
		},
		"logging.usage.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataplex.lakes.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"earthengine.exports.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"gameservices.gameServerDeployments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"aiplatform.batchPredictionJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.instanceattachments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"clouddeploy.releases.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
		},
		"cloudsupport.accounts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Support Account Administrator (roles/cloudsupport.admin)",
			"Support Account Viewer (roles/cloudsupport.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.apiServices.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"retail.products.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"riskmanager.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
		},
		"container.initializerConfigurations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.leases.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.conversationDatasets.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"dialogflow.phoneNumberOrders.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"resourcemanager.tagKeys.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
		},
		"compute.regionUrlMaps.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datalabeling.datasets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
		},
		"servicedirectory.endpoints.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"bigquery.tables.restoreSnapshot": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"cloudkms.cryptoKeys.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudprivatecatalogproducer.producerCatalogs.detachProduct": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"datastream.connectionProfiles.sourceTypes": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"resourcemanager.projects.create": {
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Project Creator (roles/resourcemanager.projectCreator)",
		},
		"cloudscheduler.jobs.enable": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
		},
		"container.replicaSets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebasehosting.sites.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Hosting Admin (roles/firebasehosting.admin)",
			"Firebase Hosting Viewer (roles/firebasehosting.viewer)",
		},
		"runtimeconfig.configs.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"securitycenter.notificationconfig.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Notification Configurations Editor (roles/securitycenter.notificationConfigEditor)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"container.csiDrivers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.frontendConfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"deploymentmanager.types.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"aiplatform.modelDeploymentMonitoringJobs.pause": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.sharedflowrevisions.undeploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"automl.datasets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"certificatemanager.certmaps.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"cloudsql.sslCerts.createEphemeral": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"spanner.databaseOperations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
		},
		"vpcaccess.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Serverless VPC Access Admin (roles/vpcaccess.admin)",
			"Serverless VPC Access User (roles/vpcaccess.user)",
			"Serverless VPC Access Viewer (roles/vpcaccess.viewer)",
		},
		"bigquery.savedqueries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"cloudprivatecatalogproducer.settings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"compute.regionNetworkEndpointGroups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"gkehub.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"aiplatform.executions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.environments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudjobdiscovery.tenants.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
		},
		"container.bindings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.horizontalPodAutoscalers.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"billing.accounts.move": {
			"Billing Account Administrator (roles/billing.admin)",
		},
		"resourcemanager.hierarchyNodes.listTagBindings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Tag Viewer (roles/resourcemanager.tagViewer)",
		},
		"spanner.databases.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Backup Writer (roles/spanner.backupWriter)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
		},
		"cloudprivatecatalogproducer.producerCatalogs.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.petSets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"earthengine.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"livestream.inputs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
		},
		"privateca.certificateRevocationLists.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
		},
		"vpcaccess.connectors.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Serverless VPC Access Admin (roles/vpcaccess.admin)",
			"Serverless VPC Access User (roles/vpcaccess.user)",
			"Serverless VPC Access Viewer (roles/vpcaccess.viewer)",
		},
		"container.cronJobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataplex.assets.readData": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Data Owner (roles/dataplex.dataOwner)",
			"Dataplex Data Reader (roles/dataplex.dataReader)",
		},
		"ml.trials.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"servicemanagement.services.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Service Management Administrator (roles/servicemanagement.admin)",
		},
		"videostitcher.liveSessions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher User (roles/videostitcher.user)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"aiplatform.endpoints.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.sharedflowrevisions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"artifactregistry.dockerimages.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.examples.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.consentStores.evaluateUserConsents": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
		},
		"pubsub.topics.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"KubeRun Events Data Plane Service Agent (roles/kuberun.eventsDataPlaneServiceAgent)",
			"Media Asset Service Agent (roles/mediaasset.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"apigee.references.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"cloudprivatecatalogproducer.products.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"compute.networkEndpointGroups.attachNetworkEndpoints": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"connectors.connections.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connector Admin (roles/connectors.admin)",
		},
		"networksecurity.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"dataproc.autoscalingPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"logging.queries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"monitoring.alertPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring AlertPolicy Editor (roles/monitoring.alertPolicyEditor)",
			"Monitoring AlertPolicy Viewer (roles/monitoring.alertPolicyViewer)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsql.users.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.regionHealthChecks.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionUrlMaps.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"privateca.certificates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"datamigration.connectionprofiles.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"servicebroker.catalogs.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
		},
		"automl.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"bigtable.tables.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"cloudtrace.tasks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace User (roles/cloudtrace.user)",
		},
		"remotebuildexecution.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Remote Build Execution Configuration Admin (roles/remotebuildexecution.configurationAdmin)",
			"Remote Build Execution Configuration Viewer (roles/remotebuildexecution.configurationViewer)",
		},
		"apigee.keyvaluemaps.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.jobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dns.responsePolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"monitoring.publicWidgets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"networkservices.httpfilters.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"workflows.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Viewer (roles/workflows.viewer)",
		},
		"aiplatform.hyperparameterTuningJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudonefs.isiloncloud.com/clusters.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
			"Dell EMC Cloud OneFS Viewer (roles/dellemccloudonefs.viewer)",
		},
		"compute.instances.getGuestAttributes": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.publicAdvertisedPrefixes.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"securitycenter.muteconfigs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Mute Configurations Editor (roles/securitycenter.muteConfigsEditor)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"cloudbuild.workerpools.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build WorkerPool Editor (roles/cloudbuild.workerPoolEditor)",
			"Cloud Build WorkerPool Owner (roles/cloudbuild.workerPoolOwner)",
		},
		"container.configMaps.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.roleBindings.create": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"notebooks.instances.checkUpgradability": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"integrations.apigeeSfdcInstances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
		},
		"pubsub.snapshots.seek": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Subscriber (roles/pubsub.subscriber)",
		},
		"storage.buckets.get": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud Optimization Service Agent (roles/cloudoptimization.serviceAgent)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Cloud Translation API Service Agent (roles/cloudtranslate.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataflow Worker (roles/dataflow.worker)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"DocumentAI Core Service Agent (roles/documentaicore.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Storage for Firebase Service Agent (roles/firebasestorage.serviceAgent)",
			"Firestore Service Agent (roles/firestore.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Storage Legacy Bucket Reader (roles/storage.legacyBucketReader)",
			"Storage Legacy Bucket Writer (roles/storage.legacyBucketWriter)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"accessapproval.settings.update": {
			"Owner (roles/owner)",
			"Access Approval Config Editor (roles/accessapproval.configEditor)",
		},
		"compute.instanceTemplates.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.instances.reset": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.networkEndpointGroups.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"dlp.tableDataProfiles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Data Profiles Reader (roles/dlp.dataProfilesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Table Data Profiles Reader (roles/dlp.tableDataProfilesReader)",
		},
		"workflows.workflows.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Viewer (roles/workflows.viewer)",
		},
		"privateca.certificates.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"CA Service Admin (roles/privateca.admin)",
		},
		"cloudasset.assets.exportBigqueryDatasets": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"connectors.connections.getRuntimeEntitySchema": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
		},
		"container.mutatingWebhookConfigurations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.resourceQuotas.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataconnectors.connectors.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
		},
		"cloudjobdiscovery.companies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
			"Job Viewer (roles/cloudjobdiscovery.jobsViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudprivatecatalogproducer.catalogAssociations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"remotebuildexecution.logstreams.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Remote Build Execution Artifact Admin (roles/remotebuildexecution.artifactAdmin)",
			"Remote Build Execution Artifact Creator (roles/remotebuildexecution.artifactCreator)",
			"Remote Build Execution Logstream Writer (roles/remotebuildexecution.logstreamWriter)",
			"Remote Build Execution Service Agent (roles/remotebuildexecution.serviceAgent)",
			"Remote Build Execution Worker (roles/remotebuildexecution.worker)",
		},
		"compute.projects.setDefaultServiceAccount": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"healthcare.annotationStores.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
		},
		"apigee.developers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
		},
		"cloudjobdiscovery.companies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
		},
		"dataproc.autoscalingPolicies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"orgpolicy.constraints.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Organization Policy Administrator (roles/orgpolicy.policyAdmin)",
			"Organization Policy Viewer (roles/orgpolicy.policyViewer)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Creator (roles/resourcemanager.folderCreator)",
			"Folder Editor (roles/resourcemanager.folderEditor)",
			"Folder Viewer (roles/resourcemanager.folderViewer)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
		},
		"osconfig.patchJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Patch Job Executor (roles/osconfig.patchJobExecutor)",
			"Patch Job Viewer (roles/osconfig.patchJobViewer)",
		},
		"logging.sinks.update": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"cloudjobdiscovery.jobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
		},
		"compute.globalAddresses.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"compute.globalForwardingRules.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.globalPublicDelegatedPrefixes.updatePolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataflow.jobs.snapshot": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
		},
		"securitycenter.muteconfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Mute Configurations Editor (roles/securitycenter.muteConfigsEditor)",
			"Security Center Mute Configurations Viewer (roles/securitycenter.muteConfigsViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"spanner.backups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Backup Writer (roles/spanner.backupWriter)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
		},
		"compute.targetTcpProxies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"connectors.providers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
		},
		"datamigration.migrationjobs.resume": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"firebaseappcheck.deviceCheckConfig.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
		},
		"networkservices.httpFilters.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"clouddeploy.targets.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.globalNetworkEndpointGroups.attachNetworkEndpoints": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"dns.dnsKeys.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"networkservices.endpointPolicies.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"earthengine.videothumbnails.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"policysimulator.replays.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Simulator Admin (roles/policysimulator.admin)",
		},
		"translationhub.portals.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Translation Hub Admin (roles/translationhub.admin)",
		},
		"apigee.appkeys.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"apigee.sharedflowrevisions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.targetGrpcProxies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.namespaces.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Cluster Admin (roles/container.clusterAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"runtimeconfig.variables.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"cloudkms.cryptoKeyVersions.useToDecrypt": {
			"Owner (roles/owner)",
			"Cloud KMS CryptoKey Decrypter (roles/cloudkms.cryptoKeyDecrypter)",
			"Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)",
			"Cloud KMS Crypto Operator (roles/cloudkms.cryptoOperator)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"compute.instanceTemplates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.instances.updateShieldedVmConfig": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.replicaSets.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dns.dnsKeys.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"aiplatform.batchPredictionJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"dataplex.content.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"deploymentmanager.typeProviders.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"osconfig.patchDeployments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"PatchDeployment Admin (roles/osconfig.patchDeploymentAdmin)",
			"PatchDeployment Viewer (roles/osconfig.patchDeploymentViewer)",
		},
		"run.revisions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
		},
		"resourcesettings.settings.update": {
			"Resource Settings Administrator (roles/resourcesettings.admin)",
		},
		"spanner.sessions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database Reader (roles/spanner.databaseReader)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"videostitcher.vodAdTagDetails.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"aiplatform.annotationSpecs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudtranslate.generalModels.predict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
		},
		"gkehub.gateway.patch": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connect Gateway Admin (roles/gkehub.gatewayAdmin)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"pubsub.subscriptions.consume": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"KubeRun Events Data Plane Service Agent (roles/kuberun.eventsDataPlaneServiceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Subscriber (roles/pubsub.subscriber)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
		},
		"recommender.computeFirewallInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firewall Recommender Admin (roles/recommender.firewallAdmin)",
		},
		"recommender.cloudAssetInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Insights Admin (roles/recommender.cloudAssetInsightsAdmin)",
		},
		"servicedirectory.endpoints.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
		},
		"vmmigration.groups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"cloudtrace.insights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace User (roles/cloudtrace.user)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.globalAddresses.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"compute.urlMaps.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.nodes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"logging.logMetrics.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"apigee.reports.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"apigee.sharedflows.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"assuredworkloads.workload.create": {
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
		},
		"compute.regionHealthCheckServices.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"gameservices.gameServerDeployments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"chat.bots.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Chat Bots Owner (roles/chat.owner)",
			"Chat Bots Viewer (roles/chat.reader)",
		},
		"cloudasset.assets.exportContainerregistryImage": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataplex.zones.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"orgpolicy.policies.create": {
			"Organization Policy Administrator (roles/orgpolicy.policyAdmin)",
		},
		"resourcemanager.folders.get": {
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Assured Workloads Reader (roles/assuredworkloads.reader)",
			"Browser (roles/browser)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Creator (roles/resourcemanager.folderCreator)",
			"Folder Editor (roles/resourcemanager.folderEditor)",
			"Folder IAM Admin (roles/resourcemanager.folderIamAdmin)",
			"Folder Viewer (roles/resourcemanager.folderViewer)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Assets Viewer (roles/securitycenter.assetsViewer)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Center Findings Viewer (roles/securitycenter.findingsViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
		},
		"aiplatform.metadataStores.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.reservations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"cloudprivatecatalogproducer.producerCatalogs.setIamPolicy": {
			"Owner (roles/owner)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"documentai.processorVersions.processBatch": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI API User (roles/documentai.apiUser)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"gkemulticloud.awsNodePools.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
		},
		"apigee.flowhooks.getSharedFlow": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"iam.googleapis.com/workloadIdentityPools.update": {
			"Owner (roles/owner)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
		},
		"aiplatform.contexts.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.dataLabelingJobs.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.runtimeconfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Agent (roles/apigee.analyticsAgent)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Runtime Agent (roles/apigee.runtimeAgent)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"dns.changes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"aiplatform.contexts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudjobdiscovery.events.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
		},
		"dialogflow.answerrecords.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"notebooks.executions.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"privateca.certificateAuthorities.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"servicedirectory.namespaces.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"binaryauthorization.attestors.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Binary Authorization Attestor Admin (roles/binaryauthorization.attestorsAdmin)",
			"Binary Authorization Attestor Editor (roles/binaryauthorization.attestorsEditor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
		},
		"container.namespaces.finalize": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"genomics.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Genomics Admin (roles/genomics.admin)",
			"Genomics Editor (roles/genomics.editor)",
			"Genomics Pipelines Runner (roles/genomics.pipelinesRunner)",
		},
		"iap.webServiceVersions.updateSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"IAP Settings Admin (roles/iap.settingsAdmin)",
		},
		"livestream.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
		},
		"cloudtrace.tasks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace User (roles/cloudtrace.user)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.cronJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.deployments.getScale": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"notebooks.instances.setMachineType": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"aiplatform.metadataStores.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.replicaSets.getScale": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"deploymentmanager.typeProviders.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"firebasecrashlytics.data.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
			"Firebase Crashlytics Viewer (roles/firebasecrashlytics.viewer)",
		},
		"recommender.resourcemanagerProjectUtilizationRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Project Utilization Recommender Admin (roles/recommender.projectUtilAdmin)",
			"Project Utilization Recommender Viewer (roles/recommender.projectUtilViewer)",
		},
		"metastore.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
		},
		"aiplatform.edgeDevices.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"clouddeploy.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Approver (roles/clouddeploy.approver)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudjobdiscovery.jobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
			"Job Viewer (roles/cloudjobdiscovery.jobsViewer)",
		},
		"compute.routers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.configMaps.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"clientauthconfig.clients.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"clouddeploy.deliveryPipelines.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"recommender.monitoringProductSuggestionComputeRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
		},
		"integrations.apigeeAuthConfigs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"aiplatform.edgeDeploymentJobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.tables.delete": {
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"cloudsql.backupRuns.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.targetPools.removeInstance": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"domains.registrations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Domains Admin (roles/domains.admin)",
		},
		"remotebuildexecution.blobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Build Approver (roles/cloudbuild.builds.approver)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Editor (roles/cloudbuild.builds.editor)",
			"Cloud Build Viewer (roles/cloudbuild.builds.viewer)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Composer Worker (roles/composer.worker)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Remote Build Execution Artifact Admin (roles/remotebuildexecution.artifactAdmin)",
			"Remote Build Execution Artifact Creator (roles/remotebuildexecution.artifactCreator)",
			"Remote Build Execution Artifact Viewer (roles/remotebuildexecution.artifactViewer)",
			"Remote Build Execution Service Agent (roles/remotebuildexecution.serviceAgent)",
			"Remote Build Execution Worker (roles/remotebuildexecution.worker)",
		},
		"runtimeconfig.waiters.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"assuredworkloads.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Assured Workloads Reader (roles/assuredworkloads.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.instanceTemplates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datafusion.instances.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
			"Cloud Data Fusion Viewer (roles/datafusion.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataproc.autoscalingPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"redis.instances.updateAuth": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
		},
		"container.jobs.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataproc.autoscalingPolicies.setIamPolicy": {
			"Owner (roles/owner)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"firebasedatabase.instances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Realtime Database Admin (roles/firebasedatabase.admin)",
		},
		"automl.models.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudjobdiscovery.jobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
		},
		"cloudvolumesgcp-api.netapp.com/snapshots.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
		},
		"compute.projects.setUsageExportBucket": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.csiNodeInfos.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"healthcare.userDataMappings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
		},
		"riskmanager.reports.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
		},
		"aiplatform.featurestores.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Instance Creator (roles/aiplatform.featurestoreInstanceCreator)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.backendBuckets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.regions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Build Integrations Owner (roles/cloudbuild.integrationsOwner)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"iap.tunnelZones.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"aiplatform.edgeDeviceDebugInfo.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.models.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.regionNetworkEndpointGroups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"logging.buckets.undelete": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"privateca.certificateAuthorities.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"CA Service Admin (roles/privateca.admin)",
		},
		"privateca.certificateAuthorities.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"pubsublite.subscriptions.setCursor": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Subscriber (roles/pubsublite.subscriber)",
		},
		"artifactregistry.repositories.deleteArtifacts": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.examples.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"firebaseauth.users.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Firebase Authentication Viewer (roles/firebaseauth.viewer)",
			"Identity Platform Admin (roles/identityplatform.admin)",
			"Identity Platform Viewer (roles/identityplatform.viewer)",
			"Identity Toolkit Admin (roles/identitytoolkit.admin)",
			"Identity Toolkit Viewer (roles/identitytoolkit.viewer)",
		},
		"integrations.apigeeCertificates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
		},
		"logging.notificationRules.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"container.pods.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"gameservices.gameServerClusters.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"secretmanager.versions.access": {
			"Owner (roles/owner)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Secret Accessor (roles/secretmanager.secretAccessor)",
		},
		"visualinspection.images.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"compute.licenseCodes.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.regionHealthChecks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.snapshots.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebase.links.create": {
			"Owner (roles/owner)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"spanner.instances.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
		},
		"aiplatform.entityTypes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store Resource Viewer (roles/aiplatform.featurestoreResourceViewer)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"billing.accounts.get": {
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
			"Billing Account User (roles/billing.user)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Data Processing Controls Resource Admin (roles/dataprocessing.admin)",
			"BigQuery Recommender Billing Account Admin (roles/recommender.bigQueryCapacityCommitmentsBillingAccountAdmin)",
			"BigQuery Recommender Billing Account Viewer (roles/recommender.bigQueryCapacityCommitmentsBillingAccountViewer)",
			"Billing Account Usage Commitment Recommender Admin (roles/recommender.billingAccountCudAdmin)",
			"Billing Account Usage Commitment Recommender Viewer (roles/recommender.billingAccountCudViewer)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"cloudsql.databases.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.instanceGroupManagers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"transcoder.jobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Transcoder Admin (roles/transcoder.admin)",
			"Transcoder Viewer (roles/transcoder.viewer)",
		},
		"aiplatform.modelEvaluations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudtranslate.glossaries.predict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Translation Hub Admin (roles/translationhub.admin)",
			"Translation Hub Portal User (roles/translationhub.portalUser)",
		},
		"firebaserules.releases.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
		},
		"vmwareengine.services.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VMware Engine Service Admin (roles/vmwareengine.vmwareengineAdmin)",
		},
		"certificatemanager.certmapentries.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"compute.targetHttpProxies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Web Security Scanner Service Agent (roles/websecurityscanner.serviceAgent)",
		},
		"deploymentmanager.typeProviders.listTypes": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"apigee.sharedflows.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"assuredworkloads.workload.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
		},
		"dialogflow.securitySettings.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"privateca.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"servicenetworking.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Networking Admin (roles/servicenetworking.networksAdmin)",
		},
		"source.repos.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Source Repository Administrator (roles/source.admin)",
		},
		"vmmigration.utilizationReports.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"bigquery.connections.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Connection Admin (roles/bigquery.connectionAdmin)",
			"BigQuery Connection User (roles/bigquery.connectionUser)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"compute.urlMaps.validate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebase.playLinks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"runtimeconfig.variables.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"servicebroker.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"compute.regionBackendServices.setSecurityPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"gameservices.gameServerClusters.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
		},
		"iap.projects.updateSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"IAP Settings Admin (roles/iap.settingsAdmin)",
		},
		"apigee.hostqueries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
		},
		"bigtable.appProfiles.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"billing.subscriptions.get": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
		},
		"certificatemanager.dnsauthorizations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"cloudsql.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"monitoring.slos.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Services Editor (roles/monitoring.servicesEditor)",
		},
		"networksecurity.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"cloudkms.importJobs.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"connectors.connections.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebaserules.releases.getExecutable": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
		},
		"notebooks.runtimes.switch": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"recommender.loggingProductSuggestionContainerRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
		},
		"dlp.inspectTemplates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Inspect Templates Editor (roles/dlp.inspectTemplatesEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"privateca.caPools.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"recommender.computeImageIdleResourceInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"apigateway.apiconfigs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudasset.assets.exportComputeBackendServices": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.backendConfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.pods.attach": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.conversationProfiles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"compute.globalNetworkEndpointGroups.detachNetworkEndpoints": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"healthcare.dicomStores.dicomWebDelete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
		},
		"healthcare.consents.reject": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
		},
		"notebooks.runtimes.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"aiplatform.specialistPools.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"baremetalsolution.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Instances Admin (roles/baremetalsolution.instancesadmin)",
		},
		"dialogflow.modelEvaluations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebasenotifications.messages.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Cloud Messaging Admin (roles/firebasenotifications.admin)",
			"Firebase Cloud Messaging Viewer (roles/firebasenotifications.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.consents.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
		},
		"secretmanager.versions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Secret Version Manager (roles/secretmanager.secretVersionManager)",
			"Secret Manager Viewer (roles/secretmanager.viewer)",
		},
		"baremetalsolution.networks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Networks Admin (roles/baremetalsolution.networksadmin)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
		},
		"compute.interconnectAttachments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.leases.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dns.managedZones.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"policysimulator.replays.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Simulator Admin (roles/policysimulator.admin)",
		},
		"ml.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Operation Owner (roles/ml.operationOwner)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"ondemandscanning.scans.listVulnerabilities": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"On-Demand Scanning Admin (roles/ondemandscanning.admin)",
		},
		"apigee.portals.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Portal Admin (roles/apigee.portalAdmin)",
		},
		"bigquery.reservations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"compute.snapshots.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.podSecurityPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebaseml.compressionjobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
			"Firebase ML Kit Viewer (roles/firebaseml.viewer)",
		},
		"videostitcher.vodStitchDetails.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"firebasenotifications.messages.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Cloud Messaging Admin (roles/firebasenotifications.admin)",
		},
		"managedidentities.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
		},
		"ondemandscanning.operations.wait": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"On-Demand Scanning Admin (roles/ondemandscanning.admin)",
		},
		"serviceusage.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
			"Service Usage Consumer (roles/serviceusage.serviceUsageConsumer)",
			"Service Usage Viewer (roles/serviceusage.serviceUsageViewer)",
		},
		"spanner.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Backup Writer (roles/spanner.backupWriter)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database Reader (roles/spanner.databaseReader)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
			"Cloud Spanner Viewer (roles/spanner.viewer)",
		},
		"apigee.hoststats.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"container.namespaces.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebasedatabase.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Realtime Database Admin (roles/firebasedatabase.admin)",
			"Firebase Realtime Database Viewer (roles/firebasedatabase.viewer)",
		},
		"resourcemanager.folders.setIamPolicy": {
			"Security Admin (roles/iam.securityAdmin)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder IAM Admin (roles/resourcemanager.folderIamAdmin)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
		},
		"pubsublite.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Subscriber (roles/pubsublite.subscriber)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"resourcemanager.folders.list": {
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Assured Workloads Reader (roles/assuredworkloads.reader)",
			"Browser (roles/browser)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Creator (roles/resourcemanager.folderCreator)",
			"Folder Editor (roles/resourcemanager.folderEditor)",
			"Folder Viewer (roles/resourcemanager.folderViewer)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
		},
		"apigateway.apiconfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
		},
		"apigee.proxyrevisions.deploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"cloudscheduler.jobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
		},
		"connectors.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
		},
		"genomics.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Genomics Admin (roles/genomics.admin)",
			"Genomics Editor (roles/genomics.editor)",
			"Genomics Pipelines Runner (roles/genomics.pipelinesRunner)",
			"Genomics Viewer (roles/genomics.viewer)",
		},
		"resourcemanager.projects.move": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Mover (roles/resourcemanager.folderMover)",
			"Project Mover (roles/resourcemanager.projectMover)",
		},
		"translationhub.portals.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Translation Hub Admin (roles/translationhub.admin)",
			"Translation Hub Portal User (roles/translationhub.portalUser)",
		},
		"apigee.keystorealiases.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigee.portals.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Portal Admin (roles/apigee.portalAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.images.getFromFamily": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Image User (roles/compute.imageUser)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datacatalog.entryGroups.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
		},
		"dialogflow.agents.search": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"billing.resourceAssociations.create": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account User (roles/billing.user)",
		},
		"contactcenterinsights.issues.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
		},
		"container.deployments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"ml.studies.setIamPolicy": {
			"Owner (roles/owner)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
		},
		"recommender.computeAddressIdleResourceRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
		},
		"integrations.securityIntegTempVers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"livestream.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
		},
		"vmmigration.utilizationReports.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"compute.httpHealthChecks.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"run.services.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
		},
		"dns.responsePolicyRules.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"domains.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Domains Admin (roles/domains.admin)",
			"Cloud Domains Viewer (roles/domains.viewer)",
		},
		"binaryauthorization.continuousValidationConfig.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Policy Administrator (roles/binaryauthorization.policyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudbuild.workerpools.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Build WorkerPool User (roles/cloudbuild.workerPoolUser)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
		},
		"compute.licenses.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebaseabt.experiments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
			"Firebase A/B Testing Viewer (roles/firebaseabt.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebaserules.releases.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
			"Firebase Rules Viewer (roles/firebaserules.viewer)",
		},
		"networksecurity.serverTlsPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"accesscontextmanager.accessZones.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"cloudtoolresults.steps.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"compute.targetPools.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastore.indexes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Datastore Index Admin (roles/datastore.indexAdmin)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"dlp.jobTriggers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Job Triggers Editor (roles/dlp.jobTriggersEditor)",
			"DLP Job Triggers Reader (roles/dlp.jobTriggersReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.consents.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.nasJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudprivatecatalogproducer.settings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"compute.snapshots.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.certificateSigningRequests.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"gcp.redisenterprise.com/databases.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
			"Redis Enterprise Cloud Viewer (roles/redisenterprisecloud.viewer)",
		},
		"compute.organizations.disableXpnResource": {
			"Compute Admin (roles/compute.admin)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.serviceAccounts.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"contactcenterinsights.settings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"dlp.inspectTemplates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Inspect Templates Editor (roles/dlp.inspectTemplatesEditor)",
			"DLP Inspect Templates Reader (roles/dlp.inspectTemplatesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"gameservices.gameServerDeployments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"billing.subscriptions.create": {
			"Billing Account Administrator (roles/billing.admin)",
		},
		"dlp.inspectTemplates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Inspect Templates Editor (roles/dlp.inspectTemplatesEditor)",
			"DLP Inspect Templates Reader (roles/dlp.inspectTemplatesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"monitoring.notificationChannels.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring NotificationChannel Editor (roles/monitoring.notificationChannelEditor)",
		},
		"spanner.databases.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Backup Writer (roles/spanner.backupWriter)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
			"Cloud Spanner Viewer (roles/spanner.viewer)",
		},
		"cloudkms.cryptoKeyVersions.useToDecryptViaDelegation": {
			"Owner (roles/owner)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS CryptoKey Decrypter Via Delegation (roles/cloudkms.cryptoKeyDecrypterViaDelegation)",
			"Cloud KMS CryptoKey Encrypter/Decrypter Via Delegation (roles/cloudkms.cryptoKeyEncrypterDecrypterViaDelegation)",
		},
		"cloudtranslate.generalModels.docPredict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
		},
		"container.thirdPartyObjects.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.volumeSnapshotClasses.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"notebooks.schedules.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"vmmigration.sources.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"datastream.connectionProfiles.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"dialogflow.participants.analyzeContent": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"firebasedynamiclinks.domains.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
		},
		"logging.views.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"securitycenter.userinterfacemetadata.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Asset Security Marks Writer (roles/securitycenter.assetSecurityMarksWriter)",
			"Security Center Assets Discovery Runner (roles/securitycenter.assetsDiscoveryRunner)",
			"Security Center Assets Viewer (roles/securitycenter.assetsViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Finding Security Marks Writer (roles/securitycenter.findingSecurityMarksWriter)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Center Findings State Setter (roles/securitycenter.findingsStateSetter)",
			"Security Center Findings Viewer (roles/securitycenter.findingsViewer)",
			"Security Center Findings Workflow State Setter (roles/securitycenter.findingsWorkflowStateSetter)",
			"Security Center Notification Configurations Editor (roles/securitycenter.notificationConfigEditor)",
			"Security Center Notification Configurations Viewer (roles/securitycenter.notificationConfigViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
			"Security Center Sources Admin (roles/securitycenter.sourcesAdmin)",
			"Security Center Sources Editor (roles/securitycenter.sourcesEditor)",
			"Security Center Sources Viewer (roles/securitycenter.sourcesViewer)",
		},
		"apigee.queries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
		},
		"compute.targetGrpcProxies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.nodes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"gameservices.realms.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.entityTypes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"containeranalysis.notes.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"proximitybeacon.beacons.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.participants.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"file.instances.restore": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
		},
		"logging.queries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.artifacts.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudiot.devices.updateConfig": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Device Controller (roles/cloudiot.deviceController)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
		},
		"cloudsupport.accounts.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Support Account Administrator (roles/cloudsupport.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.licenses.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"datafusion.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
		},
		"tpu.nodes.start": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"TPU Admin (roles/tpu.admin)",
		},
		"visualinspection.annotationSpecs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"cloudasset.assets.exportComputeTargetHttpsProxies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.disks.addResourcePolicies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.regionHealthCheckServices.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.entityTypes.readFeatureValues": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Data Viewer (roles/aiplatform.featurestoreDataViewer)",
			"Vertex AI Feature Store Data Writer (roles/aiplatform.featurestoreDataWriter)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.executions.queryExecutionInputsAndOutputs": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.organizations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"baremetalsolution.volumes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
		},
		"cloudasset.assets.exportCloudkmsCryptoKeyVersions": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.securityPolicies.move": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"errorreporting.groups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Error Reporting Viewer (roles/errorreporting.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.features.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudsupport.accounts.setIamPolicy": {
			"Owner (roles/owner)",
			"Support Account Administrator (roles/cloudsupport.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.targetHttpProxies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dlp.estimates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Cost Estimation (roles/dlp.estimatesAdmin)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"privateca.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"serviceusage.services.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Actions Admin (roles/actions.Admin)",
			"Actions Viewer (roles/actions.Viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Assured Workloads Service Agent (roles/assuredworkloads.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"DLP User (roles/dlp.user)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
			"Monitoring Service Agent (roles/monitoring.notificationServiceAgent)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
			"Cloud Memorystore Redis Viewer (roles/redis.viewer)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
			"Service Usage Consumer (roles/serviceusage.serviceUsageConsumer)",
		},
		"aiplatform.trials.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apikeys.keys.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"API Keys Admin (roles/serviceusage.apiKeysAdmin)",
			"API Keys Viewer (roles/serviceusage.apiKeysViewer)",
		},
		"deploymentmanager.deployments.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"privateca.certificateAuthorities.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"recommender.bigqueryCapacityCommitmentsRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Slot Recommender Admin (roles/recommender.bigQueryCapacityCommitmentsAdmin)",
			"BigQuery Recommender Billing Account Admin (roles/recommender.bigQueryCapacityCommitmentsBillingAccountAdmin)",
			"BigQuery Recommender Project Admin (roles/recommender.bigQueryCapacityCommitmentsProjectAdmin)",
		},
		"apigee.exports.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
		},
		"compute.securityPolicies.copyRules": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataplex.assets.writeData": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Data Owner (roles/dataplex.dataOwner)",
			"Dataplex Data Writer (roles/dataplex.dataWriter)",
		},
		"compute.httpHealthChecks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.phoneNumberOrders.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"dialogflow.transitionRouteGroups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"iap.web.getSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"IAP Settings Admin (roles/iap.settingsAdmin)",
		},
		"run.services.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
		},
		"container.localSubjectAccessReviews.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"metastore.backups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
		},
		"retail.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"visualinspection.modules.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"apigee.keystores.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.configMaps.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebaseml.compressionjobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
		},
		"pubsub.subscriptions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
		},
		"recommender.loggingProductSuggestionContainerInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
		},
		"apigee.envgroupattachments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"compute.instances.startWithEncryptionKey": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"deploymentmanager.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"logging.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"managedidentities.peerings.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
			"Google Cloud Managed Identities Peering Viewer (roles/managedidentities.peeringViewer)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"cloudtasks.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
			"Cloud Tasks Viewer (roles/cloudtasks.viewer)",
		},
		"dns.networks.targetWithPeeringZone": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Peer (roles/dns.peer)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"firebasecrashlytics.issues.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
			"Firebase Crashlytics Viewer (roles/firebasecrashlytics.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"storage.hmacKeys.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Storage HMAC Key Admin (roles/storage.hmacKeyAdmin)",
		},
		"cloudasset.assets.exportSecretManagerSecrets": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.interconnectAttachments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.nodeGroups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"automlrecommendations.recommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"cloudsecurityscanner.scans.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"securitycenter.sources.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Center Findings Viewer (roles/securitycenter.findingsViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Sources Admin (roles/securitycenter.sourcesAdmin)",
			"Security Center Sources Editor (roles/securitycenter.sourcesEditor)",
			"Security Center Sources Viewer (roles/securitycenter.sourcesViewer)",
		},
		"privateca.caPools.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"accesscontextmanager.accessPolicies.setIamPolicy": {
			"Owner (roles/owner)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"certificatemanager.certmaps.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"container.thirdPartyResources.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataprocessing.datasources.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Processing Controls Resource Admin (roles/dataprocessing.admin)",
			"Data Processing Controls Data Source Manager (roles/dataprocessing.dataSourceManager)",
		},
		"iap.webServiceVersions.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"compute.targetHttpProxies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.agents.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"networkservices.endpointPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"resourcemanager.organizations.setIamPolicy": {
			"Security Admin (roles/iam.securityAdmin)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
		},
		"compute.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dataplex.entities.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
		},
		"file.backups.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
		},
		"gameservices.realms.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
		},
		"healthcare.datasets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
		},
		"dialogflow.contexts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"networksecurity.clientTlsPolicies.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"remotebuildexecution.botsessions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Remote Build Execution Service Agent (roles/remotebuildexecution.serviceAgent)",
			"Remote Build Execution Worker (roles/remotebuildexecution.worker)",
		},
		"accesscontextmanager.accessPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"compute.images.useReadOnly": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Image User (roles/compute.imageUser)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.endpoints.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.podPresets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.roleBindings.update": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"artifactregistry.tags.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportComputeInterconnect": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebasepredictions.predictions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Predictions Admin (roles/firebasepredictions.admin)",
		},
		"commerceprice.privateoffers.publish": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Commerce Price Management Private Offers Admin (roles/commercepricemanagement.privateOffersAdmin)",
		},
		"datastream.streams.resume": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"documentai.labelerPools.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"ml.versions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
		},
		"videostitcher.slates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"apigee.tracesessions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.backendConfigs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"datastream.privateConnections.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"iap.tunnel.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"monitoring.metricsScopes.link": {
			"Owner (roles/owner)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Metrics Scopes Admin (roles/monitoring.metricsScopesAdmin)",
		},
		"automlrecommendations.catalogs.getStats": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"datastore.databases.create": {
			"Owner (roles/owner)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"integrations.apigeeSfdcInstances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"servicebroker.bindings.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
		},
		"aiplatform.endpoints.undeploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"dataplex.environments.execute": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
		},
		"healthcare.annotationStores.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
		},
		"compute.regionBackendServices.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"visualinspection.solutionArtifacts.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"logging.notificationRules.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Error Reporting Viewer (roles/errorreporting.viewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"servicedirectory.endpoints.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"compute.sslCertificates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Web Security Scanner Service Agent (roles/websecurityscanner.serviceAgent)",
		},
		"dataflow.jobs.updateContents": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
		},
		"datapipelines.pipelines.stop": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data pipelines Admin (roles/datapipelines.admin)",
		},
		"firebasestorage.buckets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Storage for Firebase Admin (roles/firebasestorage.admin)",
			"Cloud Storage for Firebase Viewer (roles/firebasestorage.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"gkehub.memberships.generateConnectManifest": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"apigee.developerapps.manage": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"cloudonefs.isiloncloud.com/fileshares.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
		},
		"cloudprivatecatalog.targets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Consumer (roles/cloudprivatecatalog.consumer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"automl.locations.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.serviceAccounts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"binaryauthorization.attestors.setIamPolicy": {
			"Owner (roles/owner)",
			"Binary Authorization Attestor Admin (roles/binaryauthorization.attestorsAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"dataplex.environments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"notebooks.runtimes.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"recommender.monitoringProductSuggestionComputeInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
		},
		"pubsub.schemas.attach": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
		},
		"apigateway.apis.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudtasks.queues.pause": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
		},
		"container.thirdPartyObjects.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataplex.lakes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"monitoring.uptimeCheckConfigs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Uptime Check Configuration Editor (roles/monitoring.uptimeCheckConfigEditor)",
		},
		"compute.resourcePolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"serviceusage.apiKeys.revert": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"API Keys Admin (roles/serviceusage.apiKeysAdmin)",
		},
		"cloudtoolresults.settings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"compute.instances.getShieldedInstanceIdentity": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"networkservices.httpfilters.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"bigtable.backups.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"contactcenterinsights.analyses.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"container.storageVersionMigrations.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsql.instances.listServerCas": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.snapshots.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"genomics.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Genomics Admin (roles/genomics.admin)",
			"Genomics Editor (roles/genomics.editor)",
			"Genomics Pipelines Runner (roles/genomics.pipelinesRunner)",
			"Genomics Viewer (roles/genomics.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudkms.cryptoKeyVersions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS Viewer (roles/cloudkms.viewer)",
		},
		"compute.networkEndpointGroups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"documentai.processors.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"gkehub.features.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"healthcare.hl7V2Messages.ingest": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Healthcare HL7v2 Message Ingest (roles/healthcare.hl7V2Ingest)",
		},
		"run.services.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"compute.regionUrlMaps.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.certificateSigningRequests.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.pods.evict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataplex.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
		},
		"ml.versions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
			"AI Platform Model User (roles/ml.modelUser)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"dataplex.assets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"vmmigration.migratingVms.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"aiplatform.models.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.instances.updateSecurity": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute packet mirroring admin (roles/compute.packetMirroringAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.routes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
		},
		"notebooks.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"aiplatform.executions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.readsessions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Read Session User (roles/bigquery.readSessionUser)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"container.podTemplates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"securitycenter.eventthreatdetectionsettings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"servicedirectory.namespaces.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Service Directory Admin (roles/servicedirectory.admin)",
		},
		"container.replicationControllers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datafusion.instances.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"dataplex.content.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.knowledgeBases.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"dns.policies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"aiplatform.featurestores.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Instance Creator (roles/aiplatform.featurestoreInstanceCreator)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store Resource Viewer (roles/aiplatform.featurestoreResourceViewer)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.indexes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudsupport.techCases.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tech Support Editor (roles/cloudsupport.techSupportEditor)",
		},
		"healthcare.hl7V2Stores.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
		},
		"integrations.apigeeSfdcChannels.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
			"Apigee Integration Viewer (roles/integrations.apigeeIntegrationsViewer)",
		},
		"remotebuildexecution.instances.delete": {
			"Owner (roles/owner)",
			"Remote Build Execution Configuration Admin (roles/remotebuildexecution.configurationAdmin)",
		},
		"container.clusterRoles.escalate": {
			"Owner (roles/owner)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.updateInfos.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"networkconnectivity.spokes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"osconfig.osPolicyAssignments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"OSPolicyAssignment Admin (roles/osconfig.osPolicyAssignmentAdmin)",
			"OSPolicyAssignment Editor (roles/osconfig.osPolicyAssignmentEditor)",
			"OSPolicyAssignment Viewer (roles/osconfig.osPolicyAssignmentViewer)",
		},
		"spanner.databases.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
		},
		"certificatemanager.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudasset.assets.listOSInventories": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataproc.autoscalingPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
		},
		"iap.webServiceVersions.getSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"IAP Settings Admin (roles/iap.settingsAdmin)",
		},
		"memcache.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
		},
		"secretmanager.secrets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Secret Manager Admin (roles/secretmanager.admin)",
		},
		"apigee.flowhooks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudkms.cryptoKeyVersions.useToEncryptViaDelegation": {
			"Owner (roles/owner)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS CryptoKey Encrypter/Decrypter Via Delegation (roles/cloudkms.cryptoKeyEncrypterDecrypterViaDelegation)",
			"Cloud KMS CryptoKey Encrypter Via Delegation (roles/cloudkms.cryptoKeyEncrypterViaDelegation)",
		},
		"container.podTemplates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebasecrashlytics.issues.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
		},
		"healthcare.userDataMappings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
		},
		"dns.policies.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"source.repos.updateProjectConfig": {
			"Owner (roles/owner)",
			"Source Repository Administrator (roles/source.admin)",
		},
		"visualinspection.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"proximitybeacon.beacons.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Beacon Attachment Editor (roles/proximitybeacon.attachmentEditor)",
			"Beacon Attachment Publisher (roles/proximitybeacon.attachmentPublisher)",
			"Beacon Editor (roles/proximitybeacon.beaconEditor)",
		},
		"apigateway.gateways.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"ApiGateway Admin (roles/apigateway.admin)",
		},
		"automl.models.predict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Predictor (roles/automl.predictor)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"DocumentAI Core Service Agent (roles/documentaicore.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Translation Hub Admin (roles/translationhub.admin)",
			"Translation Hub Portal User (roles/translationhub.portalUser)",
		},
		"container.horizontalPodAutoscalers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataflow.jobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
		},
		"datafusion.instances.upgrade": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
		},
		"logging.views.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"pubsublite.topics.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
		},
		"redis.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
			"Cloud Memorystore Redis Viewer (roles/redis.viewer)",
		},
		"aiplatform.trials.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.caches.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudtranslate.glossaries.batchPredict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
		},
		"container.persistentVolumes.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datastream.objects.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"spanner.instanceOperations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
		},
		"aiplatform.modelDeploymentMonitoringJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.datastores.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
		},
		"container.limitRanges.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datamigration.migrationjobs.stop": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"networksecurity.serverTlsPolicies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"aiplatform.batchPredictionJobs.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"dataplex.environments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"dialogflow.conversationModels.deploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"earlyaccesscenter.customerAllowlists.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Early Access Center Administrator (roles/earlyaccesscenter.admin)",
			"Early Access Center Viewer (roles/earlyaccesscenter.viewer)",
		},
		"healthcare.consentStores.checkDataAccess": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
		},
		"consumerprocurement.orders.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Billing Account Administrator (roles/billing.admin)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
		},
		"aiplatform.dataLabelingJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"appengine.services.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"bigquery.connections.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Connection Admin (roles/bigquery.connectionAdmin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"clouddebugger.debuggees.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Debugger Agent (roles/clouddebugger.agent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"cloudprivatecatalogproducer.targets.unassociate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"firebaseml.models.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
		},
		"iam.roles.delete": {
			"Owner (roles/owner)",
			"Organization Role Administrator (roles/iam.organizationRoleAdmin)",
			"Role Administrator (roles/iam.roleAdmin)",
		},
		"aiplatform.models.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.apiproductattributes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"compute.snapshots.createTagBinding": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"container.resourceQuotas.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.storageVersionMigrations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"compute.machineImages.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.securityPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"connectors.providers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.annotationSpecs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.humanInTheLoops.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"certificatemanager.certmaps.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"clouddeploy.deliveryPipelines.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
		},
		"composer.environments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
		},
		"iap.webTypes.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"livestream.inputs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
		},
		"managedidentities.domains.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
		},
		"runtimeconfig.waiters.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"servicebroker.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"compute.instanceTemplates.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.jobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datamigration.migrationjobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataproc.tasks.reportStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Worker (roles/dataproc.worker)",
		},
		"networkconnectivity.hubs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
		},
		"certificatemanager.certmaps.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"compute.instances.addAccessConfig": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"resourcemanager.tagKeys.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
		},
		"bigtable.appProfiles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.instances.setMetadata": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
			"Google Cloud Security Response Service Agent (roles/securitycenter.securityResponseServiceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.persistentVolumeClaims.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.annotationStores.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
			"Healthcare Annotation Reader (roles/healthcare.annotationReader)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
			"Healthcare Annotation Store Viewer (roles/healthcare.annotationStoreViewer)",
		},
		"logging.queries.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"resourcemanager.organizations.getIamPolicy": {
			"Organization Role Administrator (roles/iam.organizationRoleAdmin)",
			"Organization Role Viewer (roles/iam.organizationRoleViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
		},
		"vpcaccess.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Serverless VPC Access Admin (roles/vpcaccess.admin)",
			"Serverless VPC Access User (roles/vpcaccess.user)",
			"Serverless VPC Access Viewer (roles/vpcaccess.viewer)",
		},
		"securitycenter.findings.listFindingPropertyNames": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Center Findings Viewer (roles/securitycenter.findingsViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"bigtable.backups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"clouddebugger.breakpoints.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Debugger User (roles/clouddebugger.user)",
		},
		"iap.webServiceVersions.accessViaIAP": {
			"IAP-secured Web App User (roles/iap.httpsResourceAccessor)",
		},
		"privateca.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"recommender.computeDiskIdleResourceRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"securitycenter.eventthreatdetectionsettings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"appengine.applications.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Viewer (roles/appengine.appViewer)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Cloud Scheduler Job Runner (roles/cloudscheduler.jobRunner)",
			"Cloud Scheduler Viewer (roles/cloudscheduler.viewer)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Cloud Datastore Import Export Admin (roles/datastore.importExportAdmin)",
			"Cloud Datastore Index Admin (roles/datastore.indexAdmin)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Web Security Scanner Service Agent (roles/websecurityscanner.serviceAgent)",
		},
		"cloudasset.assets.exportComputeRegionAutoscaler": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.diskTypes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.clusters.getCredentials": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"gkehub.fleet.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"notebooks.environments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"aiplatform.humanInTheLoops.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportComputeProjects": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudvolumesgcp-api.netapp.com/snapshots.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
		},
		"container.storageStates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"domains.registrations.configureContact": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Domains Admin (roles/domains.admin)",
		},
		"eventarc.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Eventarc Viewer (roles/eventarc.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"firebaseappcheck.services.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
			"Firebase App Check Viewer (roles/firebaseappcheck.viewer)",
		},
		"livestream.channels.start": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"apigee.envgroupattachments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"apigee.instances.reportStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Runtime Agent (roles/apigee.runtimeAgent)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"dataflow.streamingWorkItems.getData": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataflow Worker (roles/dataflow.worker)",
		},
		"recommender.commitmentUtilizationInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Usage Commitment Recommender Admin (roles/recommender.billingAccountCudAdmin)",
			"Project Usage Commitment Recommender Admin (roles/recommender.projectCudAdmin)",
		},
		"tpu.nodes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"TPU Admin (roles/tpu.admin)",
			"TPU Viewer (roles/tpu.viewer)",
		},
		"runtimeconfig.variables.watch": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"cloudasset.assets.exportDnsManagedZones": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.clusters.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Cluster Admin (roles/container.clusterAdmin)",
			"Kubernetes Engine Cluster Viewer (roles/container.clusterViewer)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.ingresses.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.storageStates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datalabeling.datasets.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
		},
		"aiplatform.tensorboardExperiments.write": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.endpointSlices.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.secrets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"proximitybeacon.attachments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Beacon Attachment Editor (roles/proximitybeacon.attachmentEditor)",
			"Beacon Attachment Viewer (roles/proximitybeacon.attachmentViewer)",
		},
		"servicebroker.catalogs.validate": {
			"Owner (roles/owner)",
			"Service Broker Admin (roles/servicebroker.admin)",
		},
		"artifactregistry.repositories.uploadArtifacts": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"datastore.databases.delete": {
			"Owner (roles/owner)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"iam.googleapis.com/workloadIdentityPoolProviders.create": {
			"Owner (roles/owner)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
		},
		"dialogflow.pages.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"servicebroker.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"compute.routers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"osconfig.osPolicyAssignments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"OSPolicyAssignment Admin (roles/osconfig.osPolicyAssignmentAdmin)",
		},
		"gkehub.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Agent (roles/anthos.serviceAgent)",
			"Anthos Audit Service Agent (roles/anthosaudit.serviceAgent)",
			"Anthos Config Management Service Agent (roles/anthosconfigmanagement.serviceAgent)",
			"Anthos Identity Service Agent (roles/anthosidentityservice.serviceAgent)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"App Development Experience Service Agent (roles/appdevelopmentexperience.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Multi-cluster metering Service Agent (roles/multiclustermetering.serviceAgent)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Workload Certificate Service Agent (roles/workloadcertificate.serviceAgent)",
		},
		"networkservices.endpointConfigSelectors.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"storage.buckets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"actions.agentVersions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Actions Admin (roles/actions.Admin)",
			"Actions Viewer (roles/actions.Viewer)",
		},
		"cloudkms.importJobs.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudonefs.isiloncloud.com/clusters.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
		},
		"compute.instances.setScheduling": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"deploymentmanager.typeProviders.getType": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"aiplatform.customJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"securitycenter.sources.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Sources Admin (roles/securitycenter.sourcesAdmin)",
			"Security Center Sources Editor (roles/securitycenter.sourcesEditor)",
		},
		"storage.buckets.update": {
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Google Cloud Security Response Service Agent (roles/securitycenter.securityResponseServiceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportComputeRegionDisk": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudtranslate.glossaries.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Translation Hub Admin (roles/translationhub.admin)",
		},
		"compute.interconnectAttachments.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.pods.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"managedidentities.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
			"Google Cloud Managed Identities Peering Viewer (roles/managedidentities.peeringViewer)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"fleetengine.vehicles.updateLocation": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Fleet Engine Driver SDK User (roles/fleetengine.driverSdkUser)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
		},
		"gkehub.memberships.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"aiplatform.tensorboardRuns.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"clientauthconfig.clients.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"compute.regionOperations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dataproc.clusters.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"essentialcontacts.contacts.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Essential Contacts Admin (roles/essentialcontacts.admin)",
		},
		"container.ingresses.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"documentai.datasets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"gkemulticloud.awsClusters.generateAccessToken": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
		},
		"secretmanager.versions.disable": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Secret Version Manager (roles/secretmanager.secretVersionManager)",
		},
		"compute.targetHttpsProxies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.storageVersionMigrations.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebase.billingPlans.update": {
			"Owner (roles/owner)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"osconfig.patchDeployments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"PatchDeployment Admin (roles/osconfig.patchDeploymentAdmin)",
		},
		"spanner.instanceConfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Viewer (roles/spanner.viewer)",
		},
		"bigtable.tables.generateConsistencyToken": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"dataproc.agents.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Worker (roles/dataproc.worker)",
		},
		"recommender.iamServiceAccountInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
		},
		"riskmanager.policies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
			"Risk Manager Viewer (roles/riskmanager.viewer)",
		},
		"cloudasset.assets.exportCloudresourcemanagerOrganizations": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.fhirStores.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
		},
		"redis.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
			"Cloud Memorystore Redis Viewer (roles/redis.viewer)",
		},
		"tpu.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"TPU Admin (roles/tpu.admin)",
			"TPU Viewer (roles/tpu.viewer)",
		},
		"cloudasset.assets.exportCloudresourcemanagerFolders": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.vpnTunnels.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.volumeSnapshots.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"recaptchaenterprise.keys.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"reCAPTCHA Enterprise Admin (roles/recaptchaenterprise.admin)",
			"reCAPTCHA Enterprise Viewer (roles/recaptchaenterprise.viewer)",
		},
		"visualinspection.solutions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"serviceusage.services.disable": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
			"Quota Administrator (roles/servicemanagement.quotaAdmin)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
		},
		"compute.instances.updateNetworkInterface": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.runtimeClasses.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataproc.clusters.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"dataproc.workflowTemplates.setIamPolicy": {
			"Owner (roles/owner)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"remotebuildexecution.workerpools.delete": {
			"Owner (roles/owner)",
			"Remote Build Execution Configuration Admin (roles/remotebuildexecution.configurationAdmin)",
		},
		"container.events.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dlp.tableDataProfiles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Data Profiles Reader (roles/dlp.dataProfilesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Table Data Profiles Reader (roles/dlp.tableDataProfilesReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"monitoring.groups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"securitycenter.notificationconfig.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Notification Configurations Editor (roles/securitycenter.notificationConfigEditor)",
			"Security Center Notification Configurations Viewer (roles/securitycenter.notificationConfigViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"artifactregistry.repositories.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"recommender.cloudsqlInstanceMemoryUsageInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
		},
		"container.daemonSets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebaseappcheck.debugTokens.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
		},
		"bigtable.tables.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.disks.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.vpnTunnels.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.thirdPartyObjects.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"binaryauthorization.attestors.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Binary Authorization Attestor Admin (roles/binaryauthorization.attestorsAdmin)",
			"Binary Authorization Attestor Editor (roles/binaryauthorization.attestorsEditor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
		},
		"compute.addresses.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Web Security Scanner Service Agent (roles/websecurityscanner.serviceAgent)",
		},
		"datastore.entities.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
		},
		"bigtable.backups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"compute.commitments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.externalVpnGateways.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"integrations.apigeeAuthConfigs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
		},
		"servicebroker.instances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"dataproc.clusters.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"logging.buckets.copyLogEntries": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Logging Admin (roles/logging.admin)",
		},
		"servicedirectory.namespaces.associatePrivateZone": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
		},
		"vmmigration.cutoverJobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"accesscontextmanager.gcpUserAccessBindings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Access Binding Admin (roles/accesscontextmanager.gcpAccessAdmin)",
		},
		"run.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"container.csiNodeInfos.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datastream.locations.fetchStaticIps": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"runtimeconfig.waiters.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"apigee.developers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
		},
		"clientauthconfig.brands.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
			"OAuth Config Viewer (roles/oauthconfig.viewer)",
		},
		"compute.regionTargetHttpProxies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.sslCertificates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"consumerprocurement.orderAttributions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
			"Consumer Procurement Order Viewer (roles/consumerprocurement.orderViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkservices.serviceBindings.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"spanner.databaseOperations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"clouddebugger.breakpoints.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Debugger Agent (roles/clouddebugger.agent)",
			"Cloud Debugger User (roles/clouddebugger.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"clouddeploy.deliveryPipelines.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
		},
		"compute.regionBackendServices.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dns.changes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"dns.responsePolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"accesscontextmanager.accessPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
		},
		"recommender.computeInstanceIdleResourceRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
		},
		"aiplatform.customJobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.studies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudprivatecatalogproducer.producerCatalogs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"dialogflow.sessionEntityTypes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudmessaging.messages.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase SDK Provisioning Service Agent (roles/firebase.sdkProvisioningServiceAgent)",
			"Firebase Cloud Messaging API Admin (roles/firebasecloudmessaging.admin)",
		},
		"cloudtranslate.generalModels.batchPredict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
		},
		"storagetransfer.agentpools.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
		},
		"healthcare.annotationStores.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
			"Healthcare Annotation Reader (roles/healthcare.annotationReader)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
			"Healthcare Annotation Store Viewer (roles/healthcare.annotationStoreViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.consentStores.queryAccessibleData": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
		},
		"recommender.computeAddressIdleResourceRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"automl.annotations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"cloudsql.databases.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"cloudtasks.queues.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
		},
		"container.deployments.rollback": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"datalabeling.datasets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
		},
		"compute.networkEndpointGroups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.targetVpnGateways.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.namespaces.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gsuiteaddons.deployments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
			"Google Workspace Add-ons Reader (roles/gsuiteaddons.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"visualinspection.datasets.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"accessapproval.requests.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Approval Approver (roles/accessapproval.approver)",
			"Access Approval Viewer (roles/accessapproval.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudconfig.configs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Remote Config Admin (roles/cloudconfig.admin)",
			"Firebase Remote Config Viewer (roles/cloudconfig.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"compute.backendBuckets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.firewallPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"notebooks.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"pubsublite.reservations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
		},
		"spanner.databaseOperations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
		},
		"aiplatform.features.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Data Viewer (roles/aiplatform.featurestoreDataViewer)",
			"Vertex AI Feature Store Data Writer (roles/aiplatform.featurestoreDataWriter)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store Resource Viewer (roles/aiplatform.featurestoreResourceViewer)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"axt.labels.set": {
			"Access Transparency Admin (roles/axt.admin)",
		},
		"billing.accounts.removeFromOrganization": {
			"Billing Account Administrator (roles/billing.admin)",
		},
		"datastream.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"firebasedatabase.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Realtime Database Admin (roles/firebasedatabase.admin)",
			"Firebase Realtime Database Viewer (roles/firebasedatabase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datamigration.migrationjobs.promote": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"dataplex.tasks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
		},
		"integrations.apigeeSfdcChannels.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
		},
		"apigee.hostqueries.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"healthcare.consents.activate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
		},
		"cloudsql.sslCerts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"datastore.operations.get": {
			"Owner (roles/owner)",
			"Cloud Datastore Import Export Admin (roles/datastore.importExportAdmin)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"dialogflow.sessionEntityTypes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"file.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
		},
		"firebasepredictions.predictions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Predictions Admin (roles/firebasepredictions.admin)",
			"Firebase Predictions Viewer (roles/firebasepredictions.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.regions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"datamigration.migrationjobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"errorreporting.errorEvents.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Error Reporting Viewer (roles/errorreporting.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"monitoring.alertPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring AlertPolicy Editor (roles/monitoring.alertPolicyEditor)",
			"Monitoring AlertPolicy Viewer (roles/monitoring.alertPolicyViewer)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"threatdetection.sourceSettings.update": {
			"Owner (roles/owner)",
			"Threat Detection Settings Editor (roles/threatdetection.editor)",
		},
		"compute.disks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.nodeGroups.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"spanner.databases.beginOrRollbackReadWriteTransaction": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"pubsublite.reservations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"bigquery.routines.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"compute.healthChecks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.resourceQuotas.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.subjectAccessReviews.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataproc.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
		},
		"servicedirectory.endpoints.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"dialogflow.versions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"proximitybeacon.beacons.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Beacon Editor (roles/proximitybeacon.beaconEditor)",
		},
		"recommender.computeInstanceMachineTypeRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"remotebuildexecution.blobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Remote Build Execution Action Cache Writer (roles/remotebuildexecution.actionCacheWriter)",
			"Remote Build Execution Artifact Admin (roles/remotebuildexecution.artifactAdmin)",
			"Remote Build Execution Artifact Creator (roles/remotebuildexecution.artifactCreator)",
			"Remote Build Execution Service Agent (roles/remotebuildexecution.serviceAgent)",
			"Remote Build Execution Worker (roles/remotebuildexecution.worker)",
		},
		"securitycenter.muteconfigs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Mute Configurations Editor (roles/securitycenter.muteConfigsEditor)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"cloudjobdiscovery.tools.access": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Admin (roles/cloudjobdiscovery.admin)",
		},
		"cloudscheduler.jobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Cloud Scheduler Viewer (roles/cloudscheduler.viewer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datastore.statistics.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebase.projects.delete": {
			"Owner (roles/owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
		},
		"privateca.certificateTemplates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
			"CA Service Certificate Template User (roles/privateca.templateUser)",
		},
		"aiplatform.datasets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"datastream.routes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"documentai.labelerPools.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"logging.buckets.update": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"ml.models.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
		},
		"monitoring.groups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"accesscontextmanager.policies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"compute.maintenancePolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.subnetworks.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"transcoder.jobTemplates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Transcoder Admin (roles/transcoder.admin)",
			"Transcoder Viewer (roles/transcoder.viewer)",
		},
		"compute.globalAddresses.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"bigquery.connections.setIamPolicy": {
			"Owner (roles/owner)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Connection Admin (roles/bigquery.connectionAdmin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"datalabeling.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
		},
		"firebaserules.releases.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
			"Firebase Rules Viewer (roles/firebaserules.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"osconfig.vulnerabilityReports.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"OS VulnerabilityReport Viewer (roles/osconfig.vulnerabilityReportViewer)",
		},
		"domains.registrations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Domains Admin (roles/domains.admin)",
		},
		"visualinspection.annotationSets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"artifactregistry.dockerimages.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automlrecommendations.placements.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"automlrecommendations.recommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"contactcenterinsights.issueModels.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataconnectors.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"certificatemanager.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
		},
		"cloudkms.cryptoKeyVersions.useToSign": {
			"Owner (roles/owner)",
			"Cloud KMS Crypto Operator (roles/cloudkms.cryptoOperator)",
			"Cloud KMS CryptoKey Signer (roles/cloudkms.signer)",
			"Cloud KMS CryptoKey Signer/Verifier (roles/cloudkms.signerVerifier)",
		},
		"oauthconfig.testusers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"container.volumeSnapshotContents.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataplex.lakes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"resourcemanager.tagValues.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
		},
		"resourcemanager.folders.update": {
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Editor (roles/resourcemanager.folderEditor)",
		},
		"apigateway.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigee.resourcefiles.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"appengine.memcache.getKey": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
		},
		"compute.targetSslProxies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.volumeSnapshots.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datacatalog.taxonomies.setIamPolicy": {
			"Owner (roles/owner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Policy Tag Admin (roles/datacatalog.categoryAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"notebooks.instances.upgrade": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"privateca.caPools.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"bigquery.jobs.listAll": {
			"Owner (roles/owner)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"cloudasset.feeds.update": {
			"Owner (roles/owner)",
			"Assured Workloads Service Agent (roles/assuredworkloads.serviceAgent)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.interconnectAttachments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.cronJobs.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datacatalog.tagTemplates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog TagTemplate Owner (roles/datacatalog.tagTemplateOwner)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"storagetransfer.operations.pause": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
		},
		"gkehub.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"aiplatform.dataItems.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.maintenancePolicies.setIamPolicy": {
			"Owner (roles/owner)",
			"Compute Admin (roles/compute.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.replicationControllers.getScale": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datacatalog.taxonomies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Policy Tag Admin (roles/datacatalog.categoryAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataplex.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
		},
		"securitycenter.findings.setWorkflowState": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Workflow State Setter (roles/securitycenter.findingsWorkflowStateSetter)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"tpu.acceleratortypes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"TPU Admin (roles/tpu.admin)",
			"TPU Viewer (roles/tpu.viewer)",
		},
		"clouddebugger.breakpoints.listActive": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Debugger Agent (roles/clouddebugger.agent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"dataproc.clusters.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.flows.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"osconfig.guestPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"GuestPolicy Admin (roles/osconfig.guestPolicyAdmin)",
			"GuestPolicy Editor (roles/osconfig.guestPolicyEditor)",
			"GuestPolicy Viewer (roles/osconfig.guestPolicyViewer)",
		},
		"pubsublite.subscriptions.subscribe": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Subscriber (roles/pubsublite.subscriber)",
		},
		"baremetalsolution.instances.reset": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Instances Admin (roles/baremetalsolution.instancesadmin)",
		},
		"networkservices.httpFilters.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"cloudkms.keyRings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS Viewer (roles/cloudkms.viewer)",
		},
		"compute.globalForwardingRules.pscUpdate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastore.entities.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"spanner.instanceOperations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
		},
		"apigateway.gateways.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebaseextensions.configs.delete": {
			"Owner (roles/owner)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"documentai.humanReviewConfigs.review": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI API User (roles/documentai.apiUser)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"managedidentities.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
		},
		"recommender.monitoringProductSuggestionComputeInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
		},
		"compute.healthChecks.useReadOnly": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.publicDelegatedPrefixes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.securityPolicies.setIamPolicy": {
			"Owner (roles/owner)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.sslPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.securitySettings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"threatdetection.sinkSettings.update": {
			"Owner (roles/owner)",
			"Threat Detection Settings Editor (roles/threatdetection.editor)",
		},
		"container.customResourceDefinitions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.scheduledJobs.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"pubsublite.subscriptions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
		},
		"speech.customClasses.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Speech Administrator (roles/speech.admin)",
			"Cloud Speech Editor (roles/speech.editor)",
		},
		"videostitcher.slates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
		},
		"speech.phraseSets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Speech Administrator (roles/speech.admin)",
			"Cloud Speech Editor (roles/speech.editor)",
		},
		"binaryauthorization.attestors.verifyImageAttested": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Attestor Admin (roles/binaryauthorization.attestorsAdmin)",
			"Binary Authorization Attestor Editor (roles/binaryauthorization.attestorsEditor)",
			"Binary Authorization Attestor Image Verifier (roles/binaryauthorization.attestorsVerifier)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
		},
		"compute.interconnectAttachments.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.controllerRevisions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"iam.serviceAccounts.undelete": {
			"Owner (roles/owner)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
		},
		"metastore.services.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"compute.vpnTunnels.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"earthengine.maps.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"eventarc.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"healthcare.annotations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
			"Healthcare Annotation Reader (roles/healthcare.annotationReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"runtimeconfig.configs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"pubsub.snapshots.getIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Pub/Sub Admin (roles/pubsub.admin)",
		},
		"vmmigration.datacenterConnectors.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"bigquery.reservations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"compute.projects.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Compute packet mirroring admin (roles/compute.packetMirroringAdmin)",
			"Compute packet mirroring user (roles/compute.packetMirroringUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.thirdPartyResources.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"domains.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Domains Admin (roles/domains.admin)",
		},
		"gkehub.memberships.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Agent (roles/anthos.serviceAgent)",
			"Anthos Audit Service Agent (roles/anthosaudit.serviceAgent)",
			"Anthos Config Management Service Agent (roles/anthosconfigmanagement.serviceAgent)",
			"Anthos Identity Service Agent (roles/anthosidentityservice.serviceAgent)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"App Development Experience Service Agent (roles/appdevelopmentexperience.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Multi-cluster metering Service Agent (roles/multiclustermetering.serviceAgent)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Workload Certificate Service Agent (roles/workloadcertificate.serviceAgent)",
		},
		"apigee.archivedeployments.download": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"compute.instances.removeMaintenancePolicies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"dlp.deidentifyTemplates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP De-identify Templates Editor (roles/dlp.deidentifyTemplatesEditor)",
			"DLP De-identify Templates Reader (roles/dlp.deidentifyTemplatesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.datasets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
			"Healthcare Annotation Reader (roles/healthcare.annotationReader)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
			"Healthcare Annotation Store Viewer (roles/healthcare.annotationStoreViewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
			"Healthcare Dataset Viewer (roles/healthcare.datasetViewer)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Healthcare DICOM Store Viewer (roles/healthcare.dicomStoreViewer)",
			"Healthcare DICOM Viewer (roles/healthcare.dicomViewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Healthcare FHIR Store Viewer (roles/healthcare.fhirStoreViewer)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Healthcare HL7v2 Message Ingest (roles/healthcare.hl7V2Ingest)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
			"Healthcare HL7v2 Store Viewer (roles/healthcare.hl7V2StoreViewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"recommender.computeFirewallInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Firewall Recommender Admin (roles/recommender.firewallAdmin)",
			"Firewall Recommender Viewer (roles/recommender.firewallViewer)",
		},
		"livestream.channels.stop": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"networksecurity.clientTlsPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"notebooks.runtimes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"accesscontextmanager.policies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"aiplatform.contexts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.autoscalers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.httpHealthChecks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.subnetworks.useExternalIp": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
		},
		"osconfig.patchDeployments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"PatchDeployment Admin (roles/osconfig.patchDeploymentAdmin)",
		},
		"gkemulticloud.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"recommender.computeInstanceIdleResourceRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"secretmanager.versions.add": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Secret Version Adder (roles/secretmanager.secretVersionAdder)",
			"Secret Manager Secret Version Manager (roles/secretmanager.secretVersionManager)",
		},
		"accesscontextmanager.servicePerimeters.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"aiplatform.studies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.tensorboardRuns.batchCreate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.leases.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"deploymentmanager.deployments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"aiplatform.annotations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"datacatalog.entryGroups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog EntryGroup Creator (roles/datacatalog.entryGroupCreator)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"DataCatalog entry Owner (roles/datacatalog.entryOwner)",
			"DataCatalog Entry Viewer (roles/datacatalog.entryViewer)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
		},
		"datastream.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"eventarc.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"pubsub.snapshots.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
		},
		"aiplatform.featurestores.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Instance Creator (roles/aiplatform.featurestoreInstanceCreator)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.resourceQuotas.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"networkconnectivity.spokes.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"transcoder.jobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Media Asset Service Agent (roles/mediaasset.serviceAgent)",
			"Transcoder Admin (roles/transcoder.admin)",
		},
		"container.nodes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datacatalog.entries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"DataCatalog entry Owner (roles/datacatalog.entryOwner)",
			"DataCatalog Entry Viewer (roles/datacatalog.entryViewer)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"spanner.instances.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Spanner Admin (roles/spanner.admin)",
		},
		"vmmigration.targets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"servicedirectory.services.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
		},
		"servicemanagement.services.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Management Administrator (roles/servicemanagement.admin)",
		},
		"dataplex.content.setIamPolicy": {
			"Owner (roles/owner)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"genomics.datasets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Genomics Admin (roles/genomics.admin)",
			"Genomics Editor (roles/genomics.editor)",
			"Genomics Viewer (roles/genomics.viewer)",
		},
		"lifesciences.workflows.run": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Life Sciences Admin (roles/lifesciences.admin)",
			"Cloud Life Sciences Editor (roles/lifesciences.editor)",
			"Cloud Life Sciences Workflows Runner (roles/lifesciences.workflowsRunner)",
		},
		"recommender.computeDiskIdleResourceRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"servicedirectory.networks.attach": {
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Network Attacher (roles/servicedirectory.networkAttacher)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
		},
		"accesscontextmanager.gcpUserAccessBindings.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Access Binding Admin (roles/accesscontextmanager.gcpAccessAdmin)",
		},
		"cloudvolumesgcp-api.netapp.com/ipRanges.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
		},
		"compute.nodeGroups.setNodeTemplate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.phoneNumbers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"visualinspection.annotations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"servicebroker.bindings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"tpu.nodes.reset": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"TPU Admin (roles/tpu.admin)",
		},
		"cloudasset.assets.exportIamServiceAccountKeys": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.daemonSets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.intents.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Intent Admin (roles/dialogflow.intentAdmin)",
		},
		"networksecurity.authorizationPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"networkservices.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigee.reports.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
		},
		"compute.organizations.listAssociations": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"contactcenterinsights.issues.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"dialogflow.entityTypes.updateEntity": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Entity Type Admin (roles/dialogflow.entityTypeAdmin)",
		},
		"networkconnectivity.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Hub & Spoke Viewer (roles/networkconnectivity.hubViewer)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"apigateway.gateways.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"ApiGateway Admin (roles/apigateway.admin)",
		},
		"apigee.developermonetizationconfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"apigee.rateplans.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"workflows.workflows.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Viewer (roles/workflows.viewer)",
		},
		"aiplatform.indexes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.developerapps.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"cloudasset.assets.exportCloudkmsImportJobs": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.externalVpnGateways.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataproc.clusters.setIamPolicy": {
			"Owner (roles/owner)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"certificatemanager.certs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"monitoring.monitoredResourceDescriptors.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Connection Service Agent (roles/bigqueryconnection.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Anthos Multi-cloud Telemetry Writer (roles/gkemulticloud.telemetryWriter)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Metric Writer (roles/monitoring.metricWriter)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
		},
		"compute.licenses.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.subnetworks.setPrivateIpGoogleAccess": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.volumeAttachments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datastream.objects.startBackfillJob": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"dialogflow.intents.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Intent Admin (roles/dialogflow.intentAdmin)",
		},
		"automl.models.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"serviceconsumermanagement.tenancyu.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Admin of Tenancy Units (roles/serviceconsumermanagement.tenancyUnitsAdmin)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Workload Certificate Service Agent (roles/workloadcertificate.serviceAgent)",
		},
		"vmmigration.datacenterConnectors.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"bigquery.reservationAssignments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"compute.regionUrlMaps.invalidateCache": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"notebooks.instances.updateShieldInstanceConfig": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"recommender.computeImageIdleResourceInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
		},
		"resourcemanager.tagValues.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Tag Viewer (roles/resourcemanager.tagViewer)",
		},
		"apigee.datacollectors.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"consumerprocurement.accounts.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Billing Account Administrator (roles/billing.admin)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
		},
		"iap.tunnelZones.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"aiplatform.tensorboardRuns.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudonefs.isiloncloud.com/clusters.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
		},
		"cloudprivatecatalogproducer.associations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"firebaseanalytics.resources.googleAnalyticsReadAndAnalyze": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"paymentsresellersubscription.subscriptions.extend": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Payments Reseller Admin (roles/paymentsresellersubscription.partnerAdmin)",
			"Payments Reseller Subscriptions Editor (roles/paymentsresellersubscription.subscriptionEditor)",
		},
		"aiplatform.modelDeploymentMonitoringJobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"clouddeploy.targets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.instances.addMaintenancePolicies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"deploymentmanager.compositeTypes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"spanner.backupOperations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
		},
		"container.csiDrivers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.fhirStores.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
		},
		"recommender.loggingProductSuggestionContainerInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
		},
		"visualinspection.annotations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"cloudbuild.workerpools.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build WorkerPool Owner (roles/cloudbuild.workerPoolOwner)",
		},
		"notebooks.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"apigee.developers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"container.apiServices.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.roles.delete": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.runtimeClasses.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"workflows.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Viewer (roles/workflows.viewer)",
		},
		"cloudasset.assets.exportContainerRolebinding": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudonefs.isiloncloud.com/fileshares.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
		},
		"cloudsql.instances.failover": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.images.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"containeranalysis.occurrences.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Occurrences Editor (roles/containeranalysis.occurrences.editor)",
			"Container Analysis Occurrences Viewer (roles/containeranalysis.occurrences.viewer)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
		},
		"compute.reservations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"metastore.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"compute.instances.useReadOnly": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.resourcePolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.deployments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.models.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudiot.registries.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"composer.environments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Composer User (roles/composer.user)",
			"Composer Worker (roles/composer.worker)",
		},
		"compute.instanceGroups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.instances.start": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"file.backups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
		},
		"monitoring.uptimeCheckConfigs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Uptime Check Configuration Editor (roles/monitoring.uptimeCheckConfigEditor)",
		},
		"aiplatform.pipelineJobs.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.trainingPipelines.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportContainerPod": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datacatalog.categories.setIamPolicy": {
			"Owner (roles/owner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Policy Tag Admin (roles/datacatalog.categoryAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"networksecurity.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"cloudasset.assets.exportContainerRole": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataconnectors.connectors.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
			"Connector User (roles/dataconnectors.connectorUser)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataplex.tasks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
		},
		"firebaseappcheck.debugTokens.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
			"Firebase App Check Viewer (roles/firebaseappcheck.viewer)",
		},
		"privateca.certificateRevocationLists.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"billing.accounts.update": {
			"Billing Account Administrator (roles/billing.admin)",
		},
		"clouddeploy.rollouts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Approver (roles/clouddeploy.approver)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
		},
		"container.podSecurityPolicies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.conversationProfiles.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
		},
		"file.backups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
			"Cloud Filestore Viewer (roles/file.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.autoscalers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.organizations.setSecurityPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.snapshots.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"gkehub.features.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"gkemulticloud.awsClusters.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkconnectivity.hubs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Hub & Spoke Viewer (roles/networkconnectivity.hubViewer)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"cloudsql.sslCerts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.globalForwardingRules.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"domains.registrations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Domains Admin (roles/domains.admin)",
			"Cloud Domains Viewer (roles/domains.viewer)",
		},
		"healthcare.consentStores.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
		},
		"iap.webTypes.getSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"IAP Settings Admin (roles/iap.settingsAdmin)",
		},
		"privateca.caPools.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"commerceprice.privateoffers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Commerce Price Management Private Offers Admin (roles/commercepricemanagement.privateOffersAdmin)",
			"Commerce Price Management Viewer (roles/commercepricemanagement.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.environments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Environment editor (roles/dialogflow.environmentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.pages.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"documentai.processors.fetchHumanReviewDetails": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"iam.serviceAccountKeys.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Account Key Admin (roles/iam.serviceAccountKeyAdmin)",
		},
		"datafusion.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
			"Cloud Data Fusion Viewer (roles/datafusion.viewer)",
		},
		"recaptchaenterprise.assessments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase App Check Service Agent (roles/firebaseappcheck.serviceAgent)",
			"reCAPTCHA Enterprise Agent (roles/recaptchaenterprise.agent)",
		},
		"visualinspection.solutions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"aiplatform.endpoints.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"billing.accounts.getPricing": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
		},
		"datalabeling.dataitems.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
		},
		"datastream.privateConnections.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.transitionRouteGroups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datacatalog.taxonomies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Policy Tag Admin (roles/datacatalog.categoryAdmin)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.hyperparameterTuningJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.annotations.reject": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"automlrecommendations.events.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"compute.httpsHealthChecks.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.horizontalPodAutoscalers.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"binaryauthorization.continuousValidationConfig.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Binary Authorization Policy Administrator (roles/binaryauthorization.policyAdmin)",
			"Binary Authorization Policy Editor (roles/binaryauthorization.policyEditor)",
		},
		"compute.instances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"healthcare.fhirStores.setIamPolicy": {
			"Owner (roles/owner)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"apigee.keystorealiases.generateCSR": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"cloudsecurityscanner.scans.run": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Runner (roles/cloudsecurityscanner.runner)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.globalPublicDelegatedPrefixes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.instances.getSerialPortOutput": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.events.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.backendConfigs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"dns.resourceRecordSets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"networksecurity.serverTlsPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"aiplatform.contexts.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.modelDeploymentMonitoringJobs.resume": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"autoscaling.sites.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Autoscaling Site Admin (roles/autoscaling.sitesAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.licenseCodes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.targetInstances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"vmmigration.migratingVms.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"tpu.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"TPU Admin (roles/tpu.admin)",
			"TPU Viewer (roles/tpu.viewer)",
		},
		"automl.annotationSpecs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"logging.views.listResourceKeys": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs View Accessor (roles/logging.viewAccessor)",
		},
		"recommender.cloudsqlIdleInstanceRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"recommender.cloudsqlInstanceMemoryUsageInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"spanner.backups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
		},
		"compute.backendBuckets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.targetVpnGateways.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"gkehub.gateway.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connect Gateway Admin (roles/gkehub.gatewayAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"iam.serviceAccounts.actAs": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Service Account User (roles/iam.serviceAccountUser)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"recommender.cloudsqlInstanceOutOfDiskRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
		},
		"errorreporting.groupMetadata.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Error Reporting Viewer (roles/errorreporting.viewer)",
		},
		"orgpolicy.policies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Organization Policy Administrator (roles/orgpolicy.policyAdmin)",
			"Organization Policy Viewer (roles/orgpolicy.policyViewer)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Creator (roles/resourcemanager.folderCreator)",
			"Folder Editor (roles/resourcemanager.folderEditor)",
			"Folder Viewer (roles/resourcemanager.folderViewer)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
		},
		"apigee.instanceattachments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"automlrecommendations.recommendations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"bigtable.clusters.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.agents.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"dlp.analyzeRiskTemplates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Analyze Risk Templates Editor (roles/dlp.analyzeRiskTemplatesEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"aiplatform.featurestores.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Instance Creator (roles/aiplatform.featurestoreInstanceCreator)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"dialogflow.flows.validate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"recommender.computeInstanceGroupManagerMachineTypeRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"secretmanager.secrets.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Secret Manager Admin (roles/secretmanager.admin)",
		},
		"cloudbuild.workerpools.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Build WorkerPool Editor (roles/cloudbuild.workerPoolEditor)",
			"Cloud Build WorkerPool Owner (roles/cloudbuild.workerPoolOwner)",
			"Cloud Build WorkerPool Viewer (roles/cloudbuild.workerPoolViewer)",
		},
		"cloudtestservice.matrices.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"gameservices.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"redis.instances.failover": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
		},
		"riskmanager.settings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
		},
		"spanner.databases.updateDdl": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"bigquery.models.getMetadata": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"BigQuery Metadata Viewer (roles/bigquery.metadataViewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"composer.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Composer User (roles/composer.user)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.instanceTemplates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"containeranalysis.occurrences.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"gameservices.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"monitoring.timeSeries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Viewer (roles/cloudtasks.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"reCAPTCHA Enterprise Admin (roles/recaptchaenterprise.admin)",
			"reCAPTCHA Enterprise Viewer (roles/recaptchaenterprise.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Quota Administrator (roles/servicemanagement.quotaAdmin)",
			"Quota Viewer (roles/servicemanagement.quotaViewer)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
			"Service Usage Consumer (roles/serviceusage.serviceUsageConsumer)",
			"Service Usage Viewer (roles/serviceusage.serviceUsageViewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
			"Cloud Spanner Viewer (roles/spanner.viewer)",
		},
		"osconfig.osPolicyAssignments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"OSPolicyAssignment Admin (roles/osconfig.osPolicyAssignmentAdmin)",
			"OSPolicyAssignment Editor (roles/osconfig.osPolicyAssignmentEditor)",
			"OSPolicyAssignment Viewer (roles/osconfig.osPolicyAssignmentViewer)",
		},
		"apigee.keystorealiases.exportCertificate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"compute.firewallPolicies.setIamPolicy": {
			"Owner (roles/owner)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.globalOperations.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.endpointSlices.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datalabeling.annotationspecsets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
		},
		"compute.reservations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastream.streams.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"documentai.datasetSchemas.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"accesscontextmanager.accessLevels.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"aiplatform.specialistPools.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.archivedeployments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"bigquery.rowAccessPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"cloudvolumesgcp-api.netapp.com/volumes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
		},
		"firebaseperformance.data.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Performance Reporting Admin (roles/firebaseperformance.admin)",
			"Firebase Performance Reporting Viewer (roles/firebaseperformance.viewer)",
		},
		"integrations.apigeeSfdcInstances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"privateca.certificateTemplates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
			"CA Service Certificate Template User (roles/privateca.templateUser)",
		},
		"serviceusage.quotas.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Quota Administrator (roles/servicemanagement.quotaAdmin)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
		},
		"bigquery.jobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"cloudasset.assets.exportAccessLevel": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.firewallPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"contactcenterinsights.phraseMatchers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"container.clusterRoleBindings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"vmmigration.datacenterConnectors.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"visualinspection.locations.reportUsageMetrics": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Usage Metrics Reporter (roles/visualinspection.usageMetricsReporter)",
		},
		"vmmigration.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"apigee.hostsecurityreports.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Security Admin (roles/apigee.securityAdmin)",
		},
		"compute.networks.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.targetSslProxies.setBackendService": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataprocessing.featurecontrols.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Processing Controls Resource Admin (roles/dataprocessing.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"run.configurations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"apigateway.apis.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"binaryauthorization.policy.setIamPolicy": {
			"Owner (roles/owner)",
			"Binary Authorization Policy Administrator (roles/binaryauthorization.policyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"connectors.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
		},
		"networkmanagement.connectivitytests.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Network Management Admin (roles/networkmanagement.admin)",
			"Network Management Viewer (roles/networkmanagement.viewer)",
		},
		"compute.licenseCodes.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datalabeling.instructions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkservices.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"tpu.acceleratortypes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"TPU Admin (roles/tpu.admin)",
			"TPU Viewer (roles/tpu.viewer)",
		},
		"datastream.routes.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"fleetengine.trips.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
		},
		"securitycenter.muteconfigs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Mute Configurations Editor (roles/securitycenter.muteConfigsEditor)",
			"Security Center Mute Configurations Viewer (roles/securitycenter.muteConfigsViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"cloudsql.databases.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"datalabeling.annotationspecsets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
		},
		"documentai.evaluations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"firebaseabt.experiments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
		},
		"ml.jobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Job Owner (roles/ml.jobOwner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"cloudasset.assets.exportContainerClusters": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.vpnTunnels.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"consumerprocurement.orders.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
			"Consumer Procurement Order Viewer (roles/consumerprocurement.orderViewer)",
		},
		"container.bindings.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"cloudiottoken.tokensettings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
		},
		"compute.regionHealthChecks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebaseextensions.configs.create": {
			"Owner (roles/owner)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"cloudasset.assets.exportCloudbillingBillingAccounts": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.runtimeClasses.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"recommender.computeAddressIdleResourceInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"apigee.proxyrevisions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"container.daemonSets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dlp.jobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Jobs Editor (roles/dlp.jobsEditor)",
			"DLP Jobs Reader (roles/dlp.jobsReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gcp.redisenterprise.com/subscriptions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
		},
		"osconfig.osPolicyAssignmentReports.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"OSPolicyAssignmentReport Viewer (roles/osconfig.osPolicyAssignmentReportViewer)",
		},
		"certificatemanager.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
		},
		"dns.managedZoneOperations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"remotebuildexecution.actions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Remote Build Execution Artifact Admin (roles/remotebuildexecution.artifactAdmin)",
			"Remote Build Execution Reservation Admin (roles/remotebuildexecution.reservationAdmin)",
		},
		"aiplatform.indexEndpoints.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.pipelineJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.apps.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"servicebroker.bindings.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Service Broker Admin (roles/servicebroker.admin)",
		},
		"gsuiteaddons.deployments.install": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
			"Google Workspace Add-ons Tester (roles/gsuiteaddons.tester)",
		},
		"visualinspection.datasets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"visualinspection.datasets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"aiplatform.models.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.apiproductattributes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"apigee.proxies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"billing.accounts.getIamPolicy": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
			"Billing Account User (roles/billing.user)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataplex.assets.ownData": {
			"Owner (roles/owner)",
			"Dataplex Data Owner (roles/dataplex.dataOwner)",
		},
		"compute.regionOperations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"iap.projects.getSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"IAP Settings Admin (roles/iap.settingsAdmin)",
		},
		"metastore.backups.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
		},
		"healthcare.hl7V2Messages.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
		},
		"ondemandscanning.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"On-Demand Scanning Admin (roles/ondemandscanning.admin)",
		},
		"recommender.bigqueryCapacityCommitmentsInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Slot Recommender Admin (roles/recommender.bigQueryCapacityCommitmentsAdmin)",
			"BigQuery Recommender Billing Account Admin (roles/recommender.bigQueryCapacityCommitmentsBillingAccountAdmin)",
			"BigQuery Recommender Billing Account Viewer (roles/recommender.bigQueryCapacityCommitmentsBillingAccountViewer)",
			"BigQuery Recommender Project Admin (roles/recommender.bigQueryCapacityCommitmentsProjectAdmin)",
			"BigQuery Recommender Project Viewer (roles/recommender.bigQueryCapacityCommitmentsProjectViewer)",
			"BigQuery Slot Recommender Viewer (roles/recommender.bigQueryCapacityCommitmentsViewer)",
		},
		"cloudsupport.accounts.getUserRoles": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Support Account Administrator (roles/cloudsupport.admin)",
			"Support Account Viewer (roles/cloudsupport.viewer)",
		},
		"cloudtasks.queues.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
		},
		"compute.disks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebaseappcheck.safetyNetConfig.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
		},
		"visualinspection.solutionArtifacts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"bigtable.appProfiles.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"livestream.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
		},
		"notebooks.instances.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"proximitybeacon.namespaces.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"pubsub.schemas.validate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
		},
		"compute.instanceGroupManagers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataflow Worker (roles/dataflow.worker)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"datacatalog.entryGroups.setIamPolicy": {
			"Owner (roles/owner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"documentai.processorVersions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"riskmanager.reports.review": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Report Reviewer (roles/riskmanager.reviewer)",
		},
		"eventarc.events.receiveEvent": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Event Receiver (roles/eventarc.eventReceiver)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"firebaseinappmessaging.campaigns.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase In-App Messaging Admin (roles/firebaseinappmessaging.admin)",
			"Firebase In-App Messaging Viewer (roles/firebaseinappmessaging.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebasenotifications.messages.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Cloud Messaging Admin (roles/firebasenotifications.admin)",
		},
		"apigee.rateplans.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
		},
		"binaryauthorization.attestors.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Binary Authorization Attestor Admin (roles/binaryauthorization.attestorsAdmin)",
			"Binary Authorization Attestor Editor (roles/binaryauthorization.attestorsEditor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
		},
		"compute.regionTargetHttpsProxies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.limitRanges.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"earthengine.assets.setIamPolicy": {
			"Owner (roles/owner)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"gkemulticloud.azureNodePools.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"iam.serviceAccounts.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer v2 API Service Agent Extension (roles/composer.ServiceAgentV2Ext)",
			"Earth Engine Apps Publisher (roles/earthengine.appsPublisher)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
		},
		"servicemanagement.services.check": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud API Gateway Service Agent (roles/apigateway.serviceAgent)",
			"Cloud Endpoints Service Agent (roles/endpoints.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Service Controller (roles/servicemanagement.serviceController)",
		},
		"compute.addresses.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.targetPools.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.agents.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.participants.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"securitycenter.containerthreatdetectionsettings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"aiplatform.dataItems.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.disks.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"networkmanagement.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Network Management Admin (roles/networkmanagement.admin)",
			"Network Management Viewer (roles/networkmanagement.viewer)",
		},
		"workflows.executions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Invoker (roles/workflows.invoker)",
			"Workflows Viewer (roles/workflows.viewer)",
		},
		"compute.disks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"monitoring.dashboards.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Dashboard Configuration Editor (roles/monitoring.dashboardEditor)",
			"Monitoring Dashboard Configuration Viewer (roles/monitoring.dashboardViewer)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"visualinspection.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"vmmigration.groups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"cloudasset.assets.exportComputeGlobalAddress": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsql.instances.restart": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"firebase.clients.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Remote Config Admin (roles/cloudconfig.admin)",
			"Firebase Remote Config Viewer (roles/cloudconfig.viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
			"Firebase A/B Testing Viewer (roles/firebaseabt.viewer)",
			"Firebase App Distribution Admin (roles/firebaseappdistro.admin)",
			"Firebase App Distribution Viewer (roles/firebaseappdistro.viewer)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Firebase Authentication Viewer (roles/firebaseauth.viewer)",
			"Firebase Crash Symbol Uploader (roles/firebasecrash.symbolMappingsAdmin)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
			"Firebase Crashlytics Viewer (roles/firebasecrashlytics.viewer)",
			"Firebase Realtime Database Admin (roles/firebasedatabase.admin)",
			"Firebase Realtime Database Viewer (roles/firebasedatabase.viewer)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
			"Firebase Dynamic Links Viewer (roles/firebasedynamiclinks.viewer)",
			"Firebase Hosting Admin (roles/firebasehosting.admin)",
			"Firebase Hosting Viewer (roles/firebasehosting.viewer)",
			"Firebase In-App Messaging Admin (roles/firebaseinappmessaging.admin)",
			"Firebase In-App Messaging Viewer (roles/firebaseinappmessaging.viewer)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
			"Firebase ML Kit Viewer (roles/firebaseml.viewer)",
			"Firebase Cloud Messaging Admin (roles/firebasenotifications.admin)",
			"Firebase Cloud Messaging Viewer (roles/firebasenotifications.viewer)",
			"Firebase Performance Reporting Admin (roles/firebaseperformance.admin)",
			"Firebase Performance Reporting Viewer (roles/firebaseperformance.viewer)",
			"Firebase Predictions Admin (roles/firebasepredictions.admin)",
			"Firebase Predictions Viewer (roles/firebasepredictions.viewer)",
			"Cloud Storage for Firebase Admin (roles/firebasestorage.admin)",
		},
		"firebasenotifications.messages.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Cloud Messaging Admin (roles/firebasenotifications.admin)",
		},
		"dns.policies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"firebaseextensions.configs.update": {
			"Owner (roles/owner)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"gkemulticloud.awsNodePools.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"spanner.databases.read": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database Reader (roles/spanner.databaseReader)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"container.secrets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dns.changes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"monitoring.metricDescriptors.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Connection Service Agent (roles/bigqueryconnection.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Anthos Multi-cloud Telemetry Writer (roles/gkemulticloud.telemetryWriter)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Metric Writer (roles/monitoring.metricWriter)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
		},
		"visualinspection.images.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"bigquery.models.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"compute.regionSslCertificates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"contactcenterinsights.conversations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.modelEvaluations.exportEvaluatedDataItems": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.reports.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
		},
		"metastore.services.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"privateca.caPools.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"ml.models.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"apigateway.apis.setIamPolicy": {
			"Owner (roles/owner)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.instances.setServiceAccount": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"firebaseinappmessaging.campaigns.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase In-App Messaging Admin (roles/firebaseinappmessaging.admin)",
		},
		"servicedirectory.endpoints.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
		},
		"apigee.resourcefiles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudfunctions.functions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"cloudiot.devices.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
		},
		"compute.backendBuckets.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.namespaces.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"bigquery.models.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"BigQuery Metadata Viewer (roles/bigquery.metadataViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.fhirResources.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
		},
		"compute.regionTargetHttpProxies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"errorreporting.groupMetadata.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
		},
		"healthcare.attributeDefinitions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
		},
		"recommender.loggingProductSuggestionContainerInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
		},
		"apigee.organizations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Portal Admin (roles/apigee.portalAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Runtime Agent (roles/apigee.runtimeAgent)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"compute.interconnects.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataplex.environments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
		},
		"dialogflow.smartMessagingEntries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"pubsublite.topics.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
		},
		"cloudsupport.accounts.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Support Account Administrator (roles/cloudsupport.admin)",
		},
		"compute.images.deprecate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"healthcare.consentArtifacts.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
		},
		"securitycenter.muteconfigs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Mute Configurations Editor (roles/securitycenter.muteConfigsEditor)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"aiplatform.annotations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudtasks.tasks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Viewer (roles/cloudtasks.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.firewallPolicies.copyRules": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datamigration.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"healthcare.dicomStores.setIamPolicy": {
			"Owner (roles/owner)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"bigquery.tables.list": {
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"BigQuery Metadata Viewer (roles/bigquery.metadataViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"datacatalog.tagTemplates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog TagTemplate Creator (roles/datacatalog.tagTemplateCreator)",
			"Data Catalog TagTemplate Owner (roles/datacatalog.tagTemplateOwner)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"ml.jobs.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Job Owner (roles/ml.jobOwner)",
		},
		"storage.objects.list": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Deploy Runner (roles/clouddeploy.jobRunner)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Velostrata Storage Access (roles/cloudmigration.storageaccess)",
			"Cloud Optimization Service Agent (roles/cloudoptimization.serviceAgent)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Cloud Translation API Service Agent (roles/cloudtranslate.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Registry Service Agent (roles/containerregistry.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Content Warehouse Service Agent (roles/contentwarehouse.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"DocumentAI Core Service Agent (roles/documentaicore.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Storage for Firebase Service Agent (roles/firebasestorage.serviceAgent)",
			"Firestore Service Agent (roles/firestore.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Storage Legacy Bucket Reader (roles/storage.legacyBucketReader)",
			"Storage Legacy Bucket Writer (roles/storage.legacyBucketWriter)",
			"Storage Object Admin (roles/storage.objectAdmin)",
			"Storage Object Viewer (roles/storage.objectViewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"subscribewithgoogledeveloper.tools.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Subscribe with Google Developer (roles/subscribewithgoogledeveloper.developer)",
		},
		"compute.autoscalers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.jobs.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebaserules.rulesets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
		},
		"iap.webTypes.updateSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"IAP Settings Admin (roles/iap.settingsAdmin)",
		},
		"resourcemanager.projects.createBillingAssignment": {
			"Owner (roles/owner)",
			"Billing Account Administrator (roles/billing.admin)",
			"Project Billing Manager (roles/billing.projectManager)",
		},
		"cloudasset.assets.listSecretManagerSecretVersions": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.limitRanges.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataplex.content.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebaserules.rulesets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
			"Firebase Rules Viewer (roles/firebaserules.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"proximitybeacon.beacons.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Beacon Editor (roles/proximitybeacon.beaconEditor)",
		},
		"certificatemanager.certs.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"healthcare.hl7V2Stores.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkservices.endpointPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"resourcemanager.tagValueBindings.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"assuredworkloads.workload.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Assured Workloads Reader (roles/assuredworkloads.reader)",
		},
		"billing.resourceAssociations.list": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.diskTypes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.firewalls.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Build Integrations Owner (roles/cloudbuild.integrationsOwner)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"managedidentities.domains.validateTrust": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
		},
		"automl.datasets.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.firewalls.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"bigtable.tables.checkConsistency": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"cloudiot.registries.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.instanceGroups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dns.policies.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"visualinspection.solutionArtifacts.predict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"apigateway.apiconfigs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"ApiGateway Admin (roles/apigateway.admin)",
		},
		"compute.nodeTypes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"memcache.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
			"Cloud Memorystore Memcached Viewer (roles/memcache.viewer)",
		},
		"spanner.sessions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database Reader (roles/spanner.databaseReader)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"servicedirectory.services.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Service Directory Admin (roles/servicedirectory.admin)",
		},
		"certificatemanager.dnsauthorizations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"container.replicationControllers.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datacatalog.entryGroups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog EntryGroup Creator (roles/datacatalog.entryGroupCreator)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datastream.routes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"gkehub.memberships.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"appengine.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Viewer (roles/appengine.appViewer)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudtrace.traces.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace User (roles/cloudtrace.user)",
		},
		"container.bindings.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"notebooks.environments.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"aiplatform.hyperparameterTuningJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.priorityClasses.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"lifesciences.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Admin (roles/lifesciences.admin)",
			"Cloud Life Sciences Editor (roles/lifesciences.editor)",
			"Cloud Life Sciences Viewer (roles/lifesciences.viewer)",
			"Cloud Life Sciences Workflows Runner (roles/lifesciences.workflowsRunner)",
		},
		"networksecurity.authorizationPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"spanner.databases.select": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database Reader (roles/spanner.databaseReader)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"spanner.instanceOperations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
		},
		"cloudtasks.queues.resume": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
		},
		"cloudtasks.queues.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"dataflow.streamingWorkItems.commitWork": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataflow Worker (roles/dataflow.worker)",
		},
		"logging.cmekSettings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"notebooks.instances.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"apigee.environments.setIamPolicy": {
			"Owner (roles/owner)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"datastream.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"monitoring.publicWidgets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"recaptchaenterprise.relatedaccountgroupmemberships.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"reCAPTCHA Enterprise Agent (roles/recaptchaenterprise.agent)",
		},
		"metastore.services.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
		},
		"workflows.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
		},
		"certificatemanager.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
		},
		"cloudsql.instances.listTagBindings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Tag Viewer (roles/resourcemanager.tagViewer)",
		},
		"compute.globalPublicDelegatedPrefixes.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.podPresets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"gcp.redisenterprise.com/databases.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
		},
		"earlyaccesscenter.campaigns.enroll": {
			"Owner (roles/owner)",
			"Early Access Center Administrator (roles/earlyaccesscenter.admin)",
		},
		"earthengine.filmstripthumbnails.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"healthcare.annotationStores.evaluate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
		},
		"cloudasset.assets.exportAppengineApplications": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsecurityscanner.scans.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.regionHealthCheckServices.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.initializerConfigurations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datastore.keyVisualizerScans.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Key Visualizer Viewer (roles/datastore.keyVisualizerViewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"monitoring.notificationChannels.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring NotificationChannel Editor (roles/monitoring.notificationChannelEditor)",
		},
		"recommender.bigqueryCapacityCommitmentsInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"BigQuery Slot Recommender Admin (roles/recommender.bigQueryCapacityCommitmentsAdmin)",
			"BigQuery Recommender Billing Account Admin (roles/recommender.bigQueryCapacityCommitmentsBillingAccountAdmin)",
			"BigQuery Recommender Billing Account Viewer (roles/recommender.bigQueryCapacityCommitmentsBillingAccountViewer)",
			"BigQuery Recommender Project Admin (roles/recommender.bigQueryCapacityCommitmentsProjectAdmin)",
			"BigQuery Recommender Project Viewer (roles/recommender.bigQueryCapacityCommitmentsProjectViewer)",
			"BigQuery Slot Recommender Viewer (roles/recommender.bigQueryCapacityCommitmentsViewer)",
		},
		"clouddeploy.config.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
		},
		"healthcare.fhirResources.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
		},
		"proximitybeacon.attachments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Beacon Attachment Editor (roles/proximitybeacon.attachmentEditor)",
			"Beacon Attachment Viewer (roles/proximitybeacon.attachmentViewer)",
		},
		"container.scheduledJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datalabeling.datasets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataplex.lakes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"apigee.reports.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudprivatecatalogproducer.catalogs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"cloudvolumesgcp-api.netapp.com/activeDirectories.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
		},
		"consumerprocurement.orderAttributions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
			"Consumer Procurement Order Viewer (roles/consumerprocurement.orderViewer)",
		},
		"container.localSubjectAccessReviews.create": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"recommender.monitoringProductSuggestionComputeInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
		},
		"documentai.processorVersions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"iap.tunnelInstances.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"integrations.securityIntegrationVers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"accesscontextmanager.gcpUserAccessBindings.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Access Binding Admin (roles/accesscontextmanager.gcpAccessAdmin)",
		},
		"apigee.keyvaluemaps.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"cloudasset.assets.exportAllAccessPolicy": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.globalForwardingRules.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionTargetHttpsProxies.setUrlMap": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"metastore.imports.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"monitoring.alertPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring AlertPolicy Editor (roles/monitoring.alertPolicyEditor)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"remotebuildexecution.botsessions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Remote Build Execution Service Agent (roles/remotebuildexecution.serviceAgent)",
			"Remote Build Execution Worker (roles/remotebuildexecution.worker)",
		},
		"resourcesettings.settings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Resource Settings Administrator (roles/resourcesettings.admin)",
			"Resource Settings Viewer (roles/resourcesettings.viewer)",
		},
		"cloudsupport.techCases.escalate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tech Support Editor (roles/cloudsupport.techSupportEditor)",
		},
		"compute.globalNetworkEndpointGroups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"consumerprocurement.orders.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
			"Consumer Procurement Order Viewer (roles/consumerprocurement.orderViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datacatalog.entries.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"DataCatalog entry Owner (roles/datacatalog.entryOwner)",
		},
		"dlp.columnDataProfiles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Column Data Profiles Reader (roles/dlp.columnDataProfilesReader)",
			"DLP Data Profiles Reader (roles/dlp.dataProfilesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebasedynamiclinks.links.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
		},
		"privateca.caPools.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"cloudiot.devices.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Device Controller (roles/cloudiot.deviceController)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
			"Cloud IoT Viewer (roles/cloudiot.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudvolumesgcp-api.netapp.com/snapshots.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
		},
		"container.auditSinks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataplex.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataplex.tasks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
		},
		"pubsublite.topics.computeTimeCursor": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Subscriber (roles/pubsublite.subscriber)",
		},
		"container.daemonSets.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataplex.zoneActions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"documentai.processorVersions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"integrations.apigeeCertificates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"logging.queries.updateShared": {
			"Owner (roles/owner)",
			"Logging Admin (roles/logging.admin)",
		},
		"networkservices.endpointPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"servicedirectory.services.resolve": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Monitoring Service Agent (roles/monitoring.notificationServiceAgent)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"storage.hmacKeys.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Storage HMAC Key Admin (roles/storage.hmacKeyAdmin)",
		},
		"autoscaling.sites.writeState": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Autoscaling Site Admin (roles/autoscaling.sitesAdmin)",
			"Autoscaling State Writer (roles/autoscaling.stateWriter)",
			"Dataflow Worker (roles/dataflow.worker)",
		},
		"cloudfunctions.functions.sourceCodeGet": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"dataplex.content.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
		},
		"firebase.clients.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
		},
		"ml.studies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
		},
		"apikeys.keys.lookup": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"API Keys Admin (roles/serviceusage.apiKeysAdmin)",
			"API Keys Viewer (roles/serviceusage.apiKeysViewer)",
		},
		"compute.backendServices.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataflow.workItems.sendMessage": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataflow Worker (roles/dataflow.worker)",
		},
		"actions.agentVersions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Actions Admin (roles/actions.Admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"container.configMaps.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datastore.namespaces.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"gcp.redisenterprise.com/subscriptions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
			"Redis Enterprise Cloud Viewer (roles/redisenterprisecloud.viewer)",
		},
		"proximitybeacon.beacons.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Beacon Attachment Editor (roles/proximitybeacon.attachmentEditor)",
			"Beacon Attachment Publisher (roles/proximitybeacon.attachmentPublisher)",
			"Beacon Editor (roles/proximitybeacon.beaconEditor)",
		},
		"firebasecrashlytics.config.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
			"Firebase Crashlytics Viewer (roles/firebasecrashlytics.viewer)",
		},
		"apigee.datacollectors.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
		},
		"connectors.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connector Admin (roles/connectors.admin)",
		},
		"datafusion.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
			"Cloud Data Fusion Viewer (roles/datafusion.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataprocessing.groupcontrols.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Data Processing Controls Resource Admin (roles/dataprocessing.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datastore.operations.delete": {
			"Owner (roles/owner)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"recaptchaenterprise.assessments.annotate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase App Check Service Agent (roles/firebaseappcheck.serviceAgent)",
			"reCAPTCHA Enterprise Agent (roles/recaptchaenterprise.agent)",
		},
		"resourcemanager.tagValues.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
		},
		"billing.credits.list": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account User (roles/billing.user)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudonefs.isiloncloud.com/clusters.updateAdvancedSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
		},
		"dataplex.zones.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"dns.responsePolicyRules.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"privateca.certificateRevocationLists.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"logging.views.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"memcache.instances.applySoftwareUpdate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
		},
		"recommender.cloudsqlInstanceActivityInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"cloudsupport.properties.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Support Account Administrator (roles/cloudsupport.admin)",
			"Tech Support Editor (roles/cloudsupport.techSupportEditor)",
			"Tech Support Viewer (roles/cloudsupport.techSupportViewer)",
			"Support Account Viewer (roles/cloudsupport.viewer)",
		},
		"dataconnectors.connectors.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
		},
		"datalabeling.annotateddatasets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
		},
		"dialogflow.versions.load": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"dlp.jobTriggers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Job Triggers Editor (roles/dlp.jobTriggersEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"videostitcher.slates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"managedidentities.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
			"Google Cloud Managed Identities Peering Viewer (roles/managedidentities.peeringViewer)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"networkconnectivity.hubs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
		},
		"networksecurity.clientTlsPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"recommender.computeImageIdleResourceInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"cloudsecurityscanner.scanruns.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Runner (roles/cloudsecurityscanner.runner)",
			"Web Security Scanner Viewer (roles/cloudsecurityscanner.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.pods.initialize": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.scheduledJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gameservices.gameServerClusters.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"cloudasset.assets.exportBigqueryTables": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudprofiler.profiles.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Profiler Agent (roles/cloudprofiler.agent)",
		},
		"container.podTemplates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"privateca.certificateAuthorities.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"visualinspection.datasets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"integrations.apigeeSfdcChannels.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"logging.logMetrics.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"resourcemanager.projects.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Browser (roles/browser)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Organization Role Administrator (roles/iam.organizationRoleAdmin)",
			"Organization Role Viewer (roles/iam.organizationRoleViewer)",
			"Role Administrator (roles/iam.roleAdmin)",
			"Role Viewer (roles/iam.roleViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
			"Project IAM Admin (roles/resourcemanager.projectIamAdmin)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"automl.columnSpecs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"cloudasset.assets.exportComputeHttpHealthChecks": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.nodeGroups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.subnetworks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"iam.roles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Organization Role Administrator (roles/iam.organizationRoleAdmin)",
			"Organization Role Viewer (roles/iam.organizationRoleViewer)",
			"Role Administrator (roles/iam.roleAdmin)",
			"Role Viewer (roles/iam.roleViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.csiDrivers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.deployments.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.volumeSnapshotClasses.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"apigee.proxyrevisions.undeploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"appengine.versions.getFileContents": {
			"Owner (roles/owner)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
		},
		"cloudasset.assets.exportComputeInstances": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudfunctions.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.forwardingRules.pscDelete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"cloudjobdiscovery.companies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
			"Job Viewer (roles/cloudjobdiscovery.jobsViewer)",
		},
		"fleetengine.trips.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Fleet Engine Consumer SDK User (roles/fleetengine.consumerSdkUser)",
			"Fleet Engine Driver SDK User (roles/fleetengine.driverSdkUser)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
		},
		"logging.cmekSettings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"accesscontextmanager.servicePerimeters.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"cloudtoolresults.executions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"container.podSecurityPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"integrations.apigeeSfdcInstances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"integrations.apigeeSfdcInstances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
			"Apigee Integration Viewer (roles/integrations.apigeeIntegrationsViewer)",
		},
		"deploymentmanager.typeProviders.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"dns.policies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"networksecurity.authorizationPolicies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.annotationSpecs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportComputeSnapshots": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudasset.assets.exportContainerNamespace": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.maintenancePolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.targetHttpsProxies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"metastore.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"networkconnectivity.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"vmmigration.utilizationReports.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"cloudasset.assets.exportSecretManagerSecretVersions": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.petSets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebasedynamiclinks.destinations.update": {
			"Owner (roles/owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
		},
		"healthcare.consentStores.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"livestream.events.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"aiplatform.tensorboardTimeSeries.batchRead": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.certificateSigningRequests.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"integrations.apigeeIntegrations.invoke": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
			"Apigee Integration Invoker (roles/integrations.apigeeIntegrationInvokerRole)",
		},
		"gameservices.gameServerConfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
		},
		"monitoring.slos.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Services Editor (roles/monitoring.servicesEditor)",
		},
		"consumerprocurement.freeTrials.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
		},
		"endpoints.portals.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Endpoints Portal Admin (roles/endpoints.portalAdmin)",
		},
		"recaptchaenterprise.projectmetadata.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"reCAPTCHA Enterprise Admin (roles/recaptchaenterprise.admin)",
		},
		"storagetransfer.agentpools.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
		},
		"pubsub.schemas.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
		},
		"aiplatform.hyperparameterTuningJobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.interconnectLocations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.sslPolicies.listAvailableFeatures": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datamigration.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"gkehub.fleet.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"consumerprocurement.freeTrials.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
			"Consumer Procurement Entitlement Viewer (roles/consumerprocurement.entitlementViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"file.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
			"Cloud Filestore Viewer (roles/file.viewer)",
		},
		"gameservices.gameServerConfigs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"memcache.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
		},
		"resourcemanager.tagKeys.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Tag Viewer (roles/resourcemanager.tagViewer)",
		},
		"storage.objects.update": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Velostrata Storage Access (roles/cloudmigration.storageaccess)",
			"Cloud Optimization Service Agent (roles/cloudoptimization.serviceAgent)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Writer (roles/dataplex.storageDataWriter)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"DocumentAI Core Service Agent (roles/documentaicore.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Cloud Storage for Firebase Service Agent (roles/firebasestorage.serviceAgent)",
			"Live Stream Service Agent (roles/livestream.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Object Owner (roles/storage.legacyObjectOwner)",
			"Storage Object Admin (roles/storage.objectAdmin)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.developerbalances.adjust": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
		},
		"artifactregistry.packages.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudprivatecatalogproducer.catalogs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"cloudtranslate.generalModels.batchDocPredict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
		},
		"dns.networks.bindPrivateDNSPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"pubsub.schemas.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
		},
		"recommender.cloudsqlIdleInstanceRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"secretmanager.versions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Secret Version Manager (roles/secretmanager.secretVersionManager)",
			"Secret Manager Viewer (roles/secretmanager.viewer)",
		},
		"bigquery.tables.updateData": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Writer (roles/dataplex.storageDataWriter)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"bigtable.backups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"compute.instances.stop": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dataproc.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
		},
		"firebaseml.modelversions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
			"Firebase ML Kit Viewer (roles/firebaseml.viewer)",
		},
		"servicebroker.bindings.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"compute.backendServices.setSecurityPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.entityTypes.deleteEntity": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Entity Type Admin (roles/dialogflow.entityTypeAdmin)",
		},
		"videostitcher.cdnKeys.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
		},
		"bigtable.tables.mutateRows": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable User (roles/bigtable.user)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"compute.instances.resume": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"oauthconfig.verification.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
			"OAuth Config Viewer (roles/oauthconfig.viewer)",
		},
		"billing.accounts.getSpendingInformation": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
			"Billing Account Viewer (roles/billing.viewer)",
		},
		"cloudtasks.queues.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
		},
		"compute.reservations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"recommender.cloudsqlInstanceCpuUsageInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"dialogflow.entityTypes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Entity Type Admin (roles/dialogflow.entityTypeAdmin)",
		},
		"aiplatform.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.keystorealiases.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"cloudsql.users.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.licenses.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.podSecurityPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"apigateway.apis.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"ApiGateway Admin (roles/apigateway.admin)",
		},
		"cloudkms.importJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS Importer (roles/cloudkms.importer)",
			"Cloud KMS Viewer (roles/cloudkms.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"gameservices.realms.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"container.csiDrivers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.storageClasses.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"networksecurity.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigee.apiproducts.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"apigee.rateplans.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
		},
		"cloudasset.assets.exportIamRoles": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.instances.detachDisk": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.bindings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.certificateSigningRequests.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.persistentVolumeClaims.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"containeranalysis.occurrences.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Occurrences Editor (roles/containeranalysis.occurrences.editor)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
		},
		"cloudasset.assets.analyzeMove": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudasset.assets.exportBigtableInstance": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.regionOperations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.targetInstances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.urlMaps.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Web Security Scanner Service Agent (roles/websecurityscanner.serviceAgent)",
		},
		"firebase.playLinks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"notebooks.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"serviceusage.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
		},
		"apigee.references.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.regionHealthChecks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.validatingWebhookConfigurations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"serviceusage.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
		},
		"gkemulticloud.awsNodePools.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"threatdetection.sourceSettings.get": {
			"Owner (roles/owner)",
			"Threat Detection Settings Editor (roles/threatdetection.editor)",
			"Threat Detection Settings Viewer (roles/threatdetection.viewer)",
		},
		"apigee.keyvaluemaps.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"cloudasset.assets.exportComputeTargetInstances": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.snapshots.deleteTagBinding": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"dataproc.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
		},
		"firebaseappdistro.testers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase App Distribution Admin SDK Service Agent (roles/firebase.appDistributionSdkServiceAgent)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase App Distribution Admin (roles/firebaseappdistro.admin)",
			"Firebase App Distribution Viewer (roles/firebaseappdistro.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"memcache.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
		},
		"networkmanagement.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Network Management Admin (roles/networkmanagement.admin)",
			"Network Management Viewer (roles/networkmanagement.viewer)",
		},
		"recommender.resourcemanagerProjectUtilizationRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Project Utilization Recommender Admin (roles/recommender.projectUtilAdmin)",
			"Project Utilization Recommender Viewer (roles/recommender.projectUtilViewer)",
		},
		"cloudiot.registries.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Device Controller (roles/cloudiot.deviceController)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
			"Cloud IoT Viewer (roles/cloudiot.viewer)",
		},
		"cloudprivatecatalogproducer.catalogs.undelete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"datacatalog.entryGroups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
		},
		"dialogflow.answerrecords.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"healthcare.datasets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
			"Healthcare Annotation Reader (roles/healthcare.annotationReader)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
			"Healthcare Annotation Store Viewer (roles/healthcare.annotationStoreViewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
			"Healthcare Dataset Viewer (roles/healthcare.datasetViewer)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Healthcare DICOM Store Viewer (roles/healthcare.dicomStoreViewer)",
			"Healthcare DICOM Viewer (roles/healthcare.dicomViewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Healthcare FHIR Store Viewer (roles/healthcare.fhirStoreViewer)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Healthcare HL7v2 Message Ingest (roles/healthcare.hl7V2Ingest)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
			"Healthcare HL7v2 Store Viewer (roles/healthcare.hl7V2StoreViewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
		},
		"securitycenter.notificationconfig.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Notification Configurations Editor (roles/securitycenter.notificationConfigEditor)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"translationhub.portals.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Translation Hub Admin (roles/translationhub.admin)",
		},
		"automlrecommendations.catalogItems.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"cloudasset.assets.listCloudkmsCryptoKeys": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"Cloud KMS Service Agent (roles/cloudkms.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudfunctions.runtimes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataconnectors.connectors.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
			"Connector User (roles/dataconnectors.connectorUser)",
		},
		"dataconnectors.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
		},
		"certificatemanager.certs.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"cloudscheduler.jobs.pause": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
		},
		"firebaseanalytics.resources.googleAnalyticsEdit": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
		},
		"recommender.cloudsqlInstanceCpuUsageInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
		},
		"logging.logServices.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"automlrecommendations.catalogs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"bigquery.tables.create": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"container.ingresses.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gsuiteaddons.deployments.uninstall": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
			"Google Workspace Add-ons Tester (roles/gsuiteaddons.tester)",
		},
		"healthcare.fhirStores.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Healthcare FHIR Store Viewer (roles/healthcare.fhirStoreViewer)",
		},
		"healthcare.consents.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
		},
		"remotebuildexecution.workerpools.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Remote Build Execution Configuration Admin (roles/remotebuildexecution.configurationAdmin)",
		},
		"networkservices.httpfilters.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"aiplatform.edgeDeploymentJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudkms.keyRings.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.machineImages.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"datastore.entities.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
		},
		"file.instances.revert": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
		},
		"dialogflow.sessionEntityTypes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"livestream.inputs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"aiplatform.artifacts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.targetTcpProxies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.vpnGateways.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.configMaps.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.agents.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"container.clusterRoles.delete": {
			"Owner (roles/owner)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"deploymentmanager.deployments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"aiplatform.datasets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"artifactregistry.repositories.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"chat.bots.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Chat Bots Owner (roles/chat.owner)",
		},
		"cloudasset.assets.exportComputeRegionInstanceGroupManager": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.routers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"apigee.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Runtime Agent (roles/apigee.runtimeAgent)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"baremetalsolution.volumes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudasset.assets.exportComputeFirewalls": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dns.responsePolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"resourcemanager.tagValues.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
		},
		"dlp.jobs.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Jobs Editor (roles/dlp.jobsEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"healthcare.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"vmmigration.cloneJobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"cloudasset.assets.exportComputeInstanceGroups": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudnotifications.activities.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Billing Account Administrator (roles/billing.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Error Reporting Viewer (roles/errorreporting.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"monitoring.uptimeCheckConfigs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Uptime Check Configuration Editor (roles/monitoring.uptimeCheckConfigEditor)",
		},
		"vpcaccess.connectors.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Data Connectors Service Agent (roles/dataconnectors.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Serverless VPC Access Admin (roles/vpcaccess.admin)",
			"Serverless VPC Access User (roles/vpcaccess.user)",
		},
		"compute.reservations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastream.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"source.repos.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Source Repository Administrator (roles/source.admin)",
			"Source Repository Reader (roles/source.reader)",
			"Source Repository Writer (roles/source.writer)",
		},
		"threatdetection.detectorSettings.get": {
			"Owner (roles/owner)",
			"Threat Detection Settings Editor (roles/threatdetection.editor)",
			"Threat Detection Settings Viewer (roles/threatdetection.viewer)",
		},
		"clouddeploy.deliveryPipelines.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
		},
		"cloudsupport.techCases.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Tech Support Editor (roles/cloudsupport.techSupportEditor)",
			"Tech Support Viewer (roles/cloudsupport.techSupportViewer)",
		},
		"dataplex.partitions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Metadata Reader (roles/dataplex.metadataReader)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
		},
		"ml.models.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
			"AI Platform Model User (roles/ml.modelUser)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"remotebuildexecution.actions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Remote Build Execution Artifact Admin (roles/remotebuildexecution.artifactAdmin)",
			"Remote Build Execution Artifact Creator (roles/remotebuildexecution.artifactCreator)",
			"Remote Build Execution Reservation Admin (roles/remotebuildexecution.reservationAdmin)",
		},
		"dataconnectors.connectors.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
			"Connector User (roles/dataconnectors.connectorUser)",
		},
		"dataplex.entities.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Metadata Reader (roles/dataplex.metadataReader)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebaseml.compressionjobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
		},
		"apigee.rateplans.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudasset.assets.exportComputeRouters": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsupport.techCases.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tech Support Editor (roles/cloudsupport.techSupportEditor)",
		},
		"container.endpoints.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.tokenReviews.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.fhirResources.translateConceptMap": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
		},
		"securitycenter.securityhealthanalyticssettings.calculate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"source.repos.getProjectConfig": {
			"Owner (roles/owner)",
			"Source Repository Administrator (roles/source.admin)",
		},
		"spanner.instanceConfigs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Viewer (roles/spanner.viewer)",
		},
		"vmmigration.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"bigquery.datasets.delete": {
			"Owner (roles/owner)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"bigquery.tables.updateTag": {
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Tag Editor (roles/datacatalog.tagEditor)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"datastore.indexes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Datastore Index Admin (roles/datastore.indexAdmin)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"dialogflow.entityTypes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Entity Type Admin (roles/dialogflow.entityTypeAdmin)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.commitments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"ml.models.predict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
			"AI Platform Model User (roles/ml.modelUser)",
		},
		"vmmigration.cloneJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"cloudsql.instances.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.disks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"dialogflow.versions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"networkservices.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"resourcemanager.projects.deleteBillingAssignment": {
			"Owner (roles/owner)",
			"Billing Account Administrator (roles/billing.admin)",
			"Project Billing Manager (roles/billing.projectManager)",
		},
		"ml.trials.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
		},
		"apigee.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Runtime Agent (roles/apigee.runtimeAgent)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.httpHealthChecks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"datastore.statistics.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"dialogflow.intents.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Intent Admin (roles/dialogflow.intentAdmin)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"iam.serviceAccounts.getAccessToken": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Cloud API Gateway Service Agent (roles/apigateway.serviceAgent)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"BigQuery Data Transfer Service Agent (roles/bigquerydatatransfer.serviceAgent)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Scheduler Service Agent (roles/cloudscheduler.serviceAgent)",
			"Cloud Tasks Service Agent (roles/cloudtasks.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Service Account Token Creator (roles/iam.serviceAccountTokenCreator)",
			"Workload Identity User (roles/iam.workloadIdentityUser)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Pub/Sub Service Agent (roles/pubsub.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Cloud Source Repositories Service Agent (roles/sourcerepo.serviceAgent)",
			"Cloud Workflows Service Agent (roles/workflows.serviceAgent)",
		},
		"cloudkms.cryptoKeys.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
		},
		"compute.backendServices.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.persistentVolumes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"logging.queries.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"secretmanager.versions.destroy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Secret Version Manager (roles/secretmanager.secretVersionManager)",
		},
		"bigquery.tables.update": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
		},
		"clouddeploy.targets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
		},
		"container.networkPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"recommender.usageCommitmentRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Billing Account Usage Commitment Recommender Admin (roles/recommender.billingAccountCudAdmin)",
			"Billing Account Usage Commitment Recommender Viewer (roles/recommender.billingAccountCudViewer)",
			"Project Usage Commitment Recommender Admin (roles/recommender.projectCudAdmin)",
			"Project Usage Commitment Recommender Viewer (roles/recommender.projectCudViewer)",
		},
		"tpu.nodes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"TPU Admin (roles/tpu.admin)",
		},
		"notebooks.executions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"speech.customClasses.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Speech Administrator (roles/speech.admin)",
			"Cloud Speech Editor (roles/speech.editor)",
		},
		"aiplatform.featurestores.batchReadFeatureValues": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Data Viewer (roles/aiplatform.featurestoreDataViewer)",
			"Vertex AI Feature Store Data Writer (roles/aiplatform.featurestoreDataWriter)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.humanAnnotationTasks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"clientauthconfig.brands.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
			"OAuth Config Viewer (roles/oauthconfig.viewer)",
		},
		"gkehub.endpoints.connect": {
			"Owner (roles/owner)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Velostrata Manager Connection Agent (roles/cloudmigration.velostrataconnect)",
			"GKE Connect Agent (roles/gkehub.connect)",
		},
		"iam.googleapis.com/workloadIdentityPools.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
			"IAM Workload Identity Pool Viewer (roles/iam.workloadIdentityPoolViewer)",
		},
		"firebasehosting.sites.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Hosting Admin (roles/firebasehosting.admin)",
		},
		"metastore.backups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
		},
		"trafficdirector.networks.reportMetrics": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Traffic Director Client (roles/trafficdirector.client)",
		},
		"apigee.securityreports.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Security Admin (roles/apigee.securityAdmin)",
			"Apigee Security Viewer (roles/apigee.securityViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"appengine.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"dialogflow.conversationModels.undeploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"firebasecrashlytics.config.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
		},
		"recommender.computeDiskIdleResourceInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"compute.commitments.updateReservations": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"integrations.apigeeExecutions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
			"Apigee Integration Invoker (roles/integrations.apigeeIntegrationInvokerRole)",
		},
		"networkconnectivity.spokes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"bigquery.capacityCommitments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"cloudvolumesgcp-api.netapp.com/activeDirectories.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
		},
		"livestream.channels.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
		},
		"compute.packetMirrorings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute packet mirroring user (roles/compute.packetMirroringUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.webhooks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Webhook Admin (roles/dialogflow.webhookAdmin)",
		},
		"eventarc.events.receiveAuditLogWritten": {
			"Owner (roles/owner)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Event Receiver (roles/eventarc.eventReceiver)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"gkemulticloud.awsNodePools.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"pubsub.subscriptions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"retail.products.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"workflows.workflows.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Workflows Admin (roles/workflows.admin)",
		},
		"aiplatform.trainingPipelines.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"composer.imageversions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Composer User (roles/composer.user)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.nodeGroups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"privateca.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
		},
		"proximitybeacon.namespaces.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
		},
		"cloudasset.assets.exportIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"clouddeploy.releases.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.userDataMappings.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
		},
		"chroniclesm.gcpSettings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Chronicle Service Admin (roles/chroniclesm.admin)",
		},
		"compute.backendBuckets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.securityPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"recommender.computeImageIdleResourceRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
		},
		"aiplatform.edgeDevices.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudscheduler.jobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
		},
		"compute.routers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataflow.jobs.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
		},
		"securitycenter.virtualmachinethreatdetectionsettings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"compute.externalVpnGateways.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.regionOperations.setIamPolicy": {
			"Owner (roles/owner)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"pubsublite.subscriptions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"cloudprivatecatalogproducer.catalogs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"container.persistentVolumes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"file.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
			"Cloud Filestore Viewer (roles/file.viewer)",
		},
		"firebaseinappmessaging.campaigns.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase In-App Messaging Admin (roles/firebaseinappmessaging.admin)",
			"Firebase In-App Messaging Viewer (roles/firebaseinappmessaging.viewer)",
		},
		"cloudtestservice.environmentcatalog.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"container.persistentVolumeClaims.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"workflows.executions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Invoker (roles/workflows.invoker)",
		},
		"cloudtasks.tasks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Viewer (roles/cloudtasks.viewer)",
		},
		"compute.targetHttpsProxies.setUrlMap": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"healthcare.fhirResources.purge": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
		},
		"networkmanagement.connectivitytests.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Network Management Admin (roles/networkmanagement.admin)",
			"Network Management Viewer (roles/networkmanagement.viewer)",
		},
		"cloudtasks.queues.getIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"commerceprice.privateoffers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Commerce Price Management Private Offers Admin (roles/commercepricemanagement.privateOffersAdmin)",
		},
		"compute.targetTcpProxies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"apigee.keystores.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"cloudtranslate.glossaries.docPredict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
		},
		"compute.globalOperations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Data Connectors Service Agent (roles/dataconnectors.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
		},
		"datalabeling.instructions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
		},
		"remotebuildexecution.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Remote Build Execution Configuration Admin (roles/remotebuildexecution.configurationAdmin)",
			"Remote Build Execution Configuration Viewer (roles/remotebuildexecution.configurationViewer)",
		},
		"monitoring.notificationChannels.sendVerificationCode": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring NotificationChannel Editor (roles/monitoring.notificationChannelEditor)",
		},
		"networkservices.endpointConfigSelectors.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigee.envgroupattachments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"cloudkms.cryptoKeyVersions.useToVerify": {
			"Owner (roles/owner)",
			"Cloud KMS Crypto Operator (roles/cloudkms.cryptoOperator)",
			"Cloud KMS CryptoKey Signer/Verifier (roles/cloudkms.signerVerifier)",
			"Cloud KMS CryptoKey Verifier (roles/cloudkms.verifier)",
		},
		"container.roles.update": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.environments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"earthengine.imports.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"livestream.inputs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"cloudtasks.tasks.run": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Task Runner (roles/cloudtasks.taskRunner)",
		},
		"compute.forwardingRules.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataproc.jobs.setIamPolicy": {
			"Owner (roles/owner)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"dialogflow.pages.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"integrations.apigeeAuthConfigs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
			"Apigee Integration Viewer (roles/integrations.apigeeIntegrationsViewer)",
		},
		"container.initializerConfigurations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"domains.registrations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Domains Admin (roles/domains.admin)",
		},
		"gameservices.gameServerClusters.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"aiplatform.tensorboardExperiments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.config.update": {
			"Owner (roles/owner)",
			"BigQuery Admin (roles/bigquery.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"cloudasset.assets.exportServicePerimeter": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudkms.cryptoKeys.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS Viewer (roles/cloudkms.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"contactcenterinsights.phraseMatchers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"integrations.apigeeSuspensions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Approver (roles/integrations.apigeeSuspensionResolver)",
		},
		"meshconfig.projects.init": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Mesh Config Admin (roles/meshconfig.admin)",
		},
		"vmmigration.cloneJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"managedidentities.domains.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
		},
		"redis.instances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
		},
		"clientauthconfig.brands.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"container.horizontalPodAutoscalers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.statefulSets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"genomics.operations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Genomics Admin (roles/genomics.admin)",
			"Genomics Editor (roles/genomics.editor)",
			"Genomics Pipelines Runner (roles/genomics.pipelinesRunner)",
		},
		"livestream.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"vmmigration.cutoverJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"aiplatform.metadataSchemas.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.selfSubjectAccessReviews.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataflow.snapshots.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Dataflow Viewer (roles/dataflow.viewer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
		},
		"iam.googleapis.com/workloadIdentityPoolProviders.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
			"IAM Workload Identity Pool Viewer (roles/iam.workloadIdentityPoolViewer)",
		},
		"storagetransfer.jobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
			"Storage Transfer Viewer (roles/storagetransfer.viewer)",
		},
		"gkemulticloud.awsServerConfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
		},
		"privateca.certificateTemplates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"aiplatform.metadataStores.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.humanAnnotationTasks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"compute.subnetworks.mirror": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute packet mirroring admin (roles/compute.packetMirroringAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataplex.tasks.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"documentai.processors.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"compute.targetPools.addInstance": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"speech.customClasses.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Speech Administrator (roles/speech.admin)",
			"Cloud Speech Editor (roles/speech.editor)",
		},
		"vmmigration.migratingVms.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"apigee.apiproductattributes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"apigee.ingressconfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Runtime Agent (roles/apigee.runtimeAgent)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Apigee Synchronizer Manager (roles/apigee.synchronizerManager)",
		},
		"cloudasset.assets.exportComputeDisks": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"clouddeploy.releases.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
		},
		"compute.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataflow Worker (roles/dataflow.worker)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.replicationControllers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.services.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"visualinspection.models.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"aiplatform.batchPredictionJobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"appengine.services.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Viewer (roles/appengine.appViewer)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datapipelines.pipelines.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data pipelines Admin (roles/datapipelines.admin)",
			"Data pipelines Viewer (roles/datapipelines.viewer)",
		},
		"firebasehosting.sites.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Hosting Admin (roles/firebasehosting.admin)",
		},
		"artifactregistry.repositories.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"datamigration.connectionprofiles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"healthcare.fhirStores.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"recommender.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"BigQuery Slot Recommender Admin (roles/recommender.bigQueryCapacityCommitmentsAdmin)",
			"BigQuery Recommender Project Admin (roles/recommender.bigQueryCapacityCommitmentsProjectAdmin)",
			"BigQuery Recommender Project Viewer (roles/recommender.bigQueryCapacityCommitmentsProjectViewer)",
			"BigQuery Slot Recommender Viewer (roles/recommender.bigQueryCapacityCommitmentsViewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
			"Firewall Recommender Admin (roles/recommender.firewallAdmin)",
			"Firewall Recommender Viewer (roles/recommender.firewallViewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
			"Project Usage Commitment Recommender Admin (roles/recommender.projectCudAdmin)",
			"Project Usage Commitment Recommender Viewer (roles/recommender.projectCudViewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.indexEndpoints.undeploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automlrecommendations.recommendations.pause": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"compute.publicAdvertisedPrefixes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.replicationControllers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudasset.assets.exportServicemanagementServices": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsql.users.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"retail.userEvents.purge": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Retail Admin (roles/retail.admin)",
		},
		"storage.objects.getIamPolicy": {
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Registry Service Agent (roles/containerregistry.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Storage for Firebase Service Agent (roles/firebasestorage.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Object Owner (roles/storage.legacyObjectOwner)",
			"Storage Object Admin (roles/storage.objectAdmin)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.datasets.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"binaryauthorization.continuousValidationConfig.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Policy Administrator (roles/binaryauthorization.policyAdmin)",
			"Binary Authorization Policy Editor (roles/binaryauthorization.policyEditor)",
			"Binary Authorization Policy Viewer (roles/binaryauthorization.policyViewer)",
		},
		"compute.instances.updateDisplayDevice": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"managedidentities.domains.updateLDAPSSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
		},
		"securitycenter.findings.setState": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Center Findings State Setter (roles/securitycenter.findingsStateSetter)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudbuild.builds.approve": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Approver (roles/cloudbuild.builds.approver)",
		},
		"compute.publicAdvertisedPrefixes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.pods.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"binaryauthorization.policy.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Policy Administrator (roles/binaryauthorization.policyAdmin)",
			"Binary Authorization Policy Editor (roles/binaryauthorization.policyEditor)",
			"Binary Authorization Policy Viewer (roles/binaryauthorization.policyViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.securityPolicies.removeAssociation": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"aiplatform.indexEndpoints.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"compute.snapshots.useReadOnly": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"earthengine.assets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"logging.logMetrics.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"earthengine.videothumbnails.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"errorreporting.errorEvents.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting Writer (roles/errorreporting.writer)",
		},
		"memcache.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
			"Cloud Memorystore Memcached Viewer (roles/memcache.viewer)",
		},
		"automl.models.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Cloud Translation API Viewer (roles/cloudtranslate.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Translation Hub Admin (roles/translationhub.admin)",
			"Translation Hub Portal User (roles/translationhub.portalUser)",
		},
		"cloudprivatecatalogproducer.associations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"cloudsql.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
		},
		"container.mutatingWebhookConfigurations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dns.networks.bindDNSResponsePolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"recommender.iamPolicyInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
		},
		"retail.products.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"artifactregistry.repositories.setIamPolicy": {
			"Owner (roles/owner)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Security Admin (roles/iam.securityAdmin)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.capacityCommitments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"firebase.playLinks.update": {
			"Owner (roles/owner)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"healthcare.fhirResources.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
		},
		"monitoring.groups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"fleetengine.vehicles.searchFuzzed": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Fleet Engine Consumer SDK User (roles/fleetengine.consumerSdkUser)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
		},
		"ondemandscanning.scans.scan": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"On-Demand Scanning Admin (roles/ondemandscanning.admin)",
		},
		"videostitcher.cdnKeys.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
		},
		"vmmigration.cutoverJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"compute.networks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
		},
		"container.statefulSets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebase.billingPlans.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"gcp.redisenterprise.com/databases.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
		},
		"privateca.certificateTemplates.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"aiplatform.tensorboards.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportComputeRoutes": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudtasks.tasks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Enqueuer (roles/cloudtasks.enqueuer)",
		},
		"dialogflow.flows.train": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"firebase.projects.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Actions Admin (roles/actions.Admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
		},
		"automl.locations.setIamPolicy": {
			"Owner (roles/owner)",
			"AutoML Admin (roles/automl.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"bigquery.routines.updateTag": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Tag Editor (roles/datacatalog.tagEditor)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"container.volumeAttachments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"visualinspection.images.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"cloudsql.backupRuns.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.httpsHealthChecks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"gkehub.gateway.post": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connect Gateway Admin (roles/gkehub.gatewayAdmin)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"bigquery.models.updateData": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"bigtable.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"eventarc.triggers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Eventarc Viewer (roles/eventarc.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"fcmdata.deliverydata.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Cloud Messaging API Admin (roles/firebasecloudmessaging.admin)",
			"Firebase Cloud Messaging Admin (roles/firebasenotifications.admin)",
			"Firebase Cloud Messaging Viewer (roles/firebasenotifications.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"chroniclesm.gcpAssociations.delete": {
			"Owner (roles/owner)",
			"Chronicle Service Admin (roles/chroniclesm.admin)",
		},
		"compute.instanceGroups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dataproc.autoscalingPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigateway.gateways.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"ApiGateway Admin (roles/apigateway.admin)",
		},
		"compute.globalPublicDelegatedPrefixes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datacatalog.categories.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Policy Tag Admin (roles/datacatalog.categoryAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store Resource Viewer (roles/aiplatform.featurestoreResourceViewer)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"dlp.storedInfoTypes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Stored InfoTypes Editor (roles/dlp.storedInfoTypesEditor)",
		},
		"ml.models.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
		},
		"workflows.workflows.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
		},
		"logging.sinks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"osconfig.guestPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GuestPolicy Admin (roles/osconfig.guestPolicyAdmin)",
			"GuestPolicy Editor (roles/osconfig.guestPolicyEditor)",
		},
		"resourcemanager.projects.setIamPolicy": {
			"Owner (roles/owner)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
			"Project IAM Admin (roles/resourcemanager.projectIamAdmin)",
		},
		"aiplatform.entityTypes.writeFeatureValues": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Data Writer (roles/aiplatform.featurestoreDataWriter)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportSqladminInstances": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.instances.addResourcePolicies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.replicaSets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.annotationStores.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
		},
		"dialogflow.conversationProfiles.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
		},
		"gcp.redisenterprise.com/subscriptions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
		},
		"monitoring.slos.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Services Editor (roles/monitoring.servicesEditor)",
			"Monitoring Services Viewer (roles/monitoring.servicesViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"accesscontextmanager.accessPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"bigquery.routines.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"BigQuery Metadata Viewer (roles/bigquery.metadataViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudkms.cryptoKeyVersions.viewPublicKey": {
			"Owner (roles/owner)",
			"Cloud KMS Crypto Operator (roles/cloudkms.cryptoOperator)",
			"Cloud KMS CryptoKey Public Key Viewer (roles/cloudkms.publicKeyViewer)",
			"Cloud KMS CryptoKey Signer/Verifier (roles/cloudkms.signerVerifier)",
			"Cloud KMS CryptoKey Verifier (roles/cloudkms.verifier)",
		},
		"compute.licenseCodes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datastore.databases.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"serviceusage.services.enable": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Assured Workloads Service Agent (roles/assuredworkloads.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase SDK Provisioning Service Agent (roles/firebase.sdkProvisioningServiceAgent)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Quota Administrator (roles/servicemanagement.quotaAdmin)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
			"Stackdriver Accounts Editor (roles/stackdriver.accounts.editor)",
		},
		"bigquery.datasets.setIamPolicy": {
			"Owner (roles/owner)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.regionTargetHttpsProxies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.hl7V2Messages.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
		},
		"iam.serviceAccounts.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
			"Delete Service Accounts (roles/iam.serviceAccountDeleter)",
		},
		"spanner.backups.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
		},
		"aiplatform.modelDeploymentMonitoringJobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudtranslate.glossaries.batchDocPredict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
		},
		"container.componentStatuses.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.networkPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"iam.serviceAccounts.implicitDelegation": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Service Account Token Creator (roles/iam.serviceAccountTokenCreator)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Pub/Sub Service Agent (roles/pubsub.serviceAgent)",
		},
		"paymentsresellersubscription.subscriptions.provision": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Payments Reseller Admin (roles/paymentsresellersubscription.partnerAdmin)",
			"Payments Reseller Subscriptions Editor (roles/paymentsresellersubscription.subscriptionEditor)",
		},
		"aiplatform.datasets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.globalOperations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.targetSslProxies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.jobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dlp.inspectTemplates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Inspect Templates Editor (roles/dlp.inspectTemplatesEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"aiplatform.indexEndpoints.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.annotations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"automl.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"cloudbuild.workerpools.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Build WorkerPool Editor (roles/cloudbuild.workerPoolEditor)",
			"Cloud Build WorkerPool Owner (roles/cloudbuild.workerPoolOwner)",
			"Cloud Build WorkerPool Viewer (roles/cloudbuild.workerPoolViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.globalNetworkEndpointGroups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudfunctions.functions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"compute.interconnectLocations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"notebooks.executions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"cloudasset.assets.exportComputeUrlMaps": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.maintenancePolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gkemulticloud.awsClusters.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"logging.views.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.tensorboardExperiments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportPubsubSubscriptions": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudprivatecatalogproducer.catalogs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datacatalog.taxonomies.create": {
			"Owner (roles/owner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Policy Tag Admin (roles/datacatalog.categoryAdmin)",
		},
		"firebaserules.releases.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
		},
		"apigee.hostsecurityreports.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Security Admin (roles/apigee.securityAdmin)",
			"Apigee Security Viewer (roles/apigee.securityViewer)",
		},
		"container.endpoints.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datacatalog.tagTemplates.setIamPolicy": {
			"Owner (roles/owner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog TagTemplate Owner (roles/datacatalog.tagTemplateOwner)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"dataflow.snapshots.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
		},
		"dlp.columnDataProfiles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Column Data Profiles Reader (roles/dlp.columnDataProfilesReader)",
			"DLP Data Profiles Reader (roles/dlp.dataProfilesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"actions.agentVersions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Actions Admin (roles/actions.Admin)",
			"Actions Viewer (roles/actions.Viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"remotebuildexecution.actions.set": {
			"Remote Build Execution Action Cache Writer (roles/remotebuildexecution.actionCacheWriter)",
		},
		"metastore.services.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
		},
		"securitycenter.virtualmachinethreatdetectionsettings.calculate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"apigee.deployments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"artifactregistry.files.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"contactcenterinsights.phraseMatchers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.volumeSnapshots.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datamigration.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"healthcare.consentArtifacts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"pubsublite.reservations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
		},
		"aiplatform.customJobs.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"artifactregistry.yumartifacts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudkms.cryptoKeys.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"container.replicaSets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataprocessing.groupcontrols.update": {
			"Owner (roles/owner)",
			"Data Processing Controls Resource Admin (roles/dataprocessing.admin)",
		},
		"datastore.namespaces.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"domains.registrations.configureDns": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Domains Admin (roles/domains.admin)",
		},
		"compute.organizations.administerXpn": {
			"Compute Admin (roles/compute.admin)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"speech.phraseSets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Cloud Speech Administrator (roles/speech.admin)",
			"Cloud Speech Editor (roles/speech.editor)",
		},
		"aiplatform.studies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"commerceprice.privateoffers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Commerce Price Management Private Offers Admin (roles/commercepricemanagement.privateOffersAdmin)",
			"Commerce Price Management Viewer (roles/commercepricemanagement.viewer)",
		},
		"dialogflow.fulfillments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"dns.managedZoneOperations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"documentai.processors.processBatch": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI API User (roles/documentai.apiUser)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"metastore.imports.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
		},
		"ml.trials.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"cloudprivatecatalogproducer.producerCatalogs.attachProduct": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"cloudscheduler.jobs.run": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Cloud Scheduler Job Runner (roles/cloudscheduler.jobRunner)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
		},
		"dataflow.shuffle.write": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataflow Worker (roles/dataflow.worker)",
		},
		"gkehub.features.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"healthcare.annotations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
			"Healthcare Annotation Reader (roles/healthcare.annotationReader)",
		},
		"aiplatform.indexEndpoints.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.zones.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dataproc.jobs.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"run.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"billing.budgets.delete": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
		},
		"compute.regionSslCertificates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datastream.streams.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"documentai.processors.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"pubsublite.reservations.attachTopic": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
		},
		"container.mutatingWebhookConfigurations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.roles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebasecrash.issues.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
		},
		"proximitybeacon.attachments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Beacon Attachment Editor (roles/proximitybeacon.attachmentEditor)",
		},
		"storage.buckets.getIamPolicy": {
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Storage for Firebase Service Agent (roles/firebasestorage.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"dialogflow.conversations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"memcache.instances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
		},
		"compute.globalNetworkEndpointGroups.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.nodeTemplates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"consumerprocurement.accounts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Billing Account Administrator (roles/billing.admin)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
		},
		"container.cronJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.leases.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"livestream.channels.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"managedidentities.domains.attachTrust": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
		},
		"pubsublite.topics.publish": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Content Warehouse Service Agent (roles/contentwarehouse.serviceAgent)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Publisher (roles/pubsublite.publisher)",
		},
		"recommender.iamPolicyLateralMovementInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
		},
		"cloudtoolresults.histories.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"compute.firewallPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionHealthCheckServices.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.serviceAccounts.createToken": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"apigee.developerappattributes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigee.environments.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.targetTcpProxies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gsuiteaddons.deployments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
			"Google Workspace Add-ons Reader (roles/gsuiteaddons.reader)",
		},
		"tpu.tensorflowversions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"TPU Admin (roles/tpu.admin)",
			"TPU Viewer (roles/tpu.viewer)",
		},
		"apigee.environments.getDataLocation": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Agent (roles/apigee.analyticsAgent)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"datafusion.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
			"Cloud Data Fusion Viewer (roles/datafusion.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"integrations.securityIntegTempVers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"osconfig.osPolicyAssignmentReports.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"OSPolicyAssignmentReport Viewer (roles/osconfig.osPolicyAssignmentReportViewer)",
		},
		"appengine.services.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"cloudonefs.isiloncloud.com/fileshares.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
		},
		"memcache.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
			"Cloud Memorystore Memcached Viewer (roles/memcache.viewer)",
		},
		"paymentsresellersubscription.subscriptions.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Payments Reseller Admin (roles/paymentsresellersubscription.partnerAdmin)",
			"Payments Reseller Subscriptions Editor (roles/paymentsresellersubscription.subscriptionEditor)",
		},
		"cloudasset.assets.exportComputeTargetVpnGateways": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.acceleratorTypes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.consents.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
		},
		"iam.serviceAccounts.getOpenIdToken": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Cloud API Gateway Service Agent (roles/apigateway.serviceAgent)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Scheduler Service Agent (roles/cloudscheduler.serviceAgent)",
			"Cloud Tasks Service Agent (roles/cloudtasks.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Service Account Token Creator (roles/iam.serviceAccountTokenCreator)",
			"Workload Identity User (roles/iam.workloadIdentityUser)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Pub/Sub Service Agent (roles/pubsub.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Cloud Workflows Service Agent (roles/workflows.serviceAgent)",
		},
		"videostitcher.vodAdTagDetails.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"apigateway.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.targetGrpcProxies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"integrations.apigeeSuspensions.resolve": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Approver (roles/integrations.apigeeSuspensionResolver)",
		},
		"source.repos.updateRepoConfig": {
			"Owner (roles/owner)",
			"Source Repository Administrator (roles/source.admin)",
		},
		"networkconnectivity.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
		},
		"privateca.certificateRevocationLists.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"storage.multipartUploads.create": {
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Storage Legacy Bucket Writer (roles/storage.legacyBucketWriter)",
			"Storage Object Creator (roles/storage.objectCreator)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"certificatemanager.dnsauthorizations.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"compute.interconnects.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datamigration.migrationjobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"healthcare.consents.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
		},
		"monitoring.groups.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"apigee.instanceattachments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"compute.forwardingRules.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"spanner.backups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Backup Writer (roles/spanner.backupWriter)",
		},
		"certificatemanager.certmapentries.setIamPolicy": {
			"Owner (roles/owner)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.httpsHealthChecks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"logging.notificationRules.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"recommender.cloudsqlInstanceMemoryUsageInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"servicebroker.bindings.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"aiplatform.tensorboards.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudkms.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS CryptoKey Decrypter (roles/cloudkms.cryptoKeyDecrypter)",
			"Cloud KMS CryptoKey Decrypter Via Delegation (roles/cloudkms.cryptoKeyDecrypterViaDelegation)",
			"Cloud KMS CryptoKey Encrypter (roles/cloudkms.cryptoKeyEncrypter)",
			"Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)",
			"Cloud KMS CryptoKey Encrypter/Decrypter Via Delegation (roles/cloudkms.cryptoKeyEncrypterDecrypterViaDelegation)",
			"Cloud KMS CryptoKey Encrypter Via Delegation (roles/cloudkms.cryptoKeyEncrypterViaDelegation)",
			"Cloud KMS Crypto Operator (roles/cloudkms.cryptoOperator)",
			"Cloud KMS Expert Raw PKCS#1 Key Manager (roles/cloudkms.expertRawPKCS1)",
			"Cloud KMS Importer (roles/cloudkms.importer)",
			"Cloud KMS CryptoKey Public Key Viewer (roles/cloudkms.publicKeyViewer)",
			"Cloud KMS CryptoKey Signer (roles/cloudkms.signer)",
			"Cloud KMS CryptoKey Signer/Verifier (roles/cloudkms.signerVerifier)",
			"Cloud KMS CryptoKey Verifier (roles/cloudkms.verifier)",
			"Cloud KMS Viewer (roles/cloudkms.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"dlp.deidentifyTemplates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP De-identify Templates Editor (roles/dlp.deidentifyTemplatesEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"osconfig.patchJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Patch Job Executor (roles/osconfig.patchJobExecutor)",
			"Patch Job Viewer (roles/osconfig.patchJobViewer)",
		},
		"visualinspection.annotationSpecs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"recommender.computeAddressIdleResourceRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"cloudprivatecatalogproducer.products.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.subnetworks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.urlMaps.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.controllerRevisions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"healthcare.attributeDefinitions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
		},
		"container.csiNodeInfos.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"domains.registrations.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Domains Admin (roles/domains.admin)",
			"Cloud Domains Viewer (roles/domains.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"servicenetworking.services.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Service Networking Admin (roles/servicenetworking.networksAdmin)",
		},
		"automl.datasets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"certificatemanager.certs.setIamPolicy": {
			"Owner (roles/owner)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.healthChecks.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.instances.getEffectiveFirewalls": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.volumeSnapshots.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datastream.streams.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"runtimeconfig.variables.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"baremetalsolution.volumesnapshots.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
		},
		"cloudsql.instances.rotateServerCa": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.zoneOperations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.zoneOperations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.services.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"pubsublite.topics.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"recommender.computeImageIdleResourceRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"compute.targetPools.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastream.connectionProfiles.listStaticServiceIps": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"gkemulticloud.azureClients.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"networkservices.httpFilters.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"osconfig.patchDeployments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"PatchDeployment Admin (roles/osconfig.patchDeploymentAdmin)",
		},
		"billing.accounts.reopen": {
			"Billing Account Administrator (roles/billing.admin)",
		},
		"cloudonefs.isiloncloud.com/fileshares.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
			"Dell EMC Cloud OneFS Viewer (roles/dellemccloudonefs.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"certificatemanager.dnsauthorizations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"cloudasset.assets.exportComputeInstanceGroupManagers": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.instances.setDiskAutoDelete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataflow Worker (roles/dataflow.worker)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.maintenancePolicies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"orgpolicy.policies.update": {
			"Organization Policy Administrator (roles/orgpolicy.policyAdmin)",
		},
		"aiplatform.contexts.addContextChildren": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"clouddeploy.targets.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datafusion.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
			"Cloud Data Fusion Viewer (roles/datafusion.viewer)",
		},
		"eventarc.triggers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Eventarc Viewer (roles/eventarc.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"binaryauthorization.continuousValidationConfig.setIamPolicy": {
			"Owner (roles/owner)",
			"Binary Authorization Policy Administrator (roles/binaryauthorization.policyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"cloudprivatecatalogproducer.products.setIamPolicy": {
			"Owner (roles/owner)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"datastream.routes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"vmmigration.targets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"gkehub.fleet.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"retail.placements.search": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"storage.multipartUploads.abort": {
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Storage Legacy Bucket Writer (roles/storage.legacyBucketWriter)",
			"Storage Object Creator (roles/storage.objectCreator)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"proximitybeacon.namespaces.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"aiplatform.annotations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.features.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"autoscaling.sites.writeMetrics": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Autoscaling Metrics Writer (roles/autoscaling.metricsWriter)",
			"Autoscaling Site Admin (roles/autoscaling.sitesAdmin)",
			"Dataflow Worker (roles/dataflow.worker)",
		},
		"cloudtoolresults.settings.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"monitoring.slos.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Services Editor (roles/monitoring.servicesEditor)",
		},
		"cloudvolumesgcp-api.netapp.com/volumes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
		},
		"compute.addresses.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionTargetHttpProxies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"spanner.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
		},
		"apigee.maskconfigs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"compute.targetHttpsProxies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.storageStates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.licenses.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.namespaces.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"recommender.iamPolicyRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
		},
		"apigee.instanceattachments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"compute.addresses.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
		},
		"documentai.labelerPools.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"networkservices.serviceBindings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudsupport.accounts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Support Account Administrator (roles/cloudsupport.admin)",
			"Support Account Viewer (roles/cloudsupport.viewer)",
		},
		"compute.regionTargetHttpsProxies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"ml.jobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Job Owner (roles/ml.jobOwner)",
			"AI Platform Viewer (roles/ml.viewer)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"vmmigration.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"compute.regionHealthChecks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.auditSinks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datacatalog.entries.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"DataCatalog entry Owner (roles/datacatalog.entryOwner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"managedidentities.domains.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
		},
		"bigquery.reservationAssignments.search": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"bigquery.reservations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"cloudkms.locations.generateRandomBytes": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Crypto Operator (roles/cloudkms.cryptoOperator)",
		},
		"compute.routers.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"threatdetection.detectorSettings.update": {
			"Owner (roles/owner)",
			"Threat Detection Settings Editor (roles/threatdetection.editor)",
		},
		"dialogflow.transitionRouteGroups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"vmmigration.datacenterConnectors.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"aiplatform.customJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.references.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"automl.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"cloudtranslate.languageDetectionModels.predict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
		},
		"dataconnectors.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
		},
		"container.pods.exec": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.volumeSnapshotContents.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datapipelines.pipelines.run": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data pipelines Admin (roles/datapipelines.admin)",
			"Data pipelines Invoker (roles/datapipelines.invoker)",
		},
		"notebooks.executions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"pubsub.subscriptions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"KubeRun Events Data Plane Service Agent (roles/kuberun.eventsDataPlaneServiceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"run.routes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"compute.organizations.setFirewallPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.projects.setCommonInstanceMetadata": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.horizontalPodAutoscalers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataproc.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkservices.endpointConfigSelectors.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"healthcare.fhirStores.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
		},
		"appengine.memcache.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
		},
		"cloudprivatecatalogproducer.targets.associate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"dataproc.agents.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Worker (roles/dataproc.worker)",
		},
		"firebaseinappmessaging.campaigns.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase In-App Messaging Admin (roles/firebaseinappmessaging.admin)",
		},
		"healthcare.consentStores.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
		},
		"compute.instances.updateAccessConfig": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"datamigration.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"ml.studies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"automl.modelEvaluations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"container.petSets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.replicationControllers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"serviceconsumermanagement.tenancyu.removeResource": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Admin of Tenancy Units (roles/serviceconsumermanagement.tenancyUnitsAdmin)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Workload Certificate Service Agent (roles/workloadcertificate.serviceAgent)",
		},
		"livestream.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
		},
		"retail.catalogs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"securitycenter.findings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Center Findings Viewer (roles/securitycenter.findingsViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Google Cloud Security Response Service Agent (roles/securitycenter.securityResponseServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudasset.assets.exportCloudkmsCryptoKeys": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudasset.assets.exportDnsPolicies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsupport.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Support Account Administrator (roles/cloudsupport.admin)",
		},
		"contactcenterinsights.issueModels.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"iam.googleapis.com/workloadIdentityPoolProviders.undelete": {
			"Owner (roles/owner)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
		},
		"bigquery.tables.setCategory": {
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"consumerprocurement.orderAttributions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Billing Account Administrator (roles/billing.admin)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
		},
		"firebaseabt.experimentresults.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
			"Firebase A/B Testing Viewer (roles/firebaseabt.viewer)",
		},
		"healthcare.hl7V2Stores.setIamPolicy": {
			"Owner (roles/owner)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"apigee.datastores.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
		},
		"compute.targetSslProxies.setSslCertificates": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datacatalog.entryGroups.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"managedidentities.peerings.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
		},
		"vpcaccess.connectors.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Serverless VPC Access Admin (roles/vpcaccess.admin)",
		},
		"bigtable.backups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"compute.firewallPolicies.addAssociation": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.instances.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dataproc.autoscalingPolicies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"networkconnectivity.spokes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Hub & Spoke Viewer (roles/networkconnectivity.hubViewer)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"cloudasset.assets.listOrgPolicy": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudvolumesgcp-api.netapp.com/activeDirectories.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
		},
		"compute.instanceGroupManagers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"healthcare.dicomStores.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigee.datastores.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudjobdiscovery.tenants.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
		},
		"livestream.channels.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"pubsublite.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"servicedirectory.services.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"dataplex.zones.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Metadata Reader (roles/dataplex.metadataReader)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebasedynamiclinks.stats.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
			"Firebase Dynamic Links Viewer (roles/firebasedynamiclinks.viewer)",
		},
		"networksecurity.serverTlsPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"actions.agentVersions.deploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Actions Admin (roles/actions.Admin)",
		},
		"automl.models.setIamPolicy": {
			"Owner (roles/owner)",
			"AutoML Admin (roles/automl.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"cloudasset.assets.listAccessPolicy": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsql.databases.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"dataplex.tasks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"composer.dags.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Composer User (roles/composer.user)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.organizations.disableXpnHost": {
			"Compute Admin (roles/compute.admin)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"aiplatform.batchPredictionJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.modelDeploymentMonitoringJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.rowAccessPolicies.getFilteredData": {
			"BigQuery Filtered Data Viewer (roles/bigquery.filteredDataViewer)",
		},
		"cloudprofiler.profiles.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Profiler Agent (roles/cloudprofiler.agent)",
		},
		"cloudsecurityscanner.scanruns.getSummary": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Viewer (roles/cloudsecurityscanner.viewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"automl.annotations.approve": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"cloudtranslate.glossaries.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Cloud Translation API Viewer (roles/cloudtranslate.viewer)",
			"Translation Hub Admin (roles/translationhub.admin)",
			"Translation Hub Portal User (roles/translationhub.portalUser)",
		},
		"pubsub.topics.detachSubscription": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
		},
		"dialogflow.agents.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"dialogflow.knowledgeBases.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"servicedirectory.services.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
		},
		"aiplatform.indexEndpoints.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportComputeForwardingRules": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.instanceTemplates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.instances.getScreenshot": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.instances.setMachineType": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"storage.objects.create": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Deploy Runner (roles/clouddeploy.jobRunner)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Velostrata Storage Access (roles/cloudmigration.storageaccess)",
			"Cloud Optimization Service Agent (roles/cloudoptimization.serviceAgent)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Cloud Translation API Service Agent (roles/cloudtranslate.serviceAgent)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataflow Worker (roles/dataflow.worker)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Writer (roles/dataplex.storageDataWriter)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"DocumentAI Core Service Agent (roles/documentaicore.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Cloud Storage for Firebase Service Agent (roles/firebasestorage.serviceAgent)",
			"Firestore Service Agent (roles/firestore.serviceAgent)",
			"Live Stream Service Agent (roles/livestream.serviceAgent)",
			"Media Asset Service Agent (roles/mediaasset.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Storage Legacy Bucket Writer (roles/storage.legacyBucketWriter)",
			"Storage Object Admin (roles/storage.objectAdmin)",
			"Storage Object Creator (roles/storage.objectCreator)",
			"Transcoder Service Agent (roles/transcoder.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.flowhooks.detachSharedFlow": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"binaryauthorization.policy.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Policy Administrator (roles/binaryauthorization.policyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.pods.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"notebooks.instances.stop": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"axt.labels.get": {
			"Access Transparency Admin (roles/axt.admin)",
		},
		"pubsub.topics.getIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
		},
		"visualinspection.datasets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"aiplatform.contexts.queryContextLineageSubgraph": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"clouddebugger.debuggees.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Debugger User (roles/clouddebugger.user)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.machineImages.useReadOnly": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"cloudjobdiscovery.profiles.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
		},
		"runtimeconfig.variables.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"policyanalyzer.serviceAccountLastAuthenticationActivities.query": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Activity Analysis Viewer (roles/policyanalyzer.activityAnalysisViewer)",
		},
		"pubsub.subscriptions.getIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Pub/Sub Admin (roles/pubsub.admin)",
		},
		"redis.instances.getAuthString": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
		},
		"bigtable.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"clientauthconfig.brands.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"cloudsecurityscanner.results.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Viewer (roles/cloudsecurityscanner.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.bindings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataproc.workflowTemplates.instantiateInline": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
		},
		"riskmanager.reports.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
			"Risk Manager Report Reviewer (roles/riskmanager.reviewer)",
			"Risk Manager Viewer (roles/riskmanager.viewer)",
		},
		"cloudtasks.tasks.fullView": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Enqueuer (roles/cloudtasks.enqueuer)",
			"Cloud Tasks Task Runner (roles/cloudtasks.taskRunner)",
			"Cloud Tasks Viewer (roles/cloudtasks.viewer)",
		},
		"compute.images.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.regionNotificationEndpoints.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"apigee.archivedeployments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"bigquery.rowAccessPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"cloudasset.assets.exportOrgPolicy": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudkms.importJobs.useToImport": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS Importer (roles/cloudkms.importer)",
		},
		"cloudsql.instances.demoteMaster": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"firebaseappdistro.groups.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase App Distribution Admin SDK Service Agent (roles/firebase.appDistributionSdkServiceAgent)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase App Distribution Admin (roles/firebaseappdistro.admin)",
		},
		"iam.serviceAccounts.enable": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Apps Publisher (roles/earthengine.appsPublisher)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
		},
		"resourcemanager.tagKeys.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
		},
		"aiplatform.models.upload": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportComputeTargetTcpProxies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"documentai.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"iam.serviceAccountKeys.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Account Key Admin (roles/iam.serviceAccountKeyAdmin)",
		},
		"securitycenter.containerthreatdetectionsettings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"compute.firewalls.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.networks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Build Integrations Owner (roles/cloudbuild.integrationsOwner)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.targetHttpsProxies.setSslPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataflow.metrics.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Dataflow Viewer (roles/dataflow.viewer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
		},
		"documentai.processorVersions.processOnline": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI API User (roles/documentai.apiUser)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"compute.targetVpnGateways.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebasedynamiclinks.links.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
			"Firebase Dynamic Links Viewer (roles/firebasedynamiclinks.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"privateca.certificates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"securitycenter.findings.group": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Center Findings Viewer (roles/securitycenter.findingsViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"spanner.backups.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
		},
		"aiplatform.humanInTheLoops.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"dlp.storedInfoTypes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Stored InfoTypes Editor (roles/dlp.storedInfoTypesEditor)",
		},
		"ml.versions.predict": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
			"AI Platform Model User (roles/ml.modelUser)",
		},
		"notebooks.environments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.selfSubjectRulesReviews.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"deploymentmanager.deployments.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"storagetransfer.operations.resume": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
		},
		"cloudprivatecatalogproducer.catalogAssociations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"cloudprivatecatalogproducer.catalogs.setIamPolicy": {
			"Owner (roles/owner)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"cloudtoolresults.histories.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"compute.sslPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"contactcenterinsights.analyses.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"notebooks.schedules.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"bigquery.tables.setIamPolicy": {
			"Owner (roles/owner)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"container.networkPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.persistentVolumes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataproc.agents.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Worker (roles/dataproc.worker)",
		},
		"dialogflow.knowledgeBases.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"billing.subscriptions.list": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"managedidentities.domains.resetpassword": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
		},
		"oauthconfig.testusers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
			"OAuth Config Viewer (roles/oauthconfig.viewer)",
		},
		"servicedirectory.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"container.thirdPartyObjects.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"fleetengine.trips.search": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Fleet Engine Driver SDK User (roles/fleetengine.driverSdkUser)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
		},
		"vmmigration.groups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"apigee.envgroups.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"apigee.proxies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"apikeys.keys.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"API Keys Admin (roles/serviceusage.apiKeysAdmin)",
		},
		"cloudtranslate.glossaries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Cloud Translation API Viewer (roles/cloudtranslate.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Translation Hub Admin (roles/translationhub.admin)",
			"Translation Hub Portal User (roles/translationhub.portalUser)",
		},
		"container.podTemplates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"vmmigration.utilizationReports.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"aiplatform.indexes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"billing.resourceAssociations.delete": {
			"Billing Account Administrator (roles/billing.admin)",
		},
		"dlp.jobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Jobs Editor (roles/dlp.jobsEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"transcoder.jobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Media Asset Service Agent (roles/mediaasset.serviceAgent)",
			"Transcoder Admin (roles/transcoder.admin)",
			"Transcoder Viewer (roles/transcoder.viewer)",
		},
		"apigee.targetservers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"gkehub.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Agent (roles/anthos.serviceAgent)",
			"Anthos Audit Service Agent (roles/anthosaudit.serviceAgent)",
			"Anthos Config Management Service Agent (roles/anthosconfigmanagement.serviceAgent)",
			"Anthos Identity Service Agent (roles/anthosidentityservice.serviceAgent)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"App Development Experience Service Agent (roles/appdevelopmentexperience.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Multi-cluster metering Service Agent (roles/multiclustermetering.serviceAgent)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Workload Certificate Service Agent (roles/workloadcertificate.serviceAgent)",
		},
		"spanner.databases.drop": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
		},
		"stackdriver.resourceMetadata.write": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Stackdriver Resource Metadata Writer (roles/stackdriver.resourceMetadata.writer)",
		},
		"storagetransfer.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
		},
		"apigee.rateplans.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
		},
		"appengine.runtimes.actAsAdmin": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"datastream.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.contexts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.dicomStores.deidentify": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
		},
		"run.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud Run Admin (roles/run.admin)",
		},
		"vmwareengine.services.view": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VMware Engine Service Admin (roles/vmwareengine.vmwareengineAdmin)",
			"VMware Engine Service Viewer (roles/vmwareengine.vmwareengineViewer)",
		},
		"compute.instances.suspend": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"datalabeling.annotateddatasets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.messages.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"gkemulticloud.azureNodePools.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"healthcare.dicomStores.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
		},
		"vpcaccess.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Serverless VPC Access Admin (roles/vpcaccess.admin)",
			"Serverless VPC Access User (roles/vpcaccess.user)",
			"Serverless VPC Access Viewer (roles/vpcaccess.viewer)",
		},
		"apigee.sharedflowrevisions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"cloudvolumesgcp-api.netapp.com/volumes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
		},
		"compute.instances.updateShieldedInstanceConfig": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"dialogflow.conversations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"metastore.backups.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"bigquery.bireservations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"logging.logs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Logging Admin (roles/logging.admin)",
		},
		"recommender.resourcemanagerProjectUtilizationRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Project Utilization Recommender Admin (roles/recommender.projectUtilAdmin)",
		},
		"visualinspection.annotationSets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"apigee.environments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"cloudscheduler.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Cloud Scheduler Viewer (roles/cloudscheduler.viewer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
		},
		"container.clusterRoleBindings.create": {
			"Owner (roles/owner)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebaseauth.users.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Identity Platform Admin (roles/identityplatform.admin)",
			"Identity Toolkit Admin (roles/identitytoolkit.admin)",
		},
		"recommender.cloudAssetInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Asset Insights Admin (roles/recommender.cloudAssetInsightsAdmin)",
			"Cloud Asset Insights Viewer (roles/recommender.cloudAssetInsightsViewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsql.instances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"container.customResourceDefinitions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"dialogflow.fulfillments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"livestream.events.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
		},
		"privateca.certificateAuthorities.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"dns.responsePolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"monitoring.notificationChannels.verify": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring NotificationChannel Editor (roles/monitoring.notificationChannelEditor)",
		},
		"privateca.reusableConfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"servicebroker.bindings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"aiplatform.trainingPipelines.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.trials.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.networks.access": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Data Connectors Service Agent (roles/dataconnectors.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Serverless VPC Access User (roles/vpcaccess.user)",
		},
		"dataplex.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.nodeGroups.addNodes": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.publicAdvertisedPrefixes.updatePolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"resourcemanager.tagKeys.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
		},
		"appengine.versions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.instances.setMinCpuPlatform": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"containeranalysis.occurrences.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Occurrences Editor (roles/containeranalysis.occurrences.editor)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
		},
		"dialogflow.conversations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"servicemanagement.services.quota": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud API Gateway Service Agent (roles/apigateway.serviceAgent)",
			"Cloud Endpoints Service Agent (roles/endpoints.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Service Controller (roles/servicemanagement.serviceController)",
		},
		"apigee.keystores.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"compute.interconnects.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"iap.tunnel.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"logging.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"earthengine.filmstripthumbnails.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"ml.models.setIamPolicy": {
			"Owner (roles/owner)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
		},
		"aiplatform.tensorboardRuns.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.resourcefiles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"commerceoffercatalog.offers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Commerce Offer Catalog Offers Viewer (roles/commerceoffercatalog.offersViewer)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
			"Consumer Procurement Order Viewer (roles/consumerprocurement.orderViewer)",
		},
		"compute.regionTargetHttpProxies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.targetInstances.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.urlMaps.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.events.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"containeranalysis.notes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Notes Attacher (roles/containeranalysis.notes.attacher)",
			"Container Analysis Notes Editor (roles/containeranalysis.notes.editor)",
			"Container Analysis Occurrences for Notes Viewer (roles/containeranalysis.notes.occurrences.viewer)",
			"Container Analysis Notes Viewer (roles/containeranalysis.notes.viewer)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
		},
		"aiplatform.dataItems.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.developersubscriptions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
		},
		"appengine.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Viewer (roles/appengine.appViewer)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudfunctions.functions.sourceCodeSet": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"compute.routes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataproc.workflowTemplates.instantiate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
		},
		"datastream.privateConnections.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"earthengine.thumbnails.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"apigee.developerbalances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"artifactregistry.aptartifacts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.vpnTunnels.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"earthengine.operations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"iap.web.getIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"pubsub.topics.updateTag": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Tag Editor (roles/datacatalog.tagEditor)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
		},
		"aiplatform.pipelineJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automlrecommendations.placements.getStats": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"bigtable.tables.readRows": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"compute.networks.mirror": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute packet mirroring admin (roles/compute.packetMirroringAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataproc.workflowTemplates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Viewer (roles/dataproc.viewer)",
		},
		"bigquery.tables.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"BigQuery Metadata Viewer (roles/bigquery.metadataViewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"documentai.processorTypes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"pubsublite.topics.computeMessageStats": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Subscriber (roles/pubsublite.subscriber)",
		},
		"serviceusage.quotas.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Android Management User (roles/androidmanagement.user)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Cloud Profiler User (roles/cloudprofiler.user)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Viewer (roles/cloudsecurityscanner.viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Environment User and Storage Object Viewer (roles/composer.environmentAndStorageObjectViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer User (roles/composer.user)",
			"Composer Worker (roles/composer.worker)",
			"Compute Admin (roles/compute.admin)",
			"Compute Image User (roles/compute.imageUser)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Compute packet mirroring admin (roles/compute.packetMirroringAdmin)",
			"Compute packet mirroring user (roles/compute.packetMirroringUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep User (roles/dataprep.projects.user)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Quota Administrator (roles/servicemanagement.quotaAdmin)",
			"Quota Viewer (roles/servicemanagement.quotaViewer)",
			"Service Usage Admin (roles/serviceusage.serviceUsageAdmin)",
			"Service Usage Consumer (roles/serviceusage.serviceUsageConsumer)",
			"Service Usage Viewer (roles/serviceusage.serviceUsageViewer)",
		},
		"container.thirdPartyResources.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataplex.zones.setIamPolicy": {
			"Owner (roles/owner)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"integrations.securityAuthConfigs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"storage.buckets.deleteTagBinding": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"threatdetection.sinkSettings.get": {
			"Owner (roles/owner)",
			"Threat Detection Settings Editor (roles/threatdetection.editor)",
			"Threat Detection Settings Viewer (roles/threatdetection.viewer)",
		},
		"cloudasset.assets.exportManagedidentitiesDomain": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.volumeAttachments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.volumeSnapshotContents.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dlp.jobTriggers.hybridInspect": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Job Triggers Editor (roles/dlp.jobTriggersEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"tpu.nodes.stop": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"TPU Admin (roles/tpu.admin)",
		},
		"notebooks.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"servicemanagement.services.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Cloud API Gateway Management Service Agent (roles/apigateway_management.serviceAgent)",
			"Endpoints Portal Admin (roles/endpoints.portalAdmin)",
			"Cloud Endpoints Service Agent (roles/endpoints.serviceAgent)",
			"Endpoints Portal Service Agent (roles/endpointsportal.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Service Config Editor (roles/servicemanagement.configEditor)",
			"Service Controller (roles/servicemanagement.serviceController)",
		},
		"visualinspection.annotations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"aiplatform.metadataStores.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"billing.resourceCosts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
		},
		"cloudasset.assets.exportComputeAddress": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsql.instances.clone": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.instances.setTags": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"videostitcher.cdnKeys.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
		},
		"aiplatform.contexts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.forwardingRules.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.controllerRevisions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"integrations.securityAuthConfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"servicenetworking.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Networking Admin (roles/servicenetworking.networksAdmin)",
		},
		"container.podDisruptionBudgets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.documents.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"visualinspection.modules.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"apigee.deployments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudasset.assets.analyzeIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudasset.savedqueries.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
		},
		"cloudsecurityscanner.scans.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Runner (roles/cloudsecurityscanner.runner)",
			"Web Security Scanner Viewer (roles/cloudsecurityscanner.viewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"consumerprocurement.orders.place": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Billing Account Administrator (roles/billing.admin)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
		},
		"dialogflow.contexts.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"essentialcontacts.contacts.send": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Essential Contacts Admin (roles/essentialcontacts.admin)",
		},
		"gkemulticloud.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
		},
		"aiplatform.entityTypes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudtoolresults.histories.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.horizontalPodAutoscalers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.podPresets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.agents.validate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"logging.buckets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"appengine.versions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"cloudasset.assets.exportAppengineServices": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.addresses.useInternal": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.licenseCodes.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"networksecurity.clientTlsPolicies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.sessionEntityTypes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"aiplatform.artifacts.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportAccessPolicy": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.managedCertificates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datamigration.migrationjobs.generateSshScript": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"dataplex.assets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"gcp.redisenterprise.com/subscriptions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
			"Redis Enterprise Cloud Viewer (roles/redisenterprisecloud.viewer)",
		},
		"ml.models.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
		},
		"networksecurity.authorizationPolicies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"automl.models.undeploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"compute.globalOperations.setIamPolicy": {
			"Owner (roles/owner)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Organization Resource Admin (roles/compute.orgSecurityResourceAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.jobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataplex.environments.setIamPolicy": {
			"Owner (roles/owner)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"dlp.projectDataProfiles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Data Profiles Reader (roles/dlp.dataProfilesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Reader (roles/dlp.projectDataProfilesReader)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"networkservices.endpointConfigSelectors.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"binaryauthorization.policy.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Binary Authorization Policy Administrator (roles/binaryauthorization.policyAdmin)",
			"Binary Authorization Policy Editor (roles/binaryauthorization.policyEditor)",
		},
		"firebasedynamiclinks.destinations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
			"Firebase Dynamic Links Viewer (roles/firebasedynamiclinks.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"lifesciences.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Life Sciences Admin (roles/lifesciences.admin)",
			"Cloud Life Sciences Editor (roles/lifesciences.editor)",
			"Cloud Life Sciences Viewer (roles/lifesciences.viewer)",
			"Cloud Life Sciences Workflows Runner (roles/lifesciences.workflowsRunner)",
		},
		"iam.serviceAccounts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Apps Publisher (roles/earthengine.appsPublisher)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
			"Create Service Accounts (roles/iam.serviceAccountCreator)",
		},
		"compute.networks.listPeeringRoutes": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"compute.vpnGateways.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.networkPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.replicaSets.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datastore.locations.list": {
			"Owner (roles/owner)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigeeconnect.connections.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Connect Admin (roles/apigeeconnect.Admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudkms.keyRings.listTagBindings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Tag Viewer (roles/resourcemanager.tagViewer)",
		},
		"compute.targetHttpProxies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastore.namespaces.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"remotebuildexecution.actions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Remote Build Execution Artifact Admin (roles/remotebuildexecution.artifactAdmin)",
			"Remote Build Execution Artifact Creator (roles/remotebuildexecution.artifactCreator)",
			"Remote Build Execution Artifact Viewer (roles/remotebuildexecution.artifactViewer)",
			"Remote Build Execution Reservation Admin (roles/remotebuildexecution.reservationAdmin)",
		},
		"compute.machineTypes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dataplex.partitions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
		},
		"firebaseauth.users.sendEmail": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Identity Platform Admin (roles/identityplatform.admin)",
			"Identity Toolkit Admin (roles/identitytoolkit.admin)",
		},
		"gkemulticloud.azureClusters.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"healthcare.fhirStores.searchResources": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
		},
		"dataplex.entities.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
		},
		"dialogflow.contexts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"gameservices.gameServerDeployments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
		},
		"apigee.developerbalances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
		},
		"automl.datasets.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"certificatemanager.certmapentries.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"clouddeploy.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Approver (roles/clouddeploy.approver)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
		},
		"cloudfunctions.functions.invoke": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Invoker (roles/cloudfunctions.invoker)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Content Warehouse Service Agent (roles/contentwarehouse.serviceAgent)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"servicebroker.catalogs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"healthcare.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
			"Healthcare Annotation Reader (roles/healthcare.annotationReader)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
			"Healthcare Annotation Store Viewer (roles/healthcare.annotationStoreViewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
			"Healthcare Dataset Viewer (roles/healthcare.datasetViewer)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Healthcare DICOM Store Viewer (roles/healthcare.dicomStoreViewer)",
			"Healthcare DICOM Viewer (roles/healthcare.dicomViewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Healthcare FHIR Store Viewer (roles/healthcare.fhirStoreViewer)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Healthcare HL7v2 Message Ingest (roles/healthcare.hl7V2Ingest)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
			"Healthcare HL7v2 Store Viewer (roles/healthcare.hl7V2StoreViewer)",
			"Healthcare NLP Service Viewer (roles/healthcare.nlpServiceViewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigateway.gateways.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.thirdPartyResources.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.sessionEntityTypes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"documentai.processorTypes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"file.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
			"Cloud Filestore Viewer (roles/file.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.regionUrlMaps.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.volumeSnapshotContents.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"iap.webServiceVersions.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"compute.firewallPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.namespaces.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebaseml.modelversions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
		},
		"notebooks.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"cloudkms.keyRings.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Assured Workloads Service Agent (roles/assuredworkloads.serviceAgent)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
		},
		"healthcare.annotationStores.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"logging.exclusions.update": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"bigquery.reservationAssignments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"container.clusterRoles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"spanner.databases.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
		},
		"notebooks.instances.reset": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"vmmigration.targets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"bigtable.backups.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"cloudasset.feeds.delete": {
			"Owner (roles/owner)",
			"Assured Workloads Service Agent (roles/assuredworkloads.serviceAgent)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.ingresses.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataproc.jobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"iap.webServices.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"dialogflow.flows.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"dialogflow.webhooks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Dialogflow Webhook Admin (roles/dialogflow.webhookAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"visualinspection.datasets.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"apigee.archivedeployments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"compute.networks.updatePeering": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"compute.snapshots.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.podDisruptionBudgets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datalabeling.examples.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
		},
		"compute.networkEndpointGroups.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.csiNodes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"logging.logs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"spanner.sessions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database Reader (roles/spanner.databaseReader)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"compute.targetSslProxies.setProxyHeader": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataflow.workItems.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataflow Worker (roles/dataflow.worker)",
		},
		"datalabeling.instructions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
		},
		"monitoring.uptimeCheckConfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Uptime Check Configuration Editor (roles/monitoring.uptimeCheckConfigEditor)",
			"Monitoring Uptime Check Configuration Viewer (roles/monitoring.uptimeCheckConfigViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"spanner.databaseOperations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
		},
		"bigquery.rowAccessPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"dialogflow.documents.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"gameservices.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
		},
		"source.repos.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Endpoints Portal Service Agent (roles/endpointsportal.serviceAgent)",
			"Source Repository Administrator (roles/source.admin)",
			"Source Repository Reader (roles/source.reader)",
			"Source Repository Writer (roles/source.writer)",
		},
		"spanner.databases.getDdl": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database Reader (roles/spanner.databaseReader)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"dlp.inspectTemplates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Inspect Templates Editor (roles/dlp.inspectTemplatesEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"gkemulticloud.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"ondemandscanning.scans.analyzePackages": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"On-Demand Scanning Admin (roles/ondemandscanning.admin)",
		},
		"orgpolicy.policies.delete": {
			"Organization Policy Administrator (roles/orgpolicy.policyAdmin)",
		},
		"accesscontextmanager.accessPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"apigee.proxies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"autoscaling.sites.setIamPolicy": {
			"Owner (roles/owner)",
			"Autoscaling Site Admin (roles/autoscaling.sitesAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"earthengine.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"bigquery.savedqueries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"clientauthconfig.clients.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase SDK Provisioning Service Agent (roles/firebase.sdkProvisioningServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
			"OAuth Config Viewer (roles/oauthconfig.viewer)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"container.storageStates.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.securitySettings.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"firebase.clients.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase SDK Provisioning Service Agent (roles/firebase.sdkProvisioningServiceAgent)",
		},
		"cloudasset.savedqueries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
		},
		"compute.images.deleteTagBinding": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"firebaserules.rulesets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
		},
		"aiplatform.executions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.regionNotificationEndpoints.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datastream.objects.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"monitoring.publicWidgets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"binaryauthorization.attestors.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Attestor Admin (roles/binaryauthorization.attestorsAdmin)",
			"Binary Authorization Attestor Editor (roles/binaryauthorization.attestorsEditor)",
			"Binary Authorization Attestor Image Verifier (roles/binaryauthorization.attestorsVerifier)",
			"Binary Authorization Attestor Viewer (roles/binaryauthorization.attestorsViewer)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"earlyaccesscenter.campaigns.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Early Access Center Administrator (roles/earlyaccesscenter.admin)",
			"Early Access Center Viewer (roles/earlyaccesscenter.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"notebooks.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"cloudprivatecatalogproducer.producerCatalogs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"datastore.databases.export": {
			"Owner (roles/owner)",
			"Cloud Datastore Import Export Admin (roles/datastore.importExportAdmin)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"documentai.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"monitoring.notificationChannels.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring NotificationChannel Editor (roles/monitoring.notificationChannelEditor)",
		},
		"securitycenter.findingexternalsystems.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center External Systems Editor (roles/securitycenter.externalSystemsEditor)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"networkconnectivity.spokes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"recommender.cloudsqlInstanceDiskUsageTrendInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"servicemanagement.services.bind": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase SDK Provisioning Service Agent (roles/firebase.sdkProvisioningServiceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Service Consumer (roles/servicemanagement.serviceConsumer)",
		},
		"cloudprivatecatalogproducer.products.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"compute.firewallPolicies.removeAssociation": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.roles.create": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebaseauth.users.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Identity Platform Admin (roles/identityplatform.admin)",
			"Identity Toolkit Admin (roles/identitytoolkit.admin)",
		},
		"healthcare.annotationStores.setIamPolicy": {
			"Owner (roles/owner)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"apigeeconnect.endpoints.connect": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Connect Agent (roles/apigeeconnect.Agent)",
		},
		"container.updateInfos.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"domains.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Domains Admin (roles/domains.admin)",
			"Cloud Domains Viewer (roles/domains.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"eventarc.triggers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"networkservices.endpointConfigSelectors.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"pubsub.subscriptions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"autoscaling.sites.readRecommendations": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Autoscaling Recommendations Reader (roles/autoscaling.recommendationsReader)",
			"Autoscaling Site Admin (roles/autoscaling.sitesAdmin)",
			"Dataflow Worker (roles/dataflow.worker)",
		},
		"cloudfunctions.functions.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudsecurityscanner.crawledurls.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Runner (roles/cloudsecurityscanner.runner)",
			"Web Security Scanner Viewer (roles/cloudsecurityscanner.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.fhirStores.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
		},
		"ml.jobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Job Owner (roles/ml.jobOwner)",
			"AI Platform Viewer (roles/ml.viewer)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"dataplex.assets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"memcache.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
		},
		"recaptchaenterprise.keys.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"reCAPTCHA Enterprise Admin (roles/recaptchaenterprise.admin)",
			"reCAPTCHA Enterprise Viewer (roles/recaptchaenterprise.viewer)",
		},
		"cloudiot.devices.unbindGateway": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
		},
		"compute.forwardingRules.pscUpdate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"contactcenterinsights.analyses.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
		},
		"storagetransfer.projects.getServiceAccount": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
			"Storage Transfer Viewer (roles/storagetransfer.viewer)",
		},
		"securitycenter.assets.group": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Assets Viewer (roles/securitycenter.assetsViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"aiplatform.annotations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.datasets.update": {
			"Owner (roles/owner)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"cloudkms.cryptoKeyVersions.destroy": {
			"Owner (roles/owner)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
		},
		"compute.oslogin.updateExternalUser": {
			"Owner (roles/owner)",
			"Compute Admin (roles/compute.admin)",
			"Compute OS Login External User (roles/compute.osLoginExternalUser)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"iap.tunnelInstances.accessViaIAP": {
			"Owner (roles/owner)",
			"IAP-secured Tunnel User (roles/iap.tunnelResourceAccessor)",
		},
		"videostitcher.slates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
		},
		"compute.securityPolicies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.auditSinks.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.clusters.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Cluster Admin (roles/container.clusterAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
		},
		"datastream.privateConnections.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"fleetengine.vehicles.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
		},
		"container.petSets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataproc.clusters.stop": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"recommender.iamPolicyRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
		},
		"servicebroker.instances.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Service Broker Admin (roles/servicebroker.admin)",
		},
		"clientauthconfig.brands.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"container.clusterRoles.update": {
			"Owner (roles/owner)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"logging.fields.access": {
			"Owner (roles/owner)",
			"Logging Admin (roles/logging.admin)",
			"Log Field Accessor (roles/logging.fieldAccessor)",
		},
		"networkmanagement.connectivitytests.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Network Management Admin (roles/networkmanagement.admin)",
		},
		"recommender.computeDiskIdleResourceInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
		},
		"compute.disks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.nodes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datastore.entities.allocateIds": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
		},
		"gkemulticloud.awsNodePools.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"cloudvolumesgcp-api.netapp.com/volumes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
		},
		"compute.subnetworks.expandIpCidrRange": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.priorityClasses.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"integrations.apigeeSfdcChannels.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"runtimeconfig.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"automl.columnSpecs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"cloudasset.assets.exportStorageBuckets": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"containeranalysis.occurrences.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Occurrences Editor (roles/containeranalysis.occurrences.editor)",
			"Container Analysis Occurrences Viewer (roles/containeranalysis.occurrences.viewer)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
		},
		"recommender.iamPolicyLateralMovementInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
		},
		"resourcemanager.folders.getIamPolicy": {
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Editor (roles/resourcemanager.folderEditor)",
			"Folder IAM Admin (roles/resourcemanager.folderIamAdmin)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
		},
		"cloudsql.instances.stopReplica": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"dataplex.lakes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
		},
		"servicenetworking.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Service Networking Admin (roles/servicenetworking.networksAdmin)",
		},
		"firebasestorage.buckets.removeFirebase": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud Storage for Firebase Admin (roles/firebasestorage.admin)",
		},
		"apigateway.apis.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"ApiGateway Admin (roles/apigateway.admin)",
		},
		"apigateway.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"ApiGateway Admin (roles/apigateway.admin)",
		},
		"bigquery.datasets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery User (roles/bigquery.user)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
			"Cloud Logging Service Agent (roles/logging.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"cloudtrace.insights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace User (roles/cloudtrace.user)",
		},
		"container.secrets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"apigee.datastores.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
		},
		"compute.disks.createTagBinding": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"datalabeling.annotateddatasets.label": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
		},
		"healthcare.dicomStores.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
		},
		"meshconfig.projects.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Config Admin (roles/meshconfig.admin)",
			"Mesh Config Viewer (roles/meshconfig.viewer)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
		},
		"privateca.certificates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"notebooks.runtimes.reset": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"pubsublite.subscriptions.getCursor": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Subscriber (roles/pubsublite.subscriber)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"visualinspection.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"cloudsecurityscanner.scans.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Runner (roles/cloudsecurityscanner.runner)",
			"Web Security Scanner Viewer (roles/cloudsecurityscanner.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudsql.instances.promoteReplica": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.machineImages.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"deploymentmanager.deployments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"metastore.imports.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"cloudasset.savedqueries.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
		},
		"gameservices.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
		},
		"recommender.iamPolicyInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
		},
		"compute.targetHttpsProxies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Web Security Scanner Service Agent (roles/websecurityscanner.serviceAgent)",
		},
		"storagetransfer.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
			"Storage Transfer Viewer (roles/storagetransfer.viewer)",
		},
		"vmmigration.deployments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"ml.studies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"osconfig.patchDeployments.execute": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"PatchDeployment Admin (roles/osconfig.patchDeploymentAdmin)",
		},
		"pubsublite.subscriptions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
		},
		"cloudasset.assets.exportAppengineVersions": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudjobdiscovery.jobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
		},
		"connectors.connections.setIamPolicy": {
			"Owner (roles/owner)",
			"Connector Admin (roles/connectors.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"container.limitRanges.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dlp.analyzeRiskTemplates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Analyze Risk Templates Editor (roles/dlp.analyzeRiskTemplatesEditor)",
			"DLP Analyze Risk Templates Reader (roles/dlp.analyzeRiskTemplatesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"storagetransfer.jobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
		},
		"servicenetworking.services.addPeering": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Service Networking Admin (roles/servicenetworking.networksAdmin)",
		},
		"spanner.instances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
		},
		"apigateway.apiconfigs.setIamPolicy": {
			"Owner (roles/owner)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"domains.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Domains Admin (roles/domains.admin)",
			"Cloud Domains Viewer (roles/domains.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"gameservices.gameServerDeployments.rollout": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Game Services API Admin (roles/gameservices.admin)",
		},
		"recaptchaenterprise.metrics.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"reCAPTCHA Enterprise Admin (roles/recaptchaenterprise.admin)",
			"reCAPTCHA Enterprise Viewer (roles/recaptchaenterprise.viewer)",
		},
		"gcp.redisenterprise.com/databases.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
		},
		"aiplatform.dataLabelingJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.developerattributes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"automlrecommendations.catalogItems.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"billing.budgets.create": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
		},
		"dataplex.assetActions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"privateca.caPools.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"CA Service Admin (roles/privateca.admin)",
		},
		"recommender.bigqueryCapacityCommitmentsRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Slot Recommender Admin (roles/recommender.bigQueryCapacityCommitmentsAdmin)",
			"BigQuery Recommender Billing Account Admin (roles/recommender.bigQueryCapacityCommitmentsBillingAccountAdmin)",
			"BigQuery Recommender Billing Account Viewer (roles/recommender.bigQueryCapacityCommitmentsBillingAccountViewer)",
			"BigQuery Recommender Project Admin (roles/recommender.bigQueryCapacityCommitmentsProjectAdmin)",
			"BigQuery Recommender Project Viewer (roles/recommender.bigQueryCapacityCommitmentsProjectViewer)",
			"BigQuery Slot Recommender Viewer (roles/recommender.bigQueryCapacityCommitmentsViewer)",
		},
		"workflows.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Viewer (roles/workflows.viewer)",
		},
		"apigee.deployments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"deploymentmanager.deployments.cancelPreview": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"dlp.inspectFindings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Inspect Findings Reader (roles/dlp.inspectFindingsReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dlp.projectDataProfiles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Data Profiles Reader (roles/dlp.dataProfilesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Reader (roles/dlp.projectDataProfilesReader)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkconnectivity.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"datastore.namespaces.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkservices.httpfilters.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigee.envgroups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"recommender.computeInstanceGroupManagerMachineTypeRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
		},
		"storagetransfer.agentpools.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
			"Storage Transfer Viewer (roles/storagetransfer.viewer)",
		},
		"bigquery.connections.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Connection Admin (roles/bigquery.connectionAdmin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"container.podSecurityPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataplex.environments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"policysimulator.replays.create": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Simulator Admin (roles/policysimulator.admin)",
		},
		"aiplatform.dataLabelingJobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.persistentVolumeClaims.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"networksecurity.authorizationPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"privateca.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"recommender.computeInstanceGroupManagerMachineTypeRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"aiplatform.migratableResources.migrate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Migration Service User (roles/aiplatform.migrator)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.nasJobs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.commitments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"healthcare.userDataMappings.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
		},
		"compute.sslPolicies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.targetSslProxies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataplex.assets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Metadata Reader (roles/dataplex.metadataReader)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
			"Dataplex Viewer (roles/dataplex.viewer)",
		},
		"datastore.indexes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Datastore Index Admin (roles/datastore.indexAdmin)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"firebaseml.models.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
		},
		"consumerprocurement.entitlements.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Consumer Procurement Entitlement Manager (roles/consumerprocurement.entitlementManager)",
			"Consumer Procurement Entitlement Viewer (roles/consumerprocurement.entitlementViewer)",
		},
		"dialogflow.agents.searchResources": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"documentai.processorVersions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"aiplatform.featurestores.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Instance Creator (roles/aiplatform.featurestoreInstanceCreator)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store Resource Viewer (roles/aiplatform.featurestoreResourceViewer)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.targetInstances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.targetInstances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gcp.redisenterprise.com/subscriptions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Redis Enterprise Cloud Admin (roles/redisenterprisecloud.admin)",
		},
		"remotebuildexecution.workerpools.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Remote Build Execution Configuration Admin (roles/remotebuildexecution.configurationAdmin)",
			"Remote Build Execution Configuration Viewer (roles/remotebuildexecution.configurationViewer)",
		},
		"accesscontextmanager.policies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"apigee.canaryevaluations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Runtime Agent (roles/apigee.runtimeAgent)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"apigee.resourcefiles.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"container.horizontalPodAutoscalers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datamigration.migrationjobs.setIamPolicy": {
			"Owner (roles/owner)",
			"Database Migration Admin (roles/datamigration.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.instances.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"domains.registrations.configureManagement": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Domains Admin (roles/domains.admin)",
		},
		"networkmanagement.connectivitytests.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Network Management Admin (roles/networkmanagement.admin)",
		},
		"networksecurity.serverTlsPolicies.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"ondemandscanning.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"On-Demand Scanning Admin (roles/ondemandscanning.admin)",
		},
		"orgpolicy.policy.set": {
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Organization Policy Administrator (roles/orgpolicy.policyAdmin)",
		},
		"osconfig.instanceOSPoliciesCompliances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"InstanceOSPoliciesCompliance Viewer (roles/osconfig.instanceOSPoliciesComplianceViewer)",
		},
		"artifactregistry.packages.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.priorityClasses.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.storageClasses.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"integrations.apigeeIntegrationVers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
		},
		"logging.notificationRules.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
			"Error Reporting Viewer (roles/errorreporting.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"securitycenter.subscription.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"recommender.computeDiskIdleResourceRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
		},
		"securitycenter.sources.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Sources Admin (roles/securitycenter.sourcesAdmin)",
		},
		"connectors.runtimeconfig.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
		},
		"container.deployments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"datastream.connectionProfiles.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"managedidentities.domains.reconfigureTrust": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
		},
		"proximitybeacon.namespaces.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
		},
		"cloudasset.assets.exportBigtableCluster": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudfunctions.functions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"contactcenterinsights.issueModels.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
		},
		"networkservices.serviceBindings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"transcoder.jobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Media Asset Service Agent (roles/mediaasset.serviceAgent)",
			"Transcoder Admin (roles/transcoder.admin)",
			"Transcoder Service Agent (roles/transcoder.serviceAgent)",
		},
		"visualinspection.modules.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"cloudonefs.isiloncloud.com/fileshares.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
			"Dell EMC Cloud OneFS Viewer (roles/dellemccloudonefs.viewer)",
		},
		"dialogflow.phoneNumbers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"proximitybeacon.namespaces.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
		},
		"retail.products.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"securitycenter.securitycentersettings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"iam.serviceAccounts.signBlob": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Service Account Token Creator (roles/iam.serviceAccountTokenCreator)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Pub/Sub Service Agent (roles/pubsub.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"vmmigration.sources.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"certificatemanager.certs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"certificatemanager.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.targetHttpProxies.setUrlMap": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.pods.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gkemulticloud.azureClients.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
		},
		"servicedirectory.endpoints.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Service Directory Admin (roles/servicedirectory.admin)",
		},
		"cloudsql.instances.connect": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Connection Service Agent (roles/bigqueryconnection.serviceAgent)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Client (roles/cloudsql.client)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.knowledgeBases.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"privateca.certificates.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"recommender.cloudsqlOverprovisionedInstanceRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"resourcemanager.tagValues.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Tag Viewer (roles/resourcemanager.tagViewer)",
		},
		"chroniclesm.gcpSettings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Chronicle Service Admin (roles/chroniclesm.admin)",
			"Chronicle Service Viewer (roles/chroniclesm.viewer)",
		},
		"cloudasset.assets.exportComputeBackendBuckets": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"privateca.certificateTemplates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"run.services.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"tpu.nodes.reimage": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"TPU Admin (roles/tpu.admin)",
		},
		"storage.multipartUploads.list": {
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Storage Legacy Bucket Reader (roles/storage.legacyBucketReader)",
			"Storage Legacy Bucket Writer (roles/storage.legacyBucketWriter)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.regionBackendServices.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.frontendConfigs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"datamigration.connectionprofiles.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"healthcare.fhirStores.executeBundle": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
		},
		"recommender.iamServiceAccountInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
		},
		"cloudasset.assets.exportContainerClusterrole": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.managedCertificates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.conversationDatasets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"dialogflow.environments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"dlp.jobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Jobs Editor (roles/dlp.jobsEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"accesscontextmanager.policies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"automlrecommendations.catalogItems.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"container.storageStates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"ml.jobs.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Job Owner (roles/ml.jobOwner)",
		},
		"retail.products.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"appengine.services.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Viewer (roles/appengine.appViewer)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"automlrecommendations.apiKeys.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.routers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"managedidentities.sqlintegrations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"monitoring.services.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Services Editor (roles/monitoring.servicesEditor)",
			"Monitoring Services Viewer (roles/monitoring.servicesViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"automl.tableSpecs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudiot.devices.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Device Controller (roles/cloudiot.deviceController)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
			"Cloud IoT Viewer (roles/cloudiot.viewer)",
		},
		"compute.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Google Cloud Security Response Service Agent (roles/securitycenter.securityResponseServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dataflow.workItems.lease": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataflow Worker (roles/dataflow.worker)",
		},
		"domains.registrations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Domains Admin (roles/domains.admin)",
			"Cloud Domains Viewer (roles/domains.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"ml.projects.getConfig": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"oauthconfig.verification.submit": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"automl.models.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"compute.targetPools.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.vpnGateways.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.smartMessagingEntries.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"logging.queries.share": {
			"Owner (roles/owner)",
			"Logging Admin (roles/logging.admin)",
		},
		"compute.vpnGateways.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gkemulticloud.azureClusters.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"iam.serviceAccountKeys.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Account Key Admin (roles/iam.serviceAccountKeyAdmin)",
		},
		"aiplatform.studies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.appkeys.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"apigee.datastores.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"apigee.targetservers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.targetSslProxies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"networkservices.httpFilters.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"notebooks.runtimes.stop": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"recommender.cloudsqlInstanceDiskUsageTrendInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
		},
		"aiplatform.artifacts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudvolumesgcp-api.netapp.com/snapshots.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
		},
		"container.backendConfigs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.statefulSets.updateScale": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"connectors.connections.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"contactcenterinsights.phraseMatchers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
		},
		"datastream.routes.setIamPolicy": {
			"Owner (roles/owner)",
			"Datastream Admin (roles/datastream.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"pubsublite.subscriptions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
		},
		"dialogflow.phoneNumberOrders.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"gkemulticloud.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"monitoring.services.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Services Editor (roles/monitoring.servicesEditor)",
		},
		"apigee.developerapps.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"certificatemanager.certmapentries.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"compute.httpsHealthChecks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"datacatalog.tagTemplates.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog TagTemplate Owner (roles/datacatalog.tagTemplateOwner)",
			"Data Catalog TagTemplate User (roles/datacatalog.tagTemplateUser)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"dialogflow.conversationDatasets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"dataproc.tasks.lease": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Worker (roles/dataproc.worker)",
		},
		"dialogflow.conversationModels.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"earlyaccesscenter.campaigns.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Early Access Center Administrator (roles/earlyaccesscenter.admin)",
			"Early Access Center Viewer (roles/earlyaccesscenter.viewer)",
		},
		"compute.globalPublicDelegatedPrefixes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.globalPublicDelegatedPrefixes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionTargetHttpsProxies.setSslCertificates": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.conversationModels.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"secretmanager.secrets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Viewer (roles/secretmanager.viewer)",
		},
		"cloudtrace.tasks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace User (roles/cloudtrace.user)",
		},
		"compute.reservations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"pubsub.topics.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"privateca.certificates.createForSelf": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Workload Certificate Requester (roles/privateca.workloadCertificateRequester)",
		},
		"compute.globalForwardingRules.pscSetLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.persistentVolumeClaims.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.statefulSets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datamigration.connectionprofiles.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebaseappdistro.releases.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase App Distribution Admin SDK Service Agent (roles/firebase.appDistributionSdkServiceAgent)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase App Distribution Admin (roles/firebaseappdistro.admin)",
			"Firebase App Distribution Viewer (roles/firebaseappdistro.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"pubsub.snapshots.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
		},
		"videostitcher.vodSessions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher User (roles/videostitcher.user)",
		},
		"aiplatform.tensorboardRuns.write": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"composer.environments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Composer Administrator (roles/composer.admin)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
		},
		"container.clusterRoles.create": {
			"Owner (roles/owner)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"essentialcontacts.contacts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Essential Contacts Admin (roles/essentialcontacts.admin)",
			"Essential Contacts Viewer (roles/essentialcontacts.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.userDataMappings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"documentai.processors.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"assuredworkloads.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Assured Workloads Reader (roles/assuredworkloads.reader)",
		},
		"clouddeploy.targets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
		},
		"dialogflow.documents.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"dialogflow.versions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"securitycenter.eventthreatdetectionsettings.calculate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"apigee.archivedeployments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"earthengine.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"networkconnectivity.spokes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Hub & Spoke Viewer (roles/networkconnectivity.hubViewer)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"documentai.humanReviewConfigs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"networksecurity.clientTlsPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"apigee.apiproducts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"compute.forwardingRules.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.instanceGroups.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.publicAdvertisedPrefixes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"documentai.humanReviewConfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"aiplatform.entityTypes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store Data Viewer (roles/aiplatform.featurestoreDataViewer)",
			"Vertex AI Feature Store Data Writer (roles/aiplatform.featurestoreDataWriter)",
			"Vertex AI Feature Store Resource Editor (roles/aiplatform.featurestoreResourceEditor)",
			"Vertex AI Feature Store Resource Viewer (roles/aiplatform.featurestoreResourceViewer)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"datacatalog.entries.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"DataCatalog entry Owner (roles/datacatalog.entryOwner)",
		},
		"tpu.tensorflowversions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"TPU Admin (roles/tpu.admin)",
			"TPU Viewer (roles/tpu.viewer)",
		},
		"compute.machineImages.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"integrations.securityExecutions.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
			"Security Center Integration Executor Service Agent (roles/securitycenter.integrationExecutorServiceAgent)",
		},
		"securitycenter.findings.setMute": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Center Findings Mute Setter (roles/securitycenter.findingsMuteSetter)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"storage.objects.delete": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Velostrata Storage Access (roles/cloudmigration.storageaccess)",
			"Cloud Optimization Service Agent (roles/cloudoptimization.serviceAgent)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Writer (roles/dataplex.storageDataWriter)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"DocumentAI Core Service Agent (roles/documentaicore.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Cloud Storage for Firebase Service Agent (roles/firebasestorage.serviceAgent)",
			"Live Stream Service Agent (roles/livestream.serviceAgent)",
			"Media Asset Service Agent (roles/mediaasset.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Storage Legacy Bucket Writer (roles/storage.legacyBucketWriter)",
			"Storage Object Admin (roles/storage.objectAdmin)",
			"Transcoder Service Agent (roles/transcoder.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"connectors.connections.getConnectionSchemaMetadata": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
		},
		"container.deployments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"dataconnectors.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"managedidentities.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
			"Google Cloud Managed Identities Peering Viewer (roles/managedidentities.peeringViewer)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"datastream.objects.stopBackfillJob": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"gkehub.features.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"healthcare.annotations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
		},
		"aiplatform.featurestores.readFeatures": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Feature Store Admin (roles/aiplatform.featurestoreAdmin)",
			"Vertex AI Feature Store User (roles/aiplatform.featurestoreUser)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"assuredworkloads.workload.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Assured Workloads Reader (roles/assuredworkloads.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudkms.keyRings.createTagBinding": {
			"Owner (roles/owner)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"cloudsql.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"compute.zoneOperations.setIamPolicy": {
			"Owner (roles/owner)",
			"Compute Admin (roles/compute.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"servicebroker.bindingoperations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"appengine.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Viewer (roles/appengine.appViewer)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudjobdiscovery.companies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Job Editor (roles/cloudjobdiscovery.jobsEditor)",
		},
		"cloudsql.backupRuns.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"dataproc.tasks.listInvalidatedLeases": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Worker (roles/dataproc.worker)",
		},
		"metastore.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
		},
		"healthcare.fhirStores.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Healthcare FHIR Store Viewer (roles/healthcare.fhirStoreViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"automlrecommendations.eventStores.getStats": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"cloudasset.assets.exportComputeSslCertificates": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"integrations.securityIntegrationVers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"integrations.securityIntegrations.invoke": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
			"Security Center Integration Executor Service Agent (roles/securitycenter.integrationExecutorServiceAgent)",
		},
		"pubsub.subscriptions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"compute.publicAdvertisedPrefixes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"recommender.iamServiceAccountInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
		},
		"visualinspection.models.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"clientauthconfig.clients.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
			"OAuth Config Viewer (roles/oauthconfig.viewer)",
		},
		"clouddeploy.deliveryPipelines.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"container.services.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datacatalog.tagTemplates.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog TagTemplate Owner (roles/datacatalog.tagTemplateOwner)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"recommender.iamPolicyInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
		},
		"apigee.developersubscriptions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
		},
		"automlrecommendations.placements.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"dataplex.lakeActions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"endpoints.portals.listCustomDomains": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Endpoints Portal Admin (roles/endpoints.portalAdmin)",
		},
		"container.podDisruptionBudgets.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.replicationControllers.updateScale": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.secrets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebasedynamiclinks.links.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
		},
		"speech.phraseSets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Speech Administrator (roles/speech.admin)",
			"Cloud Speech Editor (roles/speech.editor)",
		},
		"workflows.workflows.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
		},
		"datastore.databases.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"fleetengine.vehicles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Fleet Engine Consumer SDK User (roles/fleetengine.consumerSdkUser)",
			"Fleet Engine Driver SDK User (roles/fleetengine.driverSdkUser)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
		},
		"healthcare.datasets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
		},
		"healthcare.datasets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
		},
		"ml.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Operation Owner (roles/ml.operationOwner)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"cloudasset.assets.exportContainerNode": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"genomics.datasets.setIamPolicy": {
			"Owner (roles/owner)",
			"Genomics Admin (roles/genomics.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"metastore.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"remotebuildexecution.actions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Remote Build Execution Service Agent (roles/remotebuildexecution.serviceAgent)",
			"Remote Build Execution Worker (roles/remotebuildexecution.worker)",
		},
		"resourcemanager.projects.undelete": {
			"Owner (roles/owner)",
		},
		"osconfig.osPolicyAssignments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"OSPolicyAssignment Admin (roles/osconfig.osPolicyAssignmentAdmin)",
			"OSPolicyAssignment Editor (roles/osconfig.osPolicyAssignmentEditor)",
		},
		"recommender.commitmentUtilizationInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Billing Account Usage Commitment Recommender Admin (roles/recommender.billingAccountCudAdmin)",
			"Billing Account Usage Commitment Recommender Viewer (roles/recommender.billingAccountCudViewer)",
			"Project Usage Commitment Recommender Admin (roles/recommender.projectCudAdmin)",
			"Project Usage Commitment Recommender Viewer (roles/recommender.projectCudViewer)",
		},
		"apigee.hostsecurityreports.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Security Admin (roles/apigee.securityAdmin)",
			"Apigee Security Viewer (roles/apigee.securityViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudbuild.workerpools.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build WorkerPool Owner (roles/cloudbuild.workerPoolOwner)",
		},
		"cloudprivatecatalogproducer.catalogs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"container.subjectAccessReviews.create": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"healthcare.attributeDefinitions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
		},
		"dlp.jobTriggers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Job Triggers Editor (roles/dlp.jobTriggersEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"healthcare.datasets.deidentify": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
		},
		"redis.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
			"Cloud Memorystore Redis Editor (roles/redis.editor)",
			"Cloud Memorystore Redis Viewer (roles/redis.viewer)",
		},
		"transcoder.jobTemplates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Transcoder Admin (roles/transcoder.admin)",
			"Transcoder Viewer (roles/transcoder.viewer)",
		},
		"aiplatform.studies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.sharedflows.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"consumerprocurement.accounts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
			"Consumer Procurement Order Viewer (roles/consumerprocurement.orderViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"gkemulticloud.awsClusters.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"resourcemanager.organizations.get": {
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Assured Workloads Reader (roles/assuredworkloads.reader)",
			"Access Transparency Admin (roles/axt.admin)",
			"Billing Account Creator (roles/billing.creator)",
			"Browser (roles/browser)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Support Account Administrator (roles/cloudsupport.admin)",
			"Compute Shared VPC Admin (roles/compute.xpnAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Organization Role Administrator (roles/iam.organizationRoleAdmin)",
			"Organization Role Viewer (roles/iam.organizationRoleViewer)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
			"Organization Viewer (roles/resourcemanager.organizationViewer)",
			"Project Creator (roles/resourcemanager.projectCreator)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Assets Viewer (roles/securitycenter.assetsViewer)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Center Findings Viewer (roles/securitycenter.findingsViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Sources Admin (roles/securitycenter.sourcesAdmin)",
			"Security Center Sources Editor (roles/securitycenter.sourcesEditor)",
			"Security Center Sources Viewer (roles/securitycenter.sourcesViewer)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Quota Administrator (roles/servicemanagement.quotaAdmin)",
		},
		"riskmanager.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Admin (roles/riskmanager.admin)",
			"Risk Manager Editor (roles/riskmanager.editor)",
			"Risk Manager Report Reviewer (roles/riskmanager.reviewer)",
			"Risk Manager Viewer (roles/riskmanager.viewer)",
		},
		"secretmanager.secrets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Secret Manager Admin (roles/secretmanager.admin)",
		},
		"aiplatform.endpoints.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"aiplatform.tensorboardExperiments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.models.updateMetadata": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"compute.projects.setDefaultNetworkTier": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.thirdPartyResources.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"apigee.deployments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"dataplex.zones.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"fleetengine.trips.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Fleet Engine Driver SDK User (roles/fleetengine.driverSdkUser)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
		},
		"healthcare.fhirStores.configureSearch": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
		},
		"visualinspection.models.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"artifactregistry.tags.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudbuild.builds.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Build Approver (roles/cloudbuild.builds.approver)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Editor (roles/cloudbuild.builds.editor)",
			"Cloud Build Viewer (roles/cloudbuild.builds.viewer)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Composer Worker (roles/composer.worker)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"deploymentmanager.compositeTypes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"policysimulator.replayResults.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Simulator Admin (roles/policysimulator.admin)",
		},
		"servicedirectory.namespaces.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"integrations.apigeeIntegrationVers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Deployer (roles/integrations.apigeeIntegrationDeployerRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
			"Apigee Integration Invoker (roles/integrations.apigeeIntegrationInvokerRole)",
			"Apigee Integration Viewer (roles/integrations.apigeeIntegrationsViewer)",
		},
		"visualinspection.modelEvaluations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"cloudbuild.builds.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Editor (roles/cloudbuild.builds.editor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"compute.instances.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.services.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"container.thirdPartyObjects.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"datastream.connectionProfiles.destinationTypes": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"dataplex.assets.setIamPolicy": {
			"Owner (roles/owner)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"deploymentmanager.typeProviders.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"iap.web.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"IAP Policy Admin (roles/iap.admin)",
		},
		"runtimeconfig.configs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"artifactregistry.tags.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.regionOperations.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Firewall Policy User (roles/compute.orgFirewallPolicyUser)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.callMatchers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebaseabt.projectmetadata.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
			"Firebase A/B Testing Viewer (roles/firebaseabt.viewer)",
		},
		"cloudtoolresults.executions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataflow.messages.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Dataflow Admin (roles/dataflow.admin)",
			"Dataflow Developer (roles/dataflow.developer)",
			"Dataflow Viewer (roles/dataflow.viewer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"deploymentmanager.deployments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"gkehub.memberships.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"notebooks.schedules.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"apigee.developerappattributes.createOrUpdateAll": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
		},
		"dataplex.tasks.setIamPolicy": {
			"Owner (roles/owner)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"deploymentmanager.resources.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"pubsub.schemas.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
		},
		"bigquery.rowAccessPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.targetTcpProxies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"networkconnectivity.hubs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Hub & Spoke Viewer (roles/networkconnectivity.hubViewer)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"visualinspection.annotations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"accesscontextmanager.servicePerimeters.commit": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"bigtable.instances.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"clouddeploy.rollouts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
		},
		"container.limitRanges.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"containeranalysis.notes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Notes Editor (roles/containeranalysis.notes.editor)",
			"Container Analysis Notes Viewer (roles/containeranalysis.notes.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
		},
		"container.certificateSigningRequests.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"firebaseauth.configs.getHashConfig": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Identity Platform Admin (roles/identityplatform.admin)",
			"Identity Toolkit Admin (roles/identitytoolkit.admin)",
		},
		"stackdriver.projects.edit": {
			"Owner (roles/owner)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Stackdriver Accounts Editor (roles/stackdriver.accounts.editor)",
		},
		"aiplatform.annotationSpecs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.datacollectors.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
		},
		"clouddeploy.deliveryPipelines.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
		},
		"cloudsql.instances.createTagBinding": {
			"Owner (roles/owner)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"compute.firewallPolicies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"healthcare.hl7V2Stores.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
		},
		"livestream.events.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
		},
		"apigee.canaryevaluations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Apigee Runtime Agent (roles/apigee.runtimeAgent)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"billing.accounts.setIamPolicy": {
			"Billing Account Administrator (roles/billing.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"dlp.jobTriggers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Job Triggers Editor (roles/dlp.jobTriggersEditor)",
			"DLP Job Triggers Reader (roles/dlp.jobTriggersReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
		},
		"eventarc.triggers.undelete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Eventarc Admin (roles/eventarc.admin)",
			"Eventarc Developer (roles/eventarc.developer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"gkemulticloud.azureClusters.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"gkehub.memberships.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"apigee.queries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"binaryauthorization.attestors.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Binary Authorization Attestor Admin (roles/binaryauthorization.attestorsAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.instances.sendDiagnosticInterrupt": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"datacatalog.taxonomies.delete": {
			"Owner (roles/owner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Policy Tag Admin (roles/datacatalog.categoryAdmin)",
		},
		"dlp.estimates.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Cost Estimation (roles/dlp.estimatesAdmin)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"apigee.proxies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"cloudasset.assets.exportComputeTargetPools": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"clouddeploy.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Approver (roles/clouddeploy.approver)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
		},
		"compute.regionBackendServices.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"firebaseauth.users.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Identity Platform Admin (roles/identityplatform.admin)",
			"Identity Toolkit Admin (roles/identitytoolkit.admin)",
		},
		"datastream.streams.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"deploymentmanager.deployments.stop": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"networkservices.httpFilters.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"cloudkms.keyRings.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.addresses.deleteInternal": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.globalForwardingRules.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.healthChecks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"container.networkPolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"securitycenter.findings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"spanner.instances.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
		},
		"artifactregistry.packages.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.readsessions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Read Session User (roles/bigquery.readSessionUser)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Enterprise Knowledge Graph Service Agent (roles/enterpriseknowledgegraph.serviceAgent)",
		},
		"datastream.streams.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"bigquery.models.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"firebaseinappmessaging.campaigns.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase In-App Messaging Admin (roles/firebaseinappmessaging.admin)",
		},
		"notebooks.executions.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"serviceconsumermanagement.tenancyu.addResource": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Admin of Tenancy Units (roles/serviceconsumermanagement.tenancyUnitsAdmin)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Workload Certificate Service Agent (roles/workloadcertificate.serviceAgent)",
		},
		"cloudasset.assets.searchAllIamPolicies": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datastream.connectionProfiles.discover": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"clientauthconfig.clients.listWithSecrets": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"gkehub.gateway.put": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connect Gateway Admin (roles/gkehub.gatewayAdmin)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"healthcare.consentStores.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"logging.buckets.delete": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"servicebroker.instanceoperations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"artifactregistry.files.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportComputeImages": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.firewallPolicies.move": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Firewall Policy Admin (roles/compute.orgFirewallPolicyAdmin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.serviceAttachments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebase.clients.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
		},
		"servicedirectory.networks.access": {
			"Monitoring Service Agent (roles/monitoring.notificationServiceAgent)",
			"Private Service Connect Authorized Service (roles/servicedirectory.pscAuthorizedService)",
		},
		"compute.forwardingRules.setTarget": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dns.managedZones.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"firebase.links.delete": {
			"Owner (roles/owner)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"metastore.imports.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
		},
		"osconfig.guestPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GuestPolicy Admin (roles/osconfig.guestPolicyAdmin)",
		},
		"compute.disks.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"documentai.processors.processOnline": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI API User (roles/documentai.apiUser)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"ml.versions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
			"AI Platform Model User (roles/ml.modelUser)",
			"AI Platform Viewer (roles/ml.viewer)",
		},
		"aiplatform.tensorboardRuns.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"datamigration.connectionprofiles.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"cloudprivatecatalogproducer.associations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"container.persistentVolumeClaims.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gkemulticloud.azureNodePools.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"networkservices.endpointPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"storage.buckets.listTagBindings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Tag Viewer (roles/resourcemanager.tagViewer)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"logging.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"logging.sinks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudasset.assets.exportBigtableTable": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudtoolresults.executions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"compute.nodeTemplates.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.subnetworks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Build Integrations Owner (roles/cloudbuild.integrationsOwner)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.urlMaps.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"logging.views.access": {
			"Owner (roles/owner)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Logging Admin (roles/logging.admin)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs View Accessor (roles/logging.viewAccessor)",
		},
		"run.services.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"automl.models.deploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"cloudasset.assets.listSecretManagerSecrets": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"contactcenterinsights.issueModels.undeploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"healthcare.datasets.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"integrations.securityExecutions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
			"Security Center Integration Executor Service Agent (roles/securitycenter.integrationExecutorServiceAgent)",
		},
		"healthcare.hl7V2Stores.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Healthcare HL7v2 Message Ingest (roles/healthcare.hl7V2Ingest)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
			"Healthcare HL7v2 Store Viewer (roles/healthcare.hl7V2StoreViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"recommender.cloudsqlInstanceOutOfDiskRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"apigee.maskconfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"billing.accounts.getUsageExportSpec": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
			"Billing Account Viewer (roles/billing.viewer)",
		},
		"cloudprivatecatalogproducer.catalogs.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.deployments.updateScale": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"datastream.streams.pause": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"compute.images.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Image User (roles/compute.imageUser)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"logging.queries.listShared": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Logging Admin (roles/logging.admin)",
			"Private Logs Viewer (roles/logging.privateLogViewer)",
			"Logs Viewer (roles/logging.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.targetPools.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"firebasecrashlytics.sessions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
			"Firebase Crashlytics Viewer (roles/firebasecrashlytics.viewer)",
		},
		"gkehub.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"iam.googleapis.com/workloadIdentityPools.create": {
			"Owner (roles/owner)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
		},
		"monitoring.alertPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring AlertPolicy Editor (roles/monitoring.alertPolicyEditor)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"apigee.organizations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"dialogflow.agents.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"visualinspection.annotationSpecs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"apigee.proxyrevisions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"apigee.sharedflowrevisions.deploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"compute.serviceAttachments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.volumeSnapshotClasses.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"spanner.databases.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Restore Admin (roles/spanner.restoreAdmin)",
		},
		"compute.targetPools.addHealthCheck": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"datacatalog.entries.setIamPolicy": {
			"Owner (roles/owner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"DataCatalog entry Owner (roles/datacatalog.entryOwner)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"healthcare.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Annotation Editor (roles/healthcare.annotationEditor)",
			"Healthcare Annotation Reader (roles/healthcare.annotationReader)",
			"Healthcare Annotation Administrator (roles/healthcare.annotationStoreAdmin)",
			"Healthcare Annotation Store Viewer (roles/healthcare.annotationStoreViewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare Dataset Administrator (roles/healthcare.datasetAdmin)",
			"Healthcare Dataset Viewer (roles/healthcare.datasetViewer)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
			"Healthcare DICOM Store Viewer (roles/healthcare.dicomStoreViewer)",
			"Healthcare DICOM Viewer (roles/healthcare.dicomViewer)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
			"Healthcare FHIR Resource Reader (roles/healthcare.fhirResourceReader)",
			"Healthcare FHIR Store Administrator (roles/healthcare.fhirStoreAdmin)",
			"Healthcare FHIR Store Viewer (roles/healthcare.fhirStoreViewer)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Healthcare HL7v2 Message Ingest (roles/healthcare.hl7V2Ingest)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
			"Healthcare HL7v2 Store Viewer (roles/healthcare.hl7V2StoreViewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
		},
		"accesscontextmanager.accessLevels.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"billing.budgets.list": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"certificatemanager.dnsauthorizations.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"cloudsql.instances.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Connection Service Agent (roles/bigqueryconnection.serviceAgent)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Client (roles/cloudsql.client)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Instance User (roles/cloudsql.instanceUser)",
			"Cloud SQL Service Agent (roles/cloudsql.serviceAgent)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.publicDelegatedPrefixes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"metastore.services.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"cloudsupport.accounts.delete": {
			"Owner (roles/owner)",
			"Support Account Administrator (roles/cloudsupport.admin)",
		},
		"cloudtestservice.matrices.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"compute.securityPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.regionSslCertificates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionTargetHttpProxies.setUrlMap": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.customResourceDefinitions.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"networkmanagement.connectivitytests.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Network Management Admin (roles/networkmanagement.admin)",
		},
		"recommender.cloudsqlIdleInstanceRecommendations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
		},
		"container.endpoints.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"retail.products.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"cloudsql.databases.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"cloudvolumesgcp-api.netapp.com/serviceLevels.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
		},
		"compute.vpnGateways.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"documentai.evaluations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"pubsublite.subscriptions.seek": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Subscriber (roles/pubsublite.subscriber)",
		},
		"monitoring.monitoredResourceDescriptors.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Connection Service Agent (roles/bigqueryconnection.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Anthos Multi-cloud Telemetry Writer (roles/gkemulticloud.telemetryWriter)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Metric Writer (roles/monitoring.metricWriter)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
		},
		"compute.nodeTemplates.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Admin (roles/compute.admin)",
			"Compute Viewer (roles/compute.viewer)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.auditSinks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.initializerConfigurations.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dialogflow.flows.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"firebasestorage.buckets.addFirebase": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud Storage for Firebase Admin (roles/firebasestorage.admin)",
		},
		"healthcare.consents.revoke": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
		},
		"recommender.bigqueryCapacityCommitmentsRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"BigQuery Slot Recommender Admin (roles/recommender.bigQueryCapacityCommitmentsAdmin)",
			"BigQuery Recommender Billing Account Admin (roles/recommender.bigQueryCapacityCommitmentsBillingAccountAdmin)",
			"BigQuery Recommender Billing Account Viewer (roles/recommender.bigQueryCapacityCommitmentsBillingAccountViewer)",
			"BigQuery Recommender Project Admin (roles/recommender.bigQueryCapacityCommitmentsProjectAdmin)",
			"BigQuery Recommender Project Viewer (roles/recommender.bigQueryCapacityCommitmentsProjectViewer)",
			"BigQuery Slot Recommender Viewer (roles/recommender.bigQueryCapacityCommitmentsViewer)",
		},
		"redis.instances.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
		},
		"apigee.apiproducts.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"integrations.apigeeIntegrations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Apigee Integration Admin (roles/integrations.apigeeIntegrationAdminRole)",
			"Apigee Integration Deployer (roles/integrations.apigeeIntegrationDeployerRole)",
			"Apigee Integration Editor (roles/integrations.apigeeIntegrationEditorRole)",
			"Apigee Integration Invoker (roles/integrations.apigeeIntegrationInvokerRole)",
			"Apigee Integration Viewer (roles/integrations.apigeeIntegrationsViewer)",
		},
		"iam.serviceAccounts.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Composer v2 API Service Agent Extension (roles/composer.ServiceAgentV2Ext)",
			"Earth Engine Apps Publisher (roles/earthengine.appsPublisher)",
			"Security Admin (roles/iam.securityAdmin)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
		},
		"spanner.databases.beginPartitionedDmlTransaction": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"accesscontextmanager.accessLevels.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
		},
		"accesscontextmanager.accessZones.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"aiplatform.tensorboards.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudkms.cryptoKeys.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Assured Workloads Service Agent (roles/assuredworkloads.serviceAgent)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
		},
		"datalabeling.datasets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
		},
		"actions.agent.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Actions Admin (roles/actions.Admin)",
			"Actions Viewer (roles/actions.Viewer)",
		},
		"dns.policies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"retail.userEvents.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"monitoring.dashboards.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Dashboard Configuration Editor (roles/monitoring.dashboardEditor)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"recommender.loggingProductSuggestionContainerRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Product Suggestion Recommenders Admin (roles/recommender.productSuggestionAdmin)",
			"Product Suggestion Recommenders Viewer (roles/recommender.productSuggestionViewer)",
		},
		"speech.customClasses.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Cloud Speech Administrator (roles/speech.admin)",
			"Cloud Speech Editor (roles/speech.editor)",
		},
		"apigateway.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"ApiGateway Admin (roles/apigateway.admin)",
			"ApiGateway Viewer (roles/apigateway.viewer)",
		},
		"cloudiottoken.tokensettings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Device Controller (roles/cloudiot.deviceController)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
			"Cloud IoT Viewer (roles/cloudiot.viewer)",
		},
		"cloudprivatecatalogproducer.producerCatalogs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudtoolresults.settings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"dns.policies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"vmmigration.migratingVms.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"vmmigration.targets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"dialogflow.modelEvaluations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"healthcare.dicomStores.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Viewer (roles/healthcare.dicomViewer)",
		},
		"runtimeconfig.configs.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"servicedirectory.namespaces.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
			"Service Directory Viewer (roles/servicedirectory.viewer)",
		},
		"aiplatform.endpoints.deploy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"certificatemanager.certmapentries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"clouddebugger.breakpoints.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Debugger User (roles/clouddebugger.user)",
		},
		"essentialcontacts.contacts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Essential Contacts Admin (roles/essentialcontacts.admin)",
			"Essential Contacts Viewer (roles/essentialcontacts.viewer)",
		},
		"proximitybeacon.attachments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Beacon Attachment Editor (roles/proximitybeacon.attachmentEditor)",
		},
		"clouddeploy.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Approver (roles/clouddeploy.approver)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.cronJobs.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"dataproc.autoscalingPolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"logging.exclusions.delete": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"container.deployments.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"errorreporting.errorEvents.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Error Reporting Admin (roles/errorreporting.admin)",
			"Error Reporting User (roles/errorreporting.user)",
		},
		"gkehub.features.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Support Service Agent (roles/anthossupport.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"GKE Hub Editor (roles/gkehub.editor)",
			"GKE Hub Viewer (roles/gkehub.viewer)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"iam.googleapis.com/workloadIdentityPools.undelete": {
			"Owner (roles/owner)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
		},
		"resourcemanager.folders.create": {
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Creator (roles/resourcemanager.folderCreator)",
		},
		"tpu.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"TPU Admin (roles/tpu.admin)",
			"TPU Viewer (roles/tpu.viewer)",
		},
		"baremetalsolution.luns.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
		},
		"connectors.versions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"gkemulticloud.azureClusters.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
		},
		"livestream.inputs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"retail.catalogs.completeQuery": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"apigee.developerappattributes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
		},
		"cloudjobdiscovery.profiles.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
		},
		"cloudscheduler.jobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Cloud Scheduler Viewer (roles/cloudscheduler.viewer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
		},
		"cloudvolumesgcp-api.netapp.com/snapshots.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
		},
		"compute.networks.removePeering": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Filestore Service Agent (roles/file.serviceAgent)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Cloud Memorystore Memcached Service Agent (roles/memcache.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Cloud Memorystore Redis Service Agent (roles/redis.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
		},
		"datastore.operations.list": {
			"Owner (roles/owner)",
			"Cloud Datastore Import Export Admin (roles/datastore.importExportAdmin)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"deploymentmanager.compositeTypes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"integrations.securityIntegrationVers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"dataplex.partitions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Metadata Writer (roles/dataplex.metadataWriter)",
		},
		"dialogflow.smartMessagingEntries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Smart Messaging Allowlist Editor (roles/dialogflow.consoleSmartMessagingAllowlistEditor)",
		},
		"gkehub.gateway.setIamPolicy": {
			"Owner (roles/owner)",
			"Connect Gateway Admin (roles/gkehub.gatewayAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"apigee.proxyrevisions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"automl.annotationSpecs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"cloudasset.feeds.get": {
			"Owner (roles/owner)",
			"Assured Workloads Service Agent (roles/assuredworkloads.serviceAgent)",
			"Binary Authorization Service Agent (roles/binaryauthorization.serviceAgent)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudprivatecatalogproducer.catalogAssociations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.hostServiceAgent.use": {
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"iap.webServices.getSettings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"IAP Settings Admin (roles/iap.settingsAdmin)",
		},
		"aiplatform.modelEvaluationSlices.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.globalAddresses.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.globalNetworkEndpointGroups.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"dialogflow.intents.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Intent Admin (roles/dialogflow.intentAdmin)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"managedidentities.peerings.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
		},
		"iam.roles.undelete": {
			"Owner (roles/owner)",
			"Organization Role Administrator (roles/iam.organizationRoleAdmin)",
			"Role Administrator (roles/iam.roleAdmin)",
		},
		"pubsublite.topics.subscribe": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Subscriber (roles/pubsublite.subscriber)",
		},
		"recommender.computeImageIdleResourceRecommendations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"cloudasset.assets.exportSpannerInstances": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudkms.cryptoKeyVersions.restore": {
			"Owner (roles/owner)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
		},
		"compute.forwardingRules.pscSetTarget": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.publicAdvertisedPrefixes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"genomics.datasets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Genomics Admin (roles/genomics.admin)",
			"Genomics Editor (roles/genomics.editor)",
		},
		"workflows.workflows.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Viewer (roles/workflows.viewer)",
		},
		"notebooks.environments.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"compute.securityPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.customResourceDefinitions.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.podDisruptionBudgets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datastream.connectionProfiles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebaseappcheck.recaptchaConfig.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
		},
		"healthcare.dicomStores.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare DICOM Store Administrator (roles/healthcare.dicomStoreAdmin)",
		},
		"cloudasset.assets.exportComputeLicenses": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.disks.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"container.apiServices.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.clusters.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Development Experience Service Agent (roles/appdevelopmentexperience.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Cluster Admin (roles/container.clusterAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Workload Certificate Service Agent (roles/workloadcertificate.serviceAgent)",
		},
		"dlp.deidentifyTemplates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP De-identify Templates Editor (roles/dlp.deidentifyTemplatesEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"aiplatform.dataLabelingJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportComputeSubnetworks": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.networkEndpointGroups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"gkemulticloud.awsClusters.getAdminKubeconfig": {
			"Owner (roles/owner)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"compute.disks.resize": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"file.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
		},
		"container.roleBindings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"firebaseauth.configs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Identity Platform Admin (roles/identityplatform.admin)",
			"Identity Toolkit Admin (roles/identitytoolkit.admin)",
		},
		"visualinspection.annotations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"datalabeling.annotationspecsets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataprocessing.groupcontrols.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Data Processing Controls Resource Admin (roles/dataprocessing.admin)",
		},
		"firebaserules.rulesets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Rules Admin (roles/firebaserules.admin)",
			"Firebase Rules Viewer (roles/firebaserules.viewer)",
		},
		"networkconnectivity.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
			"Hub & Spoke Viewer (roles/networkconnectivity.hubViewer)",
			"Spoke Admin (roles/networkconnectivity.spokeAdmin)",
		},
		"storagetransfer.jobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
		},
		"aiplatform.contexts.addContextArtifactsAndExecutions": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudprivatecatalogproducer.catalogAssociations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"cloudscheduler.jobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
		},
		"recommender.cloudsqlInstanceCpuUsageInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"retail.catalogs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"dialogflow.sessions.detectIntent": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow API Client (roles/dialogflow.client)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Console Simulator User (roles/dialogflow.consoleSimulatorUser)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"logging.sinks.create": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"osconfig.inventories.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"OS Inventory Viewer (roles/osconfig.inventoryViewer)",
		},
		"automlrecommendations.apiKeys.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"bigtable.tables.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"container.clusters.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Cluster Admin (roles/container.clusterAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
		},
		"dataproc.workflowTemplates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datastream.connectionProfiles.setIamPolicy": {
			"Owner (roles/owner)",
			"Datastream Admin (roles/datastream.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"resourcesettings.settings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Resource Settings Administrator (roles/resourcesettings.admin)",
			"Resource Settings Viewer (roles/resourcesettings.viewer)",
		},
		"visualinspection.annotationSets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"appengine.applications.create": {
			"Owner (roles/owner)",
			"App Engine Creator (roles/appengine.appCreator)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
		},
		"bigquery.connections.updateTag": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Connection Admin (roles/bigquery.connectionAdmin)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Tag Editor (roles/datacatalog.tagEditor)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"container.backendConfigs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"memcache.instances.applyParameters": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
		},
		"runtimeconfig.waiters.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"container.csiNodes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"secretmanager.secrets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Viewer (roles/secretmanager.viewer)",
		},
		"runtimeconfig.variables.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"aiplatform.modelEvaluationSlices.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.rowAccessPolicies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.answerrecords.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.entityTypes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Entity Type Admin (roles/dialogflow.entityTypeAdmin)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"notebooks.schedules.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"recommender.bigqueryCapacityCommitmentsInsights.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Slot Recommender Admin (roles/recommender.bigQueryCapacityCommitmentsAdmin)",
			"BigQuery Recommender Billing Account Admin (roles/recommender.bigQueryCapacityCommitmentsBillingAccountAdmin)",
			"BigQuery Recommender Project Admin (roles/recommender.bigQueryCapacityCommitmentsProjectAdmin)",
		},
		"servicemanagement.services.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud API Gateway Management Service Agent (roles/apigateway_management.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
		},
		"compute.networks.useExternalIp": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
		},
		"container.csiNodes.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"monitoring.notificationChannelDescriptors.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring NotificationChannel Editor (roles/monitoring.notificationChannelEditor)",
			"Monitoring NotificationChannel Viewer (roles/monitoring.notificationChannelViewer)",
			"Monitoring Viewer (roles/monitoring.viewer)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"networkservices.httpfilters.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"notebooks.environments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"apigee.developerapps.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
		},
		"bigtable.instances.setIamPolicy": {
			"Owner (roles/owner)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"cloudscheduler.jobs.fullView": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Cloud Scheduler Job Runner (roles/cloudscheduler.jobRunner)",
			"Cloud Scheduler Viewer (roles/cloudscheduler.viewer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
		},
		"contactcenterinsights.analyses.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dataproc.agents.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Worker (roles/dataproc.worker)",
		},
		"compute.httpsHealthChecks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.networkEndpointGroups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"connectors.versions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
		},
		"contactcenterinsights.issueModels.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
		},
		"metastore.services.restore": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
		},
		"iam.roles.update": {
			"Owner (roles/owner)",
			"Organization Role Administrator (roles/iam.organizationRoleAdmin)",
			"Role Administrator (roles/iam.roleAdmin)",
		},
		"ml.trials.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Developer (roles/ml.developer)",
		},
		"securitycenter.websecurityscannersettings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"aiplatform.migratableResources.search": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Migration Service User (roles/aiplatform.migrator)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.targetPools.removeHealthCheck": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.roleBindings.delete": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"documentai.labelerPools.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebaseappcheck.deviceCheckConfig.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
			"Firebase App Check Viewer (roles/firebaseappcheck.viewer)",
		},
		"earthengine.assets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"automl.datasets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"spanner.databases.write": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Database Admin (roles/spanner.databaseAdmin)",
			"Cloud Spanner Database User (roles/spanner.databaseUser)",
		},
		"pubsublite.topics.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
		},
		"automl.models.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"baremetalsolution.volumesnapshots.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
		},
		"container.storageVersionMigrations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dlp.analyzeRiskTemplates.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Analyze Risk Templates Editor (roles/dlp.analyzeRiskTemplatesEditor)",
			"DLP Analyze Risk Templates Reader (roles/dlp.analyzeRiskTemplatesReader)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebasestorage.buckets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Storage for Firebase Admin (roles/firebasestorage.admin)",
			"Cloud Storage for Firebase Viewer (roles/firebasestorage.viewer)",
		},
		"cloudtranslate.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
		},
		"documentai.datasets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
		},
		"healthcare.consentStores.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Attribute Definition Editor (roles/healthcare.attributeDefinitionEditor)",
			"Healthcare Attribute Definition Reader (roles/healthcare.attributeDefinitionReader)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
			"Healthcare Consent Editor (roles/healthcare.consentEditor)",
			"Healthcare Consent Reader (roles/healthcare.consentReader)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
			"Healthcare Consent Store Viewer (roles/healthcare.consentStoreViewer)",
			"Healthcare User Data Mapping Editor (roles/healthcare.userDataMappingEditor)",
			"Healthcare User Data Mapping Reader (roles/healthcare.userDataMappingReader)",
		},
		"gsuiteaddons.deployments.execute": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
			"Google Workspace Add-ons Tester (roles/gsuiteaddons.tester)",
		},
		"iam.googleapis.com/workloadIdentityPoolProviders.update": {
			"Owner (roles/owner)",
			"IAM Workload Identity Pool Admin (roles/iam.workloadIdentityPoolAdmin)",
		},
		"metastore.services.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
		},
		"cloudprivatecatalogproducer.products.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
		},
		"cloudsql.instances.truncateLog": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"container.clusterRoleBindings.delete": {
			"Owner (roles/owner)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.selfSubjectAccessReviews.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datafusion.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
		},
		"runtimeconfig.configs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"securitycenter.assetsecuritymarks.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Asset Security Marks Writer (roles/securitycenter.assetSecurityMarksWriter)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"servicemanagement.services.report": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud API Gateway Service Agent (roles/apigateway.serviceAgent)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud Endpoints Service Agent (roles/endpoints.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
			"Service Reporter (roles/servicemanagement.reporter)",
			"Service Controller (roles/servicemanagement.serviceController)",
		},
		"aiplatform.nasJobs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"billing.budgets.get": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
			"Billing Account Viewer (roles/billing.viewer)",
		},
		"container.validatingWebhookConfigurations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.securityPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"gkemulticloud.azureNodePools.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"networkservices.endpointPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"billing.accounts.list": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
			"Billing Account User (roles/billing.user)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Data Processing Controls Resource Admin (roles/dataprocessing.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"BigQuery Recommender Billing Account Admin (roles/recommender.bigQueryCapacityCommitmentsBillingAccountAdmin)",
			"BigQuery Recommender Billing Account Viewer (roles/recommender.bigQueryCapacityCommitmentsBillingAccountViewer)",
			"Billing Account Usage Commitment Recommender Admin (roles/recommender.billingAccountCudAdmin)",
			"Billing Account Usage Commitment Recommender Viewer (roles/recommender.billingAccountCudViewer)",
		},
		"cloudasset.assets.exportComputeInstanceTemplates": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.clusterRoles.bind": {
			"Owner (roles/owner)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"genomics.datasets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Genomics Admin (roles/genomics.admin)",
			"Genomics Editor (roles/genomics.editor)",
		},
		"memcache.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
			"Cloud Memorystore Memcached Viewer (roles/memcache.viewer)",
		},
		"compute.backendServices.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.storageStates.getStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dialogflow.documents.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"securitycenter.virtualmachinethreatdetectionsettings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
		},
		"run.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"vmmigration.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"appengine.versions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine Admin (roles/appengine.appAdmin)",
			"App Engine Viewer (roles/appengine.appViewer)",
			"App Engine Code Viewer (roles/appengine.codeViewer)",
			"App Engine Deployer (roles/appengine.deployer)",
			"App Engine Service Admin (roles/appengine.serviceAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"bigquery.datasets.updateTag": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Data Catalog Tag Editor (roles/datacatalog.tagEditor)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
		},
		"compute.interconnects.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"notebooks.instances.setAccelerator": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"osconfig.inventories.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"OS Inventory Viewer (roles/osconfig.inventoryViewer)",
		},
		"apigee.instances.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudvolumesgcp-api.netapp.com/jobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
			"NetApp Cloud Volumes Viewer (roles/netappcloudvolumes.viewer)",
		},
		"dlp.analyzeRiskTemplates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Analyze Risk Templates Editor (roles/dlp.analyzeRiskTemplatesEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"integrations.securityAuthConfigs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Security Integration Admin (roles/integrations.securityIntegrationAdmin)",
		},
		"livestream.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Live Stream Editor (roles/livestream.editor)",
		},
		"accessapproval.requests.approve": {
			"Owner (roles/owner)",
			"Access Approval Approver (roles/accessapproval.approver)",
		},
		"bigquery.connections.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Connection Admin (roles/bigquery.connectionAdmin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"cloudprivatecatalogproducer.associations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Catalog Admin (roles/cloudprivatecatalogproducer.admin)",
			"Catalog Manager (roles/cloudprivatecatalogproducer.manager)",
			"Catalog Org Admin (roles/cloudprivatecatalogproducer.orgAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.cronJobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.validatingWebhookConfigurations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"securitycenter.organizationsettings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"spanner.instanceOperations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
		},
		"container.secrets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.volumeSnapshots.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"networkmanagement.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Network Management Admin (roles/networkmanagement.admin)",
			"Network Management Viewer (roles/networkmanagement.viewer)",
		},
		"ondemandscanning.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"On-Demand Scanning Admin (roles/ondemandscanning.admin)",
		},
		"healthcare.hl7V2Stores.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
		},
		"retail.catalogs.import": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
		},
		"aiplatform.endpoints.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudasset.assets.exportComputeRegionBackendServices": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudkms.importJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS Importer (roles/cloudkms.importer)",
		},
		"compute.instances.setDeletionProtection": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"dialogflow.phoneNumberOrders.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"visualinspection.datasets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"aiplatform.indexes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.datasets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"networkservices.httpFilters.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"secretmanager.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Secret Manager Admin (roles/secretmanager.admin)",
			"Secret Manager Viewer (roles/secretmanager.viewer)",
		},
		"storagetransfer.agentpools.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
			"Storage Transfer Viewer (roles/storagetransfer.viewer)",
		},
		"apigee.developermonetizationconfigs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
		},
		"cloudkms.cryptoKeyVersions.manageRawPKCS1Keys": {
			"Owner (roles/owner)",
			"Cloud KMS Expert Raw PKCS#1 Key Manager (roles/cloudkms.expertRawPKCS1)",
		},
		"container.pods.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"gkehub.memberships.setIamPolicy": {
			"Owner (roles/owner)",
			"GKE Hub Admin (roles/gkehub.admin)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"aiplatform.tensorboardExperiments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.disks.createSnapshot": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.securityPolicies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Organization Security Policy Admin (roles/compute.orgSecurityPolicyAdmin)",
			"Compute Organization Security Policy User (roles/compute.orgSecurityPolicyUser)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.conversationDatasets.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"apigee.archivedeployments.upload": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"apigee.sharedflows.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"cloudsql.instances.export": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"opsconfigmonitoring.resourceMetadata.write": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Telemetry Writer (roles/gkemulticloud.telemetryWriter)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Ops Config Monitoring Resource Metadata Writer (roles/opsconfigmonitoring.resourceMetadata.writer)",
		},
		"vmmigration.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"apigee.envgroups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"automl.annotationSpecs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"videostitcher.cdnKeys.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"privateca.reusableConfigs.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"securitycenter.assets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Assets Viewer (roles/securitycenter.assetsViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"workflows.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Workflows Admin (roles/workflows.admin)",
			"Workflows Editor (roles/workflows.editor)",
			"Workflows Viewer (roles/workflows.viewer)",
		},
		"apigee.exports.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"contactcenterinsights.conversations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
		},
		"dialogflow.callMatchers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"firebase.links.update": {
			"Owner (roles/owner)",
			"Firebase Admin (roles/firebase.admin)",
		},
		"networksecurity.clientTlsPolicies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"healthcare.hl7V2Messages.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
		},
		"logging.buckets.write": {
			"Logs Bucket Writer (roles/logging.bucketWriter)",
		},
		"servicenetworking.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Networking Admin (roles/servicenetworking.networksAdmin)",
		},
		"apigee.environments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"cloudbuild.builds.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Build Approver (roles/cloudbuild.builds.approver)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Editor (roles/cloudbuild.builds.editor)",
			"Cloud Build Viewer (roles/cloudbuild.builds.viewer)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Composer Worker (roles/composer.worker)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudmigration.velostrataendpoints.connect": {
			"Owner (roles/owner)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Velostrata Manager Connection Agent (roles/cloudmigration.velostrataconnect)",
		},
		"compute.networks.getEffectiveFirewalls": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"file.backups.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
			"Cloud Filestore Viewer (roles/file.viewer)",
		},
		"cloudtrace.stats.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace User (roles/cloudtrace.user)",
		},
		"container.validatingWebhookConfigurations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"securitycenter.notificationconfig.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Notification Configurations Editor (roles/securitycenter.notificationConfigEditor)",
			"Security Center Notification Configurations Viewer (roles/securitycenter.notificationConfigViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"networkconnectivity.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Hub & Spoke Admin (roles/networkconnectivity.hubAdmin)",
		},
		"aiplatform.trials.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"datastream.privateConnections.setIamPolicy": {
			"Owner (roles/owner)",
			"Datastream Admin (roles/datastream.admin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"dialogflow.conversationModels.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"file.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
			"Cloud Filestore Viewer (roles/file.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"firebasedynamiclinks.domains.delete": {
			"Owner (roles/owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
		},
		"pubsub.snapshots.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Viewer (roles/pubsub.viewer)",
		},
		"cloudtasks.queues.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
			"Cloud Tasks Viewer (roles/cloudtasks.viewer)",
		},
		"compute.globalAddresses.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"datapipelines.pipelines.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data pipelines Admin (roles/datapipelines.admin)",
			"Data pipelines Viewer (roles/datapipelines.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"essentialcontacts.contacts.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Essential Contacts Admin (roles/essentialcontacts.admin)",
		},
		"gameservices.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"appengine.memcache.addKey": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
		},
		"dataconnectors.connectors.setIamPolicy": {
			"Owner (roles/owner)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"servicedirectory.services.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
		},
		"automl.columnSpecs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datalabeling.dataitems.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"privateca.certificateTemplates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
		},
		"cloudasset.assets.exportIamServiceAccounts": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.clusterRoles.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataproc.workflowTemplates.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
		},
		"networkservices.httpFilters.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"apigateway.apis.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"ApiGateway Admin (roles/apigateway.admin)",
		},
		"apigee.developerattributes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"bigquery.connections.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Connection Admin (roles/bigquery.connectionAdmin)",
			"BigQuery Connection User (roles/bigquery.connectionUser)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.globalPublicDelegatedPrefixes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataproc.jobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"securitycenter.websecurityscannersettings.calculate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"compute.images.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.licenses.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"container.events.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"dataproc.jobs.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"retail.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Recommendations AI Admin (roles/automlrecommendations.admin)",
			"Recommendations AI Admin Viewer (roles/automlrecommendations.adminViewer)",
			"Recommendations AI Editor (roles/automlrecommendations.editor)",
			"Recommendations AI Viewer (roles/automlrecommendations.viewer)",
			"Retail Admin (roles/retail.admin)",
			"Retail Editor (roles/retail.editor)",
			"Retail Viewer (roles/retail.viewer)",
		},
		"compute.regionNotificationEndpoints.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"iam.serviceAccounts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Cloud API Gateway Management Service Agent (roles/apigateway_management.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Earth Engine Apps Publisher (roles/earthengine.appsPublisher)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
			"Create Service Accounts (roles/iam.serviceAccountCreator)",
			"Delete Service Accounts (roles/iam.serviceAccountDeleter)",
			"Service Account Key Admin (roles/iam.serviceAccountKeyAdmin)",
			"Service Account Token Creator (roles/iam.serviceAccountTokenCreator)",
			"Service Account User (roles/iam.serviceAccountUser)",
			"Workload Identity User (roles/iam.workloadIdentityUser)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Cloud Pub/Sub Service Agent (roles/pubsub.serviceAgent)",
			"Cloud Workflows Service Agent (roles/workflows.serviceAgent)",
		},
		"aiplatform.dataItems.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"apigee.securityreports.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Security Admin (roles/apigee.securityAdmin)",
		},
		"baremetalsolution.volumesnapshots.restore": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
		},
		"cloudtasks.queues.purge": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Tasks Admin (roles/cloudtasks.admin)",
			"Cloud Tasks Queue Admin (roles/cloudtasks.queueAdmin)",
		},
		"compute.instanceGroupManagers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"apigee.developerattributes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
		},
		"connectors.connections.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
		},
		"firebaseabt.experiments.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
			"Firebase A/B Testing Viewer (roles/firebaseabt.viewer)",
		},
		"notebooks.instances.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"recaptchaenterprise.keys.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"reCAPTCHA Enterprise Admin (roles/recaptchaenterprise.admin)",
		},
		"datafusion.instances.runtime": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion Admin (roles/datafusion.admin)",
			"Cloud Data Fusion Runner (roles/datafusion.runner)",
			"Cloud Data Fusion Viewer (roles/datafusion.viewer)",
		},
		"recommender.cloudAssetInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Cloud Asset Insights Admin (roles/recommender.cloudAssetInsightsAdmin)",
			"Cloud Asset Insights Viewer (roles/recommender.cloudAssetInsightsViewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"storage.multipartUploads.listParts": {
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Worker (roles/dataproc.worker)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Storage Legacy Bucket Writer (roles/storage.legacyBucketWriter)",
			"Storage Object Creator (roles/storage.objectCreator)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"baremetalsolution.snapshotschedulepolicies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
		},
		"osconfig.osPolicyAssignments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"OSPolicyAssignment Admin (roles/osconfig.osPolicyAssignmentAdmin)",
		},
		"redis.instances.rescheduleMaintenance": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Redis Admin (roles/redis.admin)",
		},
		"clientauthconfig.clients.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"OAuth Config Editor (roles/oauthconfig.editor)",
		},
		"compute.backendServices.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Web Security Scanner Service Agent (roles/websecurityscanner.serviceAgent)",
		},
		"container.csiDrivers.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"networksecurity.authorizationPolicies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"securitycenter.sources.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Findings Editor (roles/securitycenter.findingsEditor)",
			"Security Center Findings Viewer (roles/securitycenter.findingsViewer)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Sources Admin (roles/securitycenter.sourcesAdmin)",
			"Security Center Sources Editor (roles/securitycenter.sourcesEditor)",
			"Security Center Sources Viewer (roles/securitycenter.sourcesViewer)",
		},
		"storagetransfer.jobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Storage Transfer Admin (roles/storagetransfer.admin)",
			"Storage Transfer User (roles/storagetransfer.user)",
		},
		"deploymentmanager.types.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"vmmigration.sources.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"baremetalsolution.snapshotschedulepolicies.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
		},
		"clouddeploy.targets.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
		},
		"compute.healthChecks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.httpsHealthChecks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Cloud Firewall Insights Service Agent (roles/firewallinsights.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"contactcenterinsights.settings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
		},
		"transcoder.jobTemplates.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Transcoder Admin (roles/transcoder.admin)",
		},
		"videostitcher.liveSessions.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher User (roles/videostitcher.user)",
		},
		"bigquery.reservationAssignments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.globalForwardingRules.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Mesh Data Plane Service Agent (roles/meshdataplane.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud Web Security Scanner Service Agent (roles/websecurityscanner.serviceAgent)",
		},
		"fleetengine.trips.updateState": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Fleet Engine Service Super User (roles/fleetengine.serviceSuperUser)",
		},
		"gkemulticloud.azureClients.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
		},
		"servicebroker.bindingoperations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"cloudiot.registries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
		},
		"compute.snapshots.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"deploymentmanager.typeProviders.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Deployment Manager Type Viewer (roles/deploymentmanager.typeViewer)",
			"Deployment Manager Viewer (roles/deploymentmanager.viewer)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dlp.kms.encrypt": {
			"Owner (roles/owner)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Jobs Editor (roles/dlp.jobsEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"DLP User (roles/dlp.user)",
		},
		"dlp.storedInfoTypes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"DLP Administrator (roles/dlp.admin)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP Reader (roles/dlp.reader)",
			"DLP Stored InfoTypes Editor (roles/dlp.storedInfoTypesEditor)",
			"DLP Stored InfoTypes Reader (roles/dlp.storedInfoTypesReader)",
		},
		"certificatemanager.certmapentries.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Certificate Manager Editor (roles/certificatemanager.editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Certificate Manager Viewer (roles/certificatemanager.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"cloudsql.sslCerts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datastore.databases.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"gkemulticloud.operations.wait": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
		},
		"healthcare.dicomStores.dicomWebRead": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare DICOM Editor (roles/healthcare.dicomEditor)",
			"Healthcare DICOM Viewer (roles/healthcare.dicomViewer)",
		},
		"metastore.services.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"bigtable.clusters.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Bigtable Reader (roles/bigtable.reader)",
			"Bigtable User (roles/bigtable.user)",
			"Bigtable Viewer (roles/bigtable.viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"billing.accounts.redeemPromotion": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account User (roles/billing.user)",
		},
		"compute.regionHealthChecks.useReadOnly": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionTargetHttpProxies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"GCP Network Management Service Agent (roles/networkmanagement.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"datalabeling.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.nodeGroups.deleteNodes": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.endpoints.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datacatalog.taxonomies.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"Policy Tag Admin (roles/datacatalog.categoryAdmin)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
		},
		"datastore.locations.get": {
			"Owner (roles/owner)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"servicedirectory.endpoints.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
		},
		"recommender.usageCommitmentRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Viewer (roles/billing.viewer)",
			"Billing Account Usage Commitment Recommender Admin (roles/recommender.billingAccountCudAdmin)",
			"Billing Account Usage Commitment Recommender Viewer (roles/recommender.billingAccountCudViewer)",
			"Project Usage Commitment Recommender Admin (roles/recommender.projectCudAdmin)",
			"Project Usage Commitment Recommender Viewer (roles/recommender.projectCudViewer)",
		},
		"apigee.portals.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Portal Admin (roles/apigee.portalAdmin)",
		},
		"contactcenterinsights.issues.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Contact Center AI Insights editor (roles/contactcenterinsights.editor)",
			"Contact Center AI Insights viewer (roles/contactcenterinsights.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"datacatalog.entries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"DataCatalog entry Owner (roles/datacatalog.entryOwner)",
		},
		"dataconnectors.connectors.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/dataconnectors.connectorAdmin)",
			"Connector User (roles/dataconnectors.connectorUser)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"healthcare.hl7V2Stores.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare HL7v2 Message Consumer (roles/healthcare.hl7V2Consumer)",
			"Healthcare HL7v2 Message Editor (roles/healthcare.hl7V2Editor)",
			"Healthcare HL7v2 Message Ingest (roles/healthcare.hl7V2Ingest)",
			"Healthcare HL7v2 Store Administrator (roles/healthcare.hl7V2StoreAdmin)",
			"Healthcare HL7v2 Store Viewer (roles/healthcare.hl7V2StoreViewer)",
		},
		"consumerprocurement.orders.modify": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Billing Account Administrator (roles/billing.admin)",
			"Consumer Procurement Order Administrator (roles/consumerprocurement.orderAdmin)",
		},
		"container.auditSinks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"iam.serviceAccounts.signJwt": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Compute Engine Service Agent (roles/compute.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Service Account Token Creator (roles/iam.serviceAccountTokenCreator)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Pub/Sub Service Agent (roles/pubsub.serviceAgent)",
		},
		"spanner.backupOperations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Spanner Admin (roles/spanner.admin)",
			"Cloud Spanner Backup Admin (roles/spanner.backupAdmin)",
			"Cloud Spanner Backup Writer (roles/spanner.backupWriter)",
		},
		"cloudfunctions.functions.setIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"compute.globalOperations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.updateInfos.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"livestream.channels.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Live Stream Editor (roles/livestream.editor)",
			"Live Stream Viewer (roles/livestream.viewer)",
		},
		"logging.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"memcache.instances.updateParameters": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Memorystore Memcached Admin (roles/memcache.admin)",
			"Cloud Memorystore Memcached Editor (roles/memcache.editor)",
		},
		"visualinspection.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"visualinspection.solutions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"cloudsupport.accounts.updateUserRoles": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Support Account Administrator (roles/cloudsupport.admin)",
		},
		"container.storageStates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"containeranalysis.occurrences.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Occurrences Editor (roles/containeranalysis.occurrences.editor)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
		},
		"datamigration.connectionprofiles.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"managedidentities.domains.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"cloudvolumesgcp-api.netapp.com/volumes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"NetApp Cloud Volumes Admin (roles/netappcloudvolumes.admin)",
		},
		"healthcare.fhirResources.patch": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare FHIR Resource Editor (roles/healthcare.fhirResourceEditor)",
		},
		"ml.versions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"AI Platform Admin (roles/ml.admin)",
			"AI Platform Model Owner (roles/ml.modelOwner)",
		},
		"orgpolicy.policy.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
			"Environment and Storage Object Administrator (roles/composer.environmentAndStorageObjectAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Organization Policy Administrator (roles/orgpolicy.policyAdmin)",
			"Organization Policy Viewer (roles/orgpolicy.policyViewer)",
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Creator (roles/resourcemanager.folderCreator)",
			"Folder Editor (roles/resourcemanager.folderEditor)",
			"Folder Viewer (roles/resourcemanager.folderViewer)",
			"Organization Administrator (roles/resourcemanager.organizationAdmin)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage HMAC Key Admin (roles/storage.hmacKeyAdmin)",
			"Storage Object Admin (roles/storage.objectAdmin)",
			"Storage Object Creator (roles/storage.objectCreator)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"runtimeconfig.waiters.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"chroniclesm.gcpAssociations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Chronicle Service Admin (roles/chroniclesm.admin)",
			"Chronicle Service Viewer (roles/chroniclesm.viewer)",
		},
		"cloudtranslate.generalModels.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Cloud Translation API Viewer (roles/cloudtranslate.viewer)",
		},
		"compute.images.listTagBindings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Tag Viewer (roles/resourcemanager.tagViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.serviceAttachments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.petSets.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"storage.buckets.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"Cloud Asset Service Agent (roles/cloudasset.serviceAgent)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Deploy Service Agent (roles/clouddeploy.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"Retail Service Agent (roles/retail.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudsecurityscanner.scanruns.stop": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Web Security Scanner Editor (roles/cloudsecurityscanner.editor)",
			"Web Security Scanner Runner (roles/cloudsecurityscanner.runner)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.targetHttpsProxies.setSslCertificates": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"gkemulticloud.azureServerConfigs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-cloud Viewer (roles/gkemulticloud.viewer)",
		},
		"healthcare.consentArtifacts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
			"Healthcare Consent Artifact Reader (roles/healthcare.consentArtifactReader)",
		},
		"networkservices.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"bigquery.capacityCommitments.delete": {
			"Owner (roles/owner)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"certificatemanager.dnsauthorizations.setIamPolicy": {
			"Owner (roles/owner)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"clouddeploy.rollouts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Approver (roles/clouddeploy.approver)",
			"Cloud Deploy Developer (roles/clouddeploy.developer)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
			"Cloud Deploy Releaser (roles/clouddeploy.releaser)",
			"Cloud Deploy Viewer (roles/clouddeploy.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dns.resourceRecordSets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"logging.buckets.create": {
			"Owner (roles/owner)",
			"Apigee Service Agent (roles/apigee.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Logging Admin (roles/logging.admin)",
			"Logs Configuration Writer (roles/logging.configWriter)",
		},
		"firebasenotifications.messages.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase Cloud Messaging Admin (roles/firebasenotifications.admin)",
			"Firebase Cloud Messaging Viewer (roles/firebasenotifications.viewer)",
		},
		"privateca.certificateAuthorities.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"CA Service Admin (roles/privateca.admin)",
			"CA Service Auditor (roles/privateca.auditor)",
			"CA Service Operation Manager (roles/privateca.caManager)",
			"CA Service Certificate Manager (roles/privateca.certificateManager)",
		},
		"apigee.keystores.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"apigee.projects.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
		},
		"bigquery.tables.export": {
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"AutoML Service Agent (roles/automl.serviceAgent)",
			"Recommendations AI Service Agent (roles/automlrecommendations.serviceAgent)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataplex Storage Data Owner (roles/dataplex.storageDataOwner)",
			"Dataplex Storage Data Reader (roles/dataplex.storageDataReader)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Retail Service Agent (roles/retail.serviceAgent)",
		},
		"cloudsql.instances.resetSslConfig": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
		},
		"container.controllerRevisions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"translationhub.portals.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Translation Hub Admin (roles/translationhub.admin)",
		},
		"aiplatform.specialistPools.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Vertex AI Viewer (roles/aiplatform.viewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"compute.disks.listTagBindings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute OS Admin Login (roles/compute.osAdminLogin)",
			"Compute OS Login (roles/compute.osLogin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Tag Viewer (roles/resourcemanager.tagViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.interconnectAttachments.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"firebase.projects.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Actions Admin (roles/actions.Admin)",
			"Actions Viewer (roles/actions.Viewer)",
			"Firebase Remote Config Admin (roles/cloudconfig.admin)",
			"Firebase Remote Config Viewer (roles/cloudconfig.viewer)",
			"Firebase Test Lab Admin (roles/cloudtestservice.testAdmin)",
			"Firebase Test Lab Viewer (roles/cloudtestservice.testViewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Analytics Admin (roles/firebase.analyticsAdmin)",
			"Firebase Analytics Viewer (roles/firebase.analyticsViewer)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase Grow Viewer (roles/firebase.growthViewer)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"Firebase Quality Admin (roles/firebase.qualityAdmin)",
			"Firebase Quality Viewer (roles/firebase.qualityViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
			"Firebase A/B Testing Viewer (roles/firebaseabt.viewer)",
			"Firebase App Distribution Admin (roles/firebaseappdistro.admin)",
			"Firebase App Distribution Viewer (roles/firebaseappdistro.viewer)",
			"Firebase Authentication Admin (roles/firebaseauth.admin)",
			"Firebase Authentication Viewer (roles/firebaseauth.viewer)",
			"Firebase Crashlytics Admin (roles/firebasecrashlytics.admin)",
			"Firebase Crashlytics Viewer (roles/firebasecrashlytics.viewer)",
			"Firebase Realtime Database Admin (roles/firebasedatabase.admin)",
			"Firebase Realtime Database Viewer (roles/firebasedatabase.viewer)",
			"Firebase Dynamic Links Admin (roles/firebasedynamiclinks.admin)",
			"Firebase Dynamic Links Viewer (roles/firebasedynamiclinks.viewer)",
			"Firebase Hosting Admin (roles/firebasehosting.admin)",
			"Firebase Hosting Viewer (roles/firebasehosting.viewer)",
			"Firebase In-App Messaging Admin (roles/firebaseinappmessaging.admin)",
			"Firebase In-App Messaging Viewer (roles/firebaseinappmessaging.viewer)",
			"Firebase ML Kit Admin (roles/firebaseml.admin)",
			"Firebase ML Kit Viewer (roles/firebaseml.viewer)",
			"Firebase Cloud Messaging Admin (roles/firebasenotifications.admin)",
			"Firebase Cloud Messaging Viewer (roles/firebasenotifications.viewer)",
			"Firebase Performance Reporting Admin (roles/firebaseperformance.admin)",
			"Firebase Performance Reporting Viewer (roles/firebaseperformance.viewer)",
			"Firebase Predictions Admin (roles/firebasepredictions.admin)",
			"Firebase Predictions Viewer (roles/firebasepredictions.viewer)",
			"Cloud Storage for Firebase Admin (roles/firebasestorage.admin)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Storage Admin (roles/storage.admin)",
			"Storage HMAC Key Admin (roles/storage.hmacKeyAdmin)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"monitoring.services.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Editor (roles/monitoring.editor)",
			"Monitoring Services Editor (roles/monitoring.servicesEditor)",
		},
		"visualinspection.solutions.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"cloudtrace.traces.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Trace Admin (roles/cloudtrace.admin)",
			"Cloud Trace User (roles/cloudtrace.user)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.phoneNumberOrders.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
		},
		"dialogflow.webhooks.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Dialogflow Webhook Admin (roles/dialogflow.webhookAdmin)",
		},
		"paymentsresellersubscription.subscriptions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Payments Reseller Admin (roles/paymentsresellersubscription.partnerAdmin)",
			"Payments Reseller Viewer (roles/paymentsresellersubscription.partnerViewer)",
			"Payments Reseller Subscriptions Editor (roles/paymentsresellersubscription.subscriptionEditor)",
			"Payments Reseller Subscriptions Viewer (roles/paymentsresellersubscription.subscriptionViewer)",
		},
		"videostitcher.liveAdTagDetails.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"compute.resourcePolicies.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"datacatalog.entries.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"DataCatalog entry Owner (roles/datacatalog.entryOwner)",
			"DataCatalog Entry Viewer (roles/datacatalog.entryViewer)",
			"Data Catalog Viewer (roles/datacatalog.viewer)",
		},
		"datalabeling.operations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Contact Center AI Insights Service Agent (roles/contactcenterinsights.serviceAgent)",
			"Data Labeling Service Admin (roles/datalabeling.admin)",
			"Data Labeling Service Editor (roles/datalabeling.editor)",
			"Data Labeling Service Viewer (roles/datalabeling.viewer)",
		},
		"monitoring.dashboards.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Monitoring Admin (roles/monitoring.admin)",
			"Monitoring Dashboard Configuration Editor (roles/monitoring.dashboardEditor)",
			"Monitoring Editor (roles/monitoring.editor)",
		},
		"pubsub.topics.attachSubscription": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Eventarc Service Agent (roles/eventarc.serviceAgent)",
			"Healthcare Service Agent (roles/healthcare.serviceAgent)",
			"KubeRun Events Control Plane Service Agent (roles/kuberun.eventsControlPlaneServiceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
			"Pub/Sub Subscriber (roles/pubsub.subscriber)",
			"Secured Landing Zone Service Agent (roles/securedlandingzone.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
		},
		"datastream.streams.computeState": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Datastream Admin (roles/datastream.admin)",
		},
		"managedidentities.peerings.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
		},
		"recommender.cloudsqlInstanceActivityInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud SQL Admin (roles/cloudsql.admin)",
			"Cloud SQL Editor (roles/cloudsql.editor)",
			"Cloud SQL Viewer (roles/cloudsql.viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud SQL Recommender Admin (roles/recommender.cloudsqlAdmin)",
			"Cloud SQL Recommender Viewer (roles/recommender.cloudsqlViewer)",
		},
		"aiplatform.tensorboards.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"automl.humanAnnotationTasks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AutoML Admin (roles/automl.admin)",
			"AutoML Editor (roles/automl.editor)",
			"AutoML Viewer (roles/automl.viewer)",
			"Data Labeling Service Agent (roles/datalabeling.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudasset.assets.exportComputeRegionInstanceGroup": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"cloudonefs.isiloncloud.com/clusters.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dell EMC Cloud OneFS Admin (roles/dellemccloudonefs.admin)",
			"Dell EMC Cloud OneFS User (roles/dellemccloudonefs.user)",
		},
		"connectors.connectors.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
		},
		"run.revisions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Functions Admin (roles/cloudfunctions.admin)",
			"Cloud Functions Developer (roles/cloudfunctions.developer)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Cloud Functions Viewer (roles/cloudfunctions.viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Cloud Run Admin (roles/run.admin)",
			"Cloud Run Developer (roles/run.developer)",
			"Cloud Run Viewer (roles/run.viewer)",
		},
		"billing.subscriptions.update": {
			"Billing Account Administrator (roles/billing.admin)",
		},
		"compute.regionNotificationEndpoints.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataplex.tasks.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
			"Dataplex Editor (roles/dataplex.editor)",
		},
		"vmmigration.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"logging.logEntries.download": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs View Accessor (roles/logging.viewAccessor)",
		},
		"metastore.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Dataproc Metastore Admin (roles/metastore.admin)",
			"Dataproc Metastore Editor (roles/metastore.editor)",
			"Dataproc Metastore Metadata Operator (roles/metastore.metadataOperator)",
			"Dataproc Metastore Viewer (roles/metastore.user)",
		},
		"apigee.developerappattributes.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"apigee.hostqueries.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"containeranalysis.notes.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Container Analysis Admin (roles/containeranalysis.admin)",
			"Container Analysis Notes Editor (roles/containeranalysis.notes.editor)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
		},
		"datastream.streams.fetchErrors": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"gsuiteaddons.deployments.installStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
			"Google Workspace Add-ons Tester (roles/gsuiteaddons.tester)",
		},
		"dialogflow.flows.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"resourcemanager.tagKeys.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Tag Administrator (roles/resourcemanager.tagAdmin)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Tag Viewer (roles/resourcemanager.tagViewer)",
		},
		"artifactregistry.versions.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Artifact Registry Reader (roles/artifactregistry.reader)",
			"Artifact Registry Repository Administrator (roles/artifactregistry.repoAdmin)",
			"Artifact Registry Writer (roles/artifactregistry.writer)",
			"Cloud Build Service Account (roles/cloudbuild.builds.builder)",
			"Cloud Build Service Agent (roles/cloudbuild.serviceAgent)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Container Scanner Service Agent (roles/containerscanning.ServiceAgent)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Cloud Run Service Agent (roles/run.serviceAgent)",
			"Cloud Run Service Agent (roles/serverless.serviceAgent)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudtranslate.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
		},
		"compute.networkEndpointGroups.detachNetworkEndpoints": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.regionUrlMaps.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dataproc.jobs.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
		},
		"apigee.organizations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Monetization Admin (roles/apigee.monetizationAdmin)",
			"Apigee Portal Admin (roles/apigee.portalAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudasset.assets.exportCloudkmsKeyRings": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"pubsub.schemas.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Pub/Sub Admin (roles/pubsub.admin)",
		},
		"recommender.computeAddressIdleResourceInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"threatdetection.detectorSettings.clear": {
			"Owner (roles/owner)",
			"Threat Detection Settings Editor (roles/threatdetection.editor)",
		},
		"recommender.resourcemanagerProjectUtilizationInsights.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Project Utilization Recommender Admin (roles/recommender.projectUtilAdmin)",
			"Project Utilization Recommender Viewer (roles/recommender.projectUtilViewer)",
		},
		"aiplatform.endpoints.explain": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"cloudkms.keyRings.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud KMS Admin (roles/cloudkms.admin)",
			"Cloud KMS Viewer (roles/cloudkms.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"container.clusterRoleBindings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Anthos Service Mesh Service Agent (roles/anthosservicemesh.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"GKE Hub Service Agent (roles/gkehub.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"earthengine.computations.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Earth Engine Resource Admin (roles/earthengine.admin)",
			"Earth Engine Resource Viewer (roles/earthengine.viewer)",
			"Earth Engine Resource Writer (roles/earthengine.writer)",
		},
		"firebaseappcheck.recaptchaEnterpriseConfig.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
			"Firebase App Check Admin (roles/firebaseappcheck.admin)",
			"Firebase App Check Viewer (roles/firebaseappcheck.viewer)",
		},
		"gameservices.gameServerConfigs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Game Services API Admin (roles/gameservices.admin)",
			"Game Services API Viewer (roles/gameservices.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"notebooks.locations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"accesscontextmanager.gcpUserAccessBindings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Access Binding Admin (roles/accesscontextmanager.gcpAccessAdmin)",
			"Cloud Access Binding Reader (roles/accesscontextmanager.gcpAccessReader)",
		},
		"baremetalsolution.snapshotschedulepolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Bare Metal Solution Storage Admin (roles/baremetalsolution.storageadmin)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudiot.devices.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud IoT Admin (roles/cloudiot.admin)",
			"Cloud IoT Editor (roles/cloudiot.editor)",
			"Cloud IoT Provisioner (roles/cloudiot.provisioner)",
		},
		"dataproc.workflowTemplates.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
		},
		"datastore.keyVisualizerScans.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Key Visualizer Viewer (roles/datastore.keyVisualizerViewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
		},
		"apigee.keystorealiases.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"compute.addresses.createInternal": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"networkservices.serviceBindings.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"notebooks.instances.start": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"pubsublite.topics.listSubscriptions": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Pub/Sub Lite Admin (roles/pubsublite.admin)",
			"Pub/Sub Lite Editor (roles/pubsublite.editor)",
			"Pub/Sub Lite Viewer (roles/pubsublite.viewer)",
		},
		"visualinspection.modelEvaluations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"cloudsupport.accounts.purchase": {
			"Owner (roles/owner)",
			"Support Account Administrator (roles/cloudsupport.admin)",
		},
		"cloudtranslate.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Cloud Translation API User (roles/cloudtranslate.user)",
			"Cloud Translation API Viewer (roles/cloudtranslate.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"deploymentmanager.compositeTypes.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Deployment Manager Editor (roles/deploymentmanager.editor)",
			"Deployment Manager Type Editor (roles/deploymentmanager.typeEditor)",
			"Firebase Extensions API Service Agent (roles/firebasemods.serviceAgent)",
		},
		"visualinspection.models.writePrediction": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"visualinspection.modules.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
		},
		"apikeys.keys.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Service Management Service Agent (roles/firebase.managementServiceAgent)",
			"API Keys Admin (roles/serviceusage.apiKeysAdmin)",
		},
		"certificatemanager.certmaps.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
		},
		"dialogflow.transitionRouteGroups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
		},
		"networkservices.endpointPolicies.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"networkservices.httpFilters.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"compute.httpHealthChecks.useReadOnly": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.instances.setShieldedInstanceIntegrityPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.interconnects.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dns.managedZones.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"healthcare.consentStores.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Consent Store Administrator (roles/healthcare.consentStoreAdmin)",
		},
		"container.priorityClasses.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.replicationControllers.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"container.storageClasses.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"dataproc.jobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
		},
		"dialogflow.conversationProfiles.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Conversation Manager (roles/dialogflow.conversationManager)",
		},
		"bigtable.tables.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"clouddeploy.targets.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Deploy Admin (roles/clouddeploy.admin)",
			"Cloud Deploy Operator (roles/clouddeploy.operator)",
		},
		"compute.addresses.setLabels": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"iam.serviceAccounts.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Account Admin (roles/iam.serviceAccountAdmin)",
		},
		"networkmanagement.connectivitytests.rerun": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Network Management Admin (roles/networkmanagement.admin)",
		},
		"vmmigration.deployments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"VM Migration Administrator (roles/vmmigration.admin)",
			"VM Migration Viewer (roles/vmmigration.viewer)",
		},
		"vmmigration.migratingVms.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"bigquery.connections.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Connection Admin (roles/bigquery.connectionAdmin)",
			"BigQuery Connection User (roles/bigquery.connectionUser)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"cloudscheduler.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Scheduler Admin (roles/cloudscheduler.admin)",
			"Cloud Scheduler Viewer (roles/cloudscheduler.viewer)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.networks.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"datacatalog.entries.updateTag": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Data Catalog Admin (roles/datacatalog.admin)",
			"DataCatalog entryGroup Owner (roles/datacatalog.entryGroupOwner)",
			"DataCatalog entry Owner (roles/datacatalog.entryOwner)",
			"Data Catalog Tag Editor (roles/datacatalog.tagEditor)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
		},
		"servicemanagement.services.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud API Gateway Management Service Agent (roles/apigateway_management.serviceAgent)",
			"Service Management Administrator (roles/servicemanagement.admin)",
		},
		"apigee.environments.getStats": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"cloudasset.assets.listIamPolicy": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Cloud Asset Viewer (roles/cloudasset.viewer)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"visualinspection.modules.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"compute.globalNetworkEndpointGroups.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
		},
		"compute.regionUrlMaps.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"connectors.connectors.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Connector Admin (roles/connectors.admin)",
			"Connectors Viewer (roles/connectors.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"visualinspection.solutionArtifacts.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"apigee.proxyrevisions.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
		},
		"cloudtranslate.glossaries.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Translation API Admin (roles/cloudtranslate.admin)",
			"Cloud Translation API Editor (roles/cloudtranslate.editor)",
			"Translation Hub Admin (roles/translationhub.admin)",
		},
		"runtimeconfig.variables.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Cloud RuntimeConfig Admin (roles/runtimeconfig.admin)",
		},
		"servicedirectory.namespaces.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataproc Metastore Service Agent (roles/metastore.serviceAgent)",
			"Service Directory Admin (roles/servicedirectory.admin)",
			"Service Directory Editor (roles/servicedirectory.editor)",
			"Service Directory Service Agent (roles/servicedirectory.serviceAgent)",
		},
		"apigee.developers.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"billing.accounts.updateUsageExportSpec": {
			"Billing Account Administrator (roles/billing.admin)",
			"Billing Account Costs Manager (roles/billing.costsManager)",
		},
		"file.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
		},
		"networksecurity.operations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"videostitcher.vodStitchDetails.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Video Stitcher Admin (roles/videostitcher.admin)",
			"Video Stitcher Viewer (roles/videostitcher.viewer)",
		},
		"accesscontextmanager.servicePerimeters.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
			"VPC Service Controls Troubleshooter Viewer (roles/accesscontextmanager.vpcScTroubleshooterViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"artifactregistry.repositories.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Artifact Registry Administrator (roles/artifactregistry.admin)",
			"Cloud Functions Service Agent (roles/cloudfunctions.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"container.storageClasses.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datastore.entities.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Datastore Owner (roles/datastore.owner)",
			"Cloud Datastore User (roles/datastore.user)",
			"Cloud Datastore Viewer (roles/datastore.viewer)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"Firebase Develop Viewer (roles/firebase.developViewer)",
			"Firebase Admin SDK Administrator Service Agent (roles/firebase.sdkAdminServiceAgent)",
			"Firebase Viewer (roles/firebase.viewer)",
		},
		"apigee.developerattributes.createOrUpdateAll": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Developer Admin (roles/apigee.developerAdmin)",
		},
		"apigee.portals.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Portal Admin (roles/apigee.portalAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
		},
		"cloudjobdiscovery.profiles.search": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Profile Editor (roles/cloudjobdiscovery.profilesEditor)",
			"Profile Viewer (roles/cloudjobdiscovery.profilesViewer)",
		},
		"healthcare.consentArtifacts.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Healthcare Consent Artifact Administrator (roles/healthcare.consentArtifactAdmin)",
			"Healthcare Consent Artifact Editor (roles/healthcare.consentArtifactEditor)",
		},
		"visualinspection.solutionArtifacts.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Visual Inspection AI Solution Editor (roles/visualinspection.editor)",
			"Visual Inspection AI Viewer (roles/visualinspection.viewer)",
		},
		"apigee.environments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
		},
		"datastream.privateConnections.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Datastream Admin (roles/datastream.admin)",
			"Datastream Viewer (roles/datastream.viewer)",
		},
		"firebaseabt.experiments.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Grow Admin (roles/firebase.growthAdmin)",
			"Firebase A/B Testing Admin (roles/firebaseabt.admin)",
		},
		"recommender.computeInstanceIdleResourceRecommendations.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Compute Recommender Admin (roles/recommender.computeAdmin)",
			"Compute Recommender Viewer (roles/recommender.computeViewer)",
		},
		"privateca.certificateTemplates.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"CA Service Admin (roles/privateca.admin)",
		},
		"recommender.iamPolicyLateralMovementInsights.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"IAM Recommender Admin (roles/recommender.iamAdmin)",
			"IAM Recommender Viewer (roles/recommender.iamViewer)",
		},
		"accessapproval.settings.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Approval Approver (roles/accessapproval.approver)",
			"Access Approval Config Editor (roles/accessapproval.configEditor)",
			"Access Approval Viewer (roles/accessapproval.viewer)",
		},
		"baremetalsolution.networks.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Bare Metal Solution Admin (roles/baremetalsolution.admin)",
			"Bare Metal Solution Editor (roles/baremetalsolution.editor)",
			"Networks Admin (roles/baremetalsolution.networksadmin)",
			"Bare Metal Solution Viewer (roles/baremetalsolution.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"certificatemanager.operations.cancel": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Certificate Manager Owner (roles/certificatemanager.owner)",
		},
		"commerceprice.privateoffers.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Commerce Price Management Private Offers Admin (roles/commercepricemanagement.privateOffersAdmin)",
		},
		"container.storageClasses.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Kubernetes Engine Viewer (roles/container.viewer)",
			"Container Threat Detection Service Agent (roles/containerthreatdetection.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"vmmigration.cloneJobs.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"VM Migration Administrator (roles/vmmigration.admin)",
		},
		"managedidentities.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Google Cloud Managed Identities Admin (roles/managedidentities.admin)",
			"Google Cloud Managed Identities Domain Admin (roles/managedidentities.domainAdmin)",
			"Google Cloud Managed Identities Peering Admin (roles/managedidentities.peeringAdmin)",
			"Google Cloud Managed Identities Peering Viewer (roles/managedidentities.peeringViewer)",
			"Google Cloud Managed Identities Viewer (roles/managedidentities.viewer)",
		},
		"compute.networks.updatePolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud Build Integrations Owner (roles/cloudbuild.integrationsOwner)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
			"TPU Shared VPC Agent (roles/tpu.xpnAgent)",
		},
		"compute.targetGrpcProxies.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"connectors.operations.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Connector Admin (roles/connectors.admin)",
		},
		"dataplex.assets.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"endpoints.portals.attachCustomDomain": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Endpoints Portal Admin (roles/endpoints.portalAdmin)",
		},
		"bigquery.datasets.getIamPolicy": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Data Editor (roles/bigquery.dataEditor)",
			"BigQuery Data Owner (roles/bigquery.dataOwner)",
			"BigQuery Data Viewer (roles/bigquery.dataViewer)",
			"BigQuery Metadata Viewer (roles/bigquery.metadataViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"bigtable.appProfiles.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Bigtable Administrator (roles/bigtable.admin)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
		},
		"container.podDisruptionBudgets.updateStatus": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"datamigration.migrationjobs.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
		},
		"dataproc.clusters.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Hub Agent (roles/dataproc.hubAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dns.responsePolicyRules.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Kubernetes Engine Host Service Agent User (roles/container.hostServiceAgentUser)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"DNS Administrator (roles/dns.admin)",
			"DNS Reader (roles/dns.reader)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Cloud Managed Identities Service Agent (roles/managedidentities.serviceAgent)",
			"Service Networking Service Agent (roles/servicenetworking.serviceAgent)",
		},
		"accesscontextmanager.accessZones.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Access Context Manager Admin (roles/accesscontextmanager.policyAdmin)",
			"Access Context Manager Editor (roles/accesscontextmanager.policyEditor)",
			"Access Context Manager Reader (roles/accesscontextmanager.policyReader)",
		},
		"apigee.envgroupattachments.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Apigee Organization Admin (roles/apigee.admin)",
			"Apigee Analytics Editor (roles/apigee.analyticsEditor)",
			"Apigee Analytics Viewer (roles/apigee.analyticsViewer)",
			"Apigee API Admin (roles/apigee.apiAdminV2)",
			"Apigee API Reader (roles/apigee.apiReaderV2)",
			"Apigee Environment Admin (roles/apigee.environmentAdmin)",
			"Apigee Read-only Admin (roles/apigee.readOnlyAdmin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"compute.regionBackendServices.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Load Balancer Services User (roles/compute.loadBalancerServiceUser)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"compute.regionTargetHttpsProxies.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Load Balancer Admin (roles/compute.loadBalancerAdmin)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Multi Cluster Ingress Service Agent (roles/multiclusteringress.serviceAgent)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"container.csiNodeInfos.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Kubernetes Engine Admin (roles/container.admin)",
			"Kubernetes Engine Developer (roles/container.developer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Game Services Service Agent (roles/gameservices.serviceAgent)",
			"Mesh Managed Control Plane Service Agent (roles/meshcontrolplane.serviceAgent)",
		},
		"documentai.labelerPools.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Document AI Administrator. (roles/documentai.admin)",
			"Document AI Editor (roles/documentai.editor)",
			"Document AI Viewer (roles/documentai.viewer)",
		},
		"networkservices.httpfilters.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Mesh Config Service Agent (roles/meshconfig.serviceAgent)",
		},
		"notebooks.instances.getHealth": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
		},
		"resourcemanager.hierarchyNodes.deleteTagBinding": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Tag User (roles/resourcemanager.tagUser)",
		},
		"aiplatform.executions.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Vertex AI Administrator (roles/aiplatform.admin)",
			"Vertex AI Custom Code Service Agent (roles/aiplatform.customCodeServiceAgent)",
			"Vertex AI Service Agent (roles/aiplatform.serviceAgent)",
			"Vertex AI User (roles/aiplatform.user)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
		"bigquery.reservations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"BigQuery Admin (roles/bigquery.admin)",
			"BigQuery Resource Admin (roles/bigquery.resourceAdmin)",
			"BigQuery Resource Editor (roles/bigquery.resourceEditor)",
			"BigQuery Resource Viewer (roles/bigquery.resourceViewer)",
			"BigQuery User (roles/bigquery.user)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"DLP Organization Data Profiles Driver (roles/dlp.orgdriver)",
			"DLP Project Data Profiles Driver (roles/dlp.projectdriver)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.pages.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"AAM Admin (roles/dialogflow.aamAdmin)",
			"AAM Conversational Architect (roles/dialogflow.aamConversationalArchitect)",
			"AAM Dialog Designer (roles/dialogflow.aamDialogDesigner)",
			"AAM Lead Dialog Designer (roles/dialogflow.aamLeadDialogDesigner)",
			"AAM Viewer (roles/dialogflow.aamViewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Flow editor (roles/dialogflow.flowEditor)",
			"Dialogflow API Reader (roles/dialogflow.reader)",
			"Dialogflow Service Agent (roles/dialogflow.serviceAgent)",
		},
		"networksecurity.authorizationPolicies.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"serviceconsumermanagement.quota.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Service Management Administrator (roles/servicemanagement.admin)",
		},
		"pubsub.snapshots.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Worker (roles/composer.worker)",
			"Container Analysis Service Agent (roles/containeranalysis.ServiceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Pub/Sub Admin (roles/pubsub.admin)",
			"Pub/Sub Editor (roles/pubsub.editor)",
		},
		"compute.autoscalers.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"compute.publicDelegatedPrefixes.use": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Compute Admin (roles/compute.admin)",
			"Compute Public IP Admin (roles/compute.publicIpAdmin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
		},
		"dialogflow.environments.lookupHistory": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Environment editor (roles/dialogflow.environmentEditor)",
		},
		"cloudasset.feeds.list": {
			"Owner (roles/owner)",
			"Cloud Asset Owner (roles/cloudasset.owner)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Security Center Automation Service Agent (roles/securitycenter.automationServiceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
		},
		"compute.zones.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"App Engine flexible environment Service Agent (roles/appengineflex.serviceAgent)",
			"Velostrata Manager (roles/cloudmigration.inframanager)",
			"Cloud TPU V2 API Service Agent (roles/cloudtpu.serviceAgent)",
			"Compliance Scanning Service Agent (roles/compliancescanning.ServiceAgent)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Composer Shared VPC Agent (roles/composer.sharedVpcAgent)",
			"Compute Admin (roles/compute.admin)",
			"Compute Instance Admin (beta) (roles/compute.instanceAdmin)",
			"Compute Instance Admin (v1) (roles/compute.instanceAdmin.v1)",
			"Compute Network Admin (roles/compute.networkAdmin)",
			"Compute Network User (roles/compute.networkUser)",
			"Compute Network Viewer (roles/compute.networkViewer)",
			"Compute Security Admin (roles/compute.securityAdmin)",
			"Compute Storage Admin (roles/compute.storageAdmin)",
			"Compute Viewer (roles/compute.viewer)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Dataprep Service Agent (roles/dataprep.serviceAgent)",
			"Dataproc Administrator (roles/dataproc.admin)",
			"Dataproc Editor (roles/dataproc.editor)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"Dataproc Viewer (roles/dataproc.viewer)",
			"Genomics Service Agent (roles/genomics.serviceAgent)",
			"Cloud Life Sciences Service Agent (roles/lifesciences.serviceAgent)",
			"Notebooks Admin (roles/notebooks.admin)",
			"Notebooks Legacy Admin (roles/notebooks.legacyAdmin)",
			"Notebooks Legacy Viewer (roles/notebooks.legacyViewer)",
			"Notebooks Runner (roles/notebooks.runner)",
			"AI Platform Notebooks Service Agent (roles/notebooks.serviceAgent)",
			"Notebooks Viewer (roles/notebooks.viewer)",
			"Cloud OS Config Service Agent (roles/osconfig.serviceAgent)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Cloud TPU API Service Agent (roles/tpu.serviceAgent)",
			"Serverless VPC Access Service Agent (roles/vpcaccess.serviceAgent)",
		},
		"dataplex.content.get": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Dataplex Administrator (roles/dataplex.admin)",
			"Dataplex Developer (roles/dataplex.developer)",
			"Dataplex Editor (roles/dataplex.editor)",
			"Dataplex Viewer (roles/dataplex.viewer)",
		},
		"proximitybeacon.beacons.setIamPolicy": {
			"Owner (roles/owner)",
			"Security Admin (roles/iam.securityAdmin)",
		},
		"servicebroker.catalogs.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
			"Service Broker Admin (roles/servicebroker.admin)",
			"Service Broker Operator (roles/servicebroker.operator)",
		},
		"cloudsupport.techCases.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Tech Support Editor (roles/cloudsupport.techSupportEditor)",
			"Tech Support Viewer (roles/cloudsupport.techSupportViewer)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"dialogflow.entityTypes.create": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Dialogflow API Admin (roles/dialogflow.admin)",
			"Dialogflow Console Agent Editor (roles/dialogflow.consoleAgentEditor)",
			"Dialogflow Entity Type Admin (roles/dialogflow.entityTypeAdmin)",
		},
		"gkemulticloud.awsClusters.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Anthos Multi-cloud Admin (roles/gkemulticloud.admin)",
			"Anthos Multi-Cloud Service Agent (roles/gkemulticloud.serviceAgent)",
		},
		"gsuiteaddons.deployments.update": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Google Workspace Add-ons Developer (roles/gsuiteaddons.developer)",
		},
		"datamigration.locations.list": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Database Migration Admin (roles/datamigration.admin)",
			"Security Admin (roles/iam.securityAdmin)",
			"Security Reviewer (roles/iam.securityReviewer)",
		},
		"file.instances.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Kubernetes Engine Service Agent (roles/container.serviceAgent)",
			"Cloud Filestore Editor (roles/file.editor)",
		},
		"resourcemanager.folders.delete": {
			"Folder Admin (roles/resourcemanager.folderAdmin)",
			"Folder Editor (roles/resourcemanager.folderEditor)",
		},
		"assuredworkloads.workload.delete": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Assured Workloads Administrator (roles/assuredworkloads.admin)",
			"Assured Workloads Editor (roles/assuredworkloads.editor)",
		},
		"bigquery.rowAccessPolicies.overrideTimeTravelRestrictions": {
			"BigQuery Admin (roles/bigquery.admin)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
		},
		"logging.views.listLogs": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Logging Admin (roles/logging.admin)",
			"Logs View Accessor (roles/logging.viewAccessor)",
		},
		"securitycenter.containerthreatdetectionsettings.calculate": {
			"Owner (roles/owner)",
			"Editor (roles/editor)",
			"Viewer (roles/viewer)",
			"Risk Manager Service Agent (roles/riskmanager.serviceAgent)",
			"Security Center Admin (roles/securitycenter.admin)",
			"Security Center Admin Editor (roles/securitycenter.adminEditor)",
			"Security Center Admin Viewer (roles/securitycenter.adminViewer)",
			"Security Center Control Service Agent (roles/securitycenter.controlServiceAgent)",
			"Security Health Analytics Service Agent (roles/securitycenter.securityHealthAnalyticsServiceAgent)",
			"Security Center Service Agent (roles/securitycenter.serviceAgent)",
			"Security Center Settings Admin (roles/securitycenter.settingsAdmin)",
			"Security Center Settings Editor (roles/securitycenter.settingsEditor)",
			"Security Center Settings Viewer (roles/securitycenter.settingsViewer)",
		},
		"storage.buckets.createTagBinding": {
			"Owner (roles/owner)",
			"Cloud Composer API Service Agent (roles/composer.serviceAgent)",
			"Cloud Dataflow Service Agent (roles/dataflow.serviceAgent)",
			"Cloud Data Fusion API Service Agent (roles/datafusion.serviceAgent)",
			"Datapipelines Service Agent (roles/datapipelines.serviceAgent)",
			"Dataproc Service Agent (roles/dataproc.serviceAgent)",
			"DLP API Service Agent (roles/dlp.serviceAgent)",
			"Firebase Admin (roles/firebase.admin)",
			"Firebase Develop Admin (roles/firebase.developAdmin)",
			"AI Platform Service Agent (roles/ml.serviceAgent)",
			"Tag User (roles/resourcemanager.tagUser)",
			"Storage Admin (roles/storage.admin)",
			"Storage Legacy Bucket Owner (roles/storage.legacyBucketOwner)",
			"Visual Inspection AI Service Agent (roles/visualinspection.serviceAgent)",
		},
	}[permission]
}
